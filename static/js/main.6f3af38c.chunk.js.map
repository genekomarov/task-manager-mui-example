{"version":3,"sources":["utils/arrayToStringArguments.ts","api/api.ts","exceptions/exceptions.ts","redux/authReducer.ts","redux/appReducer.ts","redux/projectsReducer.ts","redux/usersReducer.ts","redux/clientSideApiReducer.ts","redux/tasksReducer.ts","components/Menu/Projects/Projects.tsx","components/Menu/Users/Users.tsx","components/Menu/Menu.tsx","components/AppBarContent/AppBarContent.tsx","components/FilterData/CombinedFilter/CombinedFilter.tsx","components/FilterData/ByStatusSort/ByStatusSort.tsx","components/FilterData/ByUsersFilter/ByUsersFilter.tsx","components/FilterData/ByContentFilter/ByContentFilter.tsx","components/FilterData/FilterRow/FilterRow.tsx","components/FilterData/Filter.tsx","components/FilterData/FilterWrapper.tsx","utils/breakLineForTextarea.ts","components/TasksList/Task/Task.tsx","components/TasksList/NewTask/NewTask.tsx","components/TasksList/TasksList.tsx","utils/tasksFilters.ts","components/LoginForm/LoginForm.tsx","validators/validators.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["arrayToStringArguments","argName","argArray","map","arg","toString","replace","instance","axios","create","withCredentials","baseURL","headers","authAPI","email","password","get","then","response","data","usersAPI","setOfUserIds","length","setOfProjectIds","projectsAPI","tasksAPI","AuthorizationFailedException","message","this","initialState","id","nickname","isAuth","loginFormShown","loginErrorMessage","actions","type","login","dispatch","a","authData","extraData","Cookies","set","showLoginForm","clientSideApiReducer","state","action","isInitialized","errors","newError","appReducer","projects","isFetching","selectedProjectId","projectsReducer","users","selectedUserId","setSelectedUserId","usersReducer","clientSideData","items","deleted","projectsToUsers","tasks","tableName","itemId","item","addIdToDeleted","addNewItem","deleteItem","filter","userIds","status","content","sort","firstCompleted","firstNew","countOfShownTasks","idCounter","taskId","title","task","setFilter","rewrite","undefined","setSort","tasksReducer","t","changeTaskId","findIndex","isDone","useStyles","makeStyles","theme","createStyles","root","display","flexDirection","progress","alignSelf","margin","spacing","nested","paddingLeft","mapDispatchToProps","getProjects","projectIds","p","projectId","setProjects","setSelectedProjectId","connect","auth","myId","app","props","useEffect","classes","React","useState","open","setOpen","className","ListItem","button","onClick","ListItemIcon","ListItemText","primary","primaryTypographyProps","variant","CircularProgress","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","key","projectName","setFetching","getUsers","u","userId","projectsIsFetching","author","width","maxWidth","backgroundColor","palette","background","paper","verticalSpacing","alignItems","padding","justifyContent","Menu","aria-labelledby","subheader","ListSubheader","grow","flexGrow","breakpoints","up","sectionDesktop","sectionMobile","typography__authorizedUserNickname","marginRight","logout","remove","myNickname","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleProfileMenuOpen","event","currentTarget","handleMobileMenuClose","handleMenuClose","handleLogin","menuId","renderMenu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","renderMobileMenu","IconButton","aria-label","aria-controls","aria-haspopup","color","Typography","noWrap","Helmet","edge","Button","formControl","minWidth","selectEmpty","marginTop","FormControl","Select","value","onChange","target","displayEmpty","inputProps","startAdornment","InputAdornment","position","Divider","filteredUsers","user","Autocomplete","usersIds","disableClearable","multiple","options","getOptionLabel","option","filterSelectedOptions","renderInput","params","TextField","label","placeholder","style","noValidate","autoComplete","e","fullWidth","children","rowNumber","Filter","FilterWrapper","keyDownOnTextarea","handleSubmit","handleChange","userAgent","ctrlKey","start","selectionStart","end","selectionEnd","slice","getBreakedString","test","preventDefault","checkbox_cursor_default","cursor","deleteTask","changeTask","console","log","userById","authorId","labelId","date","Date","dateStr","getDate","getMonth","getFullYear","getHours","getMinutes","role","Checkbox","checked","tabIndex","disableRipple","initialValues","onSubmit","values","setSubmitting","setTimeout","InputBase","name","multiline","onBlur","onKeyDown","navigator","secondary","textFieldWrapper_marginRight_20px","newTask","project","now","OutlinedInput","fontSize","itemSecondaryText","getTasks","setCountOfShownTasks","usersIsFetching","tasksOnClient","clientSideDb","filteredTasks","concat","statusFilter","usersFilter","contentFilter","match","RegExp","b","sortResultByStatus","filterByStatus","sortResultByDate","dateDiff","filterByDate","Container","size","setLoginErrorMessage","handleClose","Dialog","validate","touched","handleBlur","isSubmitting","DialogTitle","DialogContent","DialogContentText","error","InputLabel","htmlFor","Input","FormHelperText","DialogActions","disabled","drawer","flexShrink","appBar","marginLeft","menuButton","toolbar","mixins","drawerPaper","backdrop","zIndex","appInitializing","enqueueSnackbar","useSnackbar","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","Backdrop","CssBaseline","AppBar","Toolbar","Hidden","smUp","implementation","Drawer","anchor","direction","ModalProps","xsDown","window","location","hostname","rootReducer","combineReducers","api","authReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","maxSnack","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6f3af38c.chunk.js","sourcesContent":["const arrayToStringArguments = (argName: string, argArray: Array<number | string> | null) =>\r\n    argArray\r\n        ? argArray.map((arg) => `${argName}=${arg}&`).toString().replace(/,/g,'')\r\n        : \"\"\r\n\r\nexport default arrayToStringArguments","import axios from 'axios'\r\nimport {\r\n    AuthDataType,\r\n    ProjectToUserIdsMatch,\r\n    ProjectType,\r\n    TaskType, UserType\r\n} from \"../types/types\"\r\nimport arrayToStringArguments from \"../utils/arrayToStringArguments\"\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://my-json-server.typicode.com/genekomarov/task-manager_mui',\r\n    headers: {}\r\n})\r\n\r\nexport const authAPI = {\r\n    auth: (email: string, password: string) => {\r\n        return instance.get<Array<AuthDataType>>(`/authData?email=${email}&password=${password}`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsersByIds: (setOfUserIds: Array<number>) =>\r\n        setOfUserIds.length\r\n            ? instance.get<Array<UserType>>(`/users?${arrayToStringArguments(\"id\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    getUserIdsByProjectIds: (setOfProjectIds: Array<number>) =>\r\n        setOfProjectIds.length\r\n            ? instance.get<Array<ProjectToUserIdsMatch>>(\r\n                `/projects-to-users?${arrayToStringArguments(\"projectId\", setOfProjectIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n\r\n    addNewUser: () => console.error(\"method 'addNewUser' is not implemented\"),\r\n    changeUser: () => console.error(\"method 'changeUser' is not implemented\"),\r\n    deleteUser: () => console.error(\"method 'deleteUser' is not implemented\")\r\n}\r\n\r\nexport const projectsAPI = {\r\n    getProjectsByIds: (setOfProjectIds: Array<number>) =>\r\n        setOfProjectIds.length\r\n            ? instance.get<Array<ProjectType>>(`/projects?${arrayToStringArguments(\"id\", setOfProjectIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    getProjectIdsByUserIds: (setOfUserIds: Array<number>) =>\r\n        setOfUserIds.length\r\n            ? instance.get<Array<ProjectToUserIdsMatch>>(\r\n                `/projects-to-users?${arrayToStringArguments(\"userId\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n\r\n    addNewProject: () => console.error(\"method 'addNewProject' is not implemented\"),\r\n    changeProject: () => console.error(\"method 'changeProject' is not implemented\"),\r\n    deleteProject: () => console.error(\"method 'deleteProject' is not implemented\")\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasksByProjectOrUserIds: (setOfProjectIds: Array<number> | null, setOfUserIds: Array<number> | null) =>\r\n        setOfProjectIds || setOfUserIds\r\n            ? instance.get<Array<TaskType>>(\r\n                `/tasks?${arrayToStringArguments(\"project\", setOfProjectIds)}${arrayToStringArguments(\"author\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    addNewTask: (task: TaskType) =>\r\n        instance.post<TaskType>(`/tasks`, task)\r\n            .then(response => response.data),\r\n\r\n    changeTask: (taskId: number, title: string, isDone: boolean) =>\r\n        instance.patch<TaskType>(`/tasks/${taskId}`, {title, isDone})\r\n            .then(response => response.data),\r\n\r\n    deleteTask: (taskId: number) =>\r\n        instance.delete<TaskType>(`/tasks/${taskId}`)\r\n            .then(response => response.data),\r\n}\r\n\r\n","export class AuthorizationFailedException {\r\n    message: string;\r\n    constructor () {\r\n        this.message = `Авторизация не удалась`\r\n    }\r\n}","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, usersAPI} from \"../api/api\"\r\nimport {AuthorizationFailedException} from \"../exceptions/exceptions\"\r\nimport Cookies from 'js-cookie'\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    nickname: null as string | null,\r\n    isAuth: false,\r\n    loginFormShown: false,\r\n    loginErrorMessage: null as string | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst clientSideApiReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                id: action.id,\r\n                email: action.email,\r\n                nickname: action.nickname,\r\n                isAuth: action.isAuth\r\n            }\r\n        case \"auth/SHOW_LOGIN_FORM\":\r\n            return {\r\n                ...state,\r\n                loginFormShown: action.loginFormShown\r\n            }\r\n            case \"auth/SET_LOGIN_ERROR_MESSAGE\":\r\n                return {\r\n                    ...state,\r\n                    loginErrorMessage: action.loginErrorMessage\r\n                }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setUserData: (\r\n        id: number | null,\r\n        email: string | null,\r\n        nickname: string | null,\r\n        isAuth: boolean\r\n    ) => ({type: 'auth/SET_USER_DATA', id, email, nickname, isAuth} as const),\r\n    showLoginForm: (loginFormShown: boolean) => ({type: 'auth/SHOW_LOGIN_FORM', loginFormShown} as const),\r\n    setLoginErrorMessage: (loginErrorMessage: string | null) => ({type: 'auth/SET_LOGIN_ERROR_MESSAGE', loginErrorMessage} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const login = (email: string, password: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let authData = await authAPI.auth(email, password)\r\n        if (authData.length === 0) throw new AuthorizationFailedException()\r\n        let extraData = await usersAPI.getUsersByIds([authData[0].id])\r\n        if (authData.length === 0) throw new AuthorizationFailedException()\r\n        dispatch(actions.setUserData(authData[0].id, authData[0].email, extraData[0].nickname, true))\r\n        dispatch(actions.showLoginForm(false))\r\n        dispatch(actions.setLoginErrorMessage(null))\r\n        Cookies.set('email',  email)\r\n        Cookies.set('password', password)\r\n    }\r\n    catch (e) {\r\n        dispatch(actions.setLoginErrorMessage('Неправильно введены email или password!'))\r\n    }\r\n}\r\n\r\nexport const fakeLogin = (): ThunkType => async (dispatch) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            setTimeout(() => {\r\n                dispatch(actions.setUserData(0, 'testuser@email.com', 'testuser', true))\r\n                resolve()\r\n            } ,2000)\r\n        }\r\n        catch (e) {\r\n            alert(e.message)\r\n            reject()\r\n        }\r\n    })\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    Cookies.remove('email')\r\n    Cookies.remove('password')\r\n    dispatch(actions.setUserData(null, null, null, false))\r\n}\r\n\r\nexport const showLoginForm = (loginFormShown: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.showLoginForm(loginFormShown))\r\n}\r\n\r\nexport const setLoginErrorMessage = (loginErrorMessage: string | null): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setLoginErrorMessage(loginErrorMessage))\r\n}\r\n\r\nexport default clientSideApiReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, usersAPI} from \"../api/api\"\r\nimport {AuthorizationFailedException} from \"../exceptions/exceptions\"\r\nimport {fakeLogin, login, showLoginForm} from \"./authReducer\"\r\nimport Cookies from 'js-cookie'\r\n\r\nlet initialState = {\r\n    isInitialized: false,\r\n    errors: [] as Array<string>\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"app/SET_INITIALIZED\":\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n            case \"app/ADD_ERROR\":\r\n                return {\r\n                    ...state,\r\n                    errors: [\r\n                        ...state.errors,\r\n                        action.message\r\n                    ]\r\n                }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setInitialized: (isInitialized: boolean) => ({type: 'app/SET_INITIALIZED', isInitialized} as const),\r\n    newError: (message: string) => ({type: 'app/ADD_ERROR', message} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const appInitializing = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        let email = Cookies.get('email')\r\n        let password = Cookies.get('password')\r\n        if (email && password)\r\n            await dispatch(login(email, password))\r\n        else {\r\n            dispatch(showLoginForm(true))\r\n        }\r\n\r\n        dispatch(actions.setInitialized(true))\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка инициализации'))\r\n    }\r\n}\r\n\r\nexport const newError = (message: string): ThunkType => async (dispatch) => {\r\n    dispatch(actions.newError(message))\r\n}\r\n\r\nexport default appReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, projectsAPI, usersAPI} from \"../api/api\"\r\nimport {ProjectToUserIdsMatch, ProjectType} from \"../types/types\"\r\nimport {useSnackbar} from \"notistack\"\r\nimport {newError} from \"./appReducer\"\r\n\r\nlet initialState = {\r\n    projects: [] as Array<ProjectType>,\r\n    isFetching: false,\r\n    selectedProjectId: null as number | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nconst projectsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'projects/SET_PROJECTS':\r\n            return {\r\n                ...state,\r\n                projects: action.projects,\r\n                selectedProjectId: action.selectedProjectId\r\n            }\r\n        case \"projects/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"projects/SET_SELECTED_PROJECT_ID\":\r\n            return {\r\n                ...state,\r\n                selectedProjectId: action.selectedProjectId\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setProjects: (projects: Array<ProjectType>) => ({\r\n        type: 'projects/SET_PROJECTS',\r\n        projects,\r\n        selectedProjectId: projects.length>0 ? projects[0].id : null\r\n    } as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'projects/SET_FETCHING', isFetching} as const),\r\n    setSelectedProjectId: (selectedProjectId: number) => ({type: 'projects/SET_SELECTED_PROJECT_ID', selectedProjectId} as const),\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const getProjects = (userIds: Array<number>): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.setFetching(true))\r\n        let projectIds: Array<ProjectToUserIdsMatch> = await projectsAPI.getProjectIdsByUserIds(userIds)\r\n        let projects: Array<ProjectType> = await projectsAPI.getProjectsByIds(projectIds.map((p) => p.projectId))\r\n        dispatch(actions.setProjects(projects))\r\n        dispatch(actions.setFetching(false))\r\n    }\r\n    catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка загрузки проектов'))\r\n    }\r\n}\r\n\r\nexport const setProjects = (projects: Array<ProjectType>): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setProjects(projects))\r\n}\r\n\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\nexport const setSelectedProjectId = (selectedProjectId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSelectedProjectId(selectedProjectId))\r\n}\r\n\r\nexport default projectsReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, projectsAPI, usersAPI} from \"../api/api\"\r\nimport {ProjectToUserIdsMatch, ProjectType, UserType} from \"../types/types\"\r\nimport {useSnackbar} from \"notistack\"\r\nimport {newError} from \"./appReducer\"\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    isFetching: false,\r\n    selectedUserId: null as number | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"users/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"users/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"users/SET_SELECTED_USER_ID\":\r\n            return {\r\n                ...state,\r\n                selectedUserId: action.selectedUserId\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setUsers: (users: Array<UserType>) => ({type: 'users/SET_USERS', users} as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'users/SET_FETCHING', isFetching} as const),\r\n    setSelectedUserId: (selectedUserId: number | null) => ({type: 'users/SET_SELECTED_USER_ID', selectedUserId} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const getUsers = (projectIds: Array<number>): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.setFetching(true))\r\n        let userIds: Array<ProjectToUserIdsMatch> = await usersAPI.getUserIdsByProjectIds(projectIds)\r\n        let users: Array<UserType> = await usersAPI.getUsersByIds(userIds.map((u) => u.userId))\r\n        dispatch(actions.setUsers(users))\r\n        dispatch(actions.setFetching(false))\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка загрузки команды пользователей'))\r\n    }\r\n\r\n}\r\n\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\nexport const setSelectedUserId = (selectedUserId: number | null): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSelectedUserId(selectedUserId))\r\n}\r\n\r\nexport default usersReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {AuthDataType, ProjectToUserIdsMatch, ProjectType, TaskType, UserType} from \"../types/types\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\n\r\nlet initialState = {\r\n    clientSideData: {\r\n        users: {\r\n            items: [] as Array<UserType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        authData: {\r\n            items: [] as Array<UserType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        projectsToUsers: {\r\n            items: [] as Array<ProjectToUserIdsMatch>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        projects: {\r\n            items: [] as Array<ProjectType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        tasks: {\r\n            items: [] as Array<TaskType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        }\r\n    }\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\ntype DataType = typeof initialState.clientSideData\r\ntype TableNamesTypes = keyof DataType\r\ntype ItemType = {id: number, [key: string]: any}\r\n\r\nconst clientSideApiReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_ID_TO_DELETED\":\r\n            return {\r\n                ...state,\r\n                clientSideData: {\r\n                    ...state.clientSideData,\r\n                    [action.tableName]: {\r\n                        ...state.clientSideData[action.tableName],\r\n                        deleted: [\r\n                            ...state.clientSideData[action.tableName].deleted,\r\n                            action.itemId\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n            case \"ADD_NEW_ITEM\":\r\n                return {\r\n                    ...state,\r\n                    clientSideData: {\r\n                        ...state.clientSideData,\r\n                        [action.tableName]: {\r\n                            ...state.clientSideData[action.tableName],\r\n                            items: [\r\n                                ...state.clientSideData[action.tableName].items,\r\n                                action.item\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n                case \"DELETE_ITEM\":\r\n                    return {\r\n                        ...state,\r\n                        clientSideData: {\r\n                            ...state.clientSideData,\r\n                            [action.tableName]: {\r\n                                ...state.clientSideData[action.tableName],\r\n                                items: [...state.clientSideData[action.tableName].items].filter(\r\n                                    (item: ItemType) => item.id !== action.itemId\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n        default: return state\r\n    }\r\n};\r\n\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    addIdToDeleted: (tableName: TableNamesTypes, itemId: number) => ({type: 'ADD_ID_TO_DELETED', tableName, itemId} as const),\r\n    addNewItem: (tableName: TableNamesTypes, item: ItemType) => ({type: 'ADD_NEW_ITEM', tableName, item} as const),\r\n    deleteItem: (tableName: TableNamesTypes, itemId: number) => ({type: 'DELETE_ITEM', tableName, itemId} as const)\r\n}\r\n\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nexport const addIdToDeleted = (tableName: TableNamesTypes, itemId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.addIdToDeleted(tableName, itemId));\r\n};\r\n\r\nexport const addNewItem = (tableName: TableNamesTypes, item: ItemType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.addNewItem(tableName, item));\r\n};\r\n\r\nexport const deleteItem = (tableName: TableNamesTypes, itemId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.deleteItem(tableName, itemId));\r\n};\r\n\r\n\r\n\r\nexport default clientSideApiReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, projectsAPI, tasksAPI, usersAPI} from \"../api/api\"\r\nimport {ProjectToUserIdsMatch, ProjectType, TaskFilterType, TaskSortType, TaskType, UserType} from \"../types/types\"\r\nimport {addIdToDeleted, addNewItem, deleteItem} from \"./clientSideApiReducer\"\r\nimport {newError} from \"./appReducer\"\r\n\r\nlet initialState = {\r\n    tasks: [] as Array<TaskType>,\r\n    isFetching: false,\r\n    filter: {\r\n        userIds: null as Array<number> | null,\r\n        status: null as boolean | null,\r\n        content: null as string | null,\r\n    } as TaskFilterType,\r\n    sort: {\r\n        firstCompleted: null as boolean | null,\r\n        firstNew: null as boolean | null\r\n    } as TaskSortType,\r\n    countOfShownTasks: 0,\r\n    idCounter: 1000\r\n};\r\ntype InitialStateType = typeof initialState\r\n\r\nconst tasksReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"tasks/SET_TASKS\":\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            }\r\n        case \"tasks/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"tasks/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: {\r\n                    ...state.filter,\r\n                    userIds: action.filter.userIds === undefined\r\n                        ? state.filter.userIds\r\n                        : action.filter.userIds === null\r\n                            ? null\r\n                            : state.filter.userIds\r\n                                ? [...state.filter.userIds, ...action.filter.userIds]\r\n                                : [...action.filter.userIds],\r\n                    status: action.filter.status === undefined\r\n                        ? state.filter.status\r\n                        : action.filter.status,\r\n                    content: action.filter.content === undefined\r\n                        ? state.filter.content\r\n                        : action.filter.content\r\n                }\r\n            }\r\n        case \"tasks/SET_SORT\":\r\n            return {\r\n                ...state,\r\n                sort: {\r\n                    ...state.sort,\r\n                    firstCompleted: action.sort.firstCompleted === undefined\r\n                        ? state.sort.firstCompleted\r\n                        : action.sort.firstCompleted,\r\n                    firstNew: action.sort.firstNew === undefined\r\n                        ? state.sort.firstNew\r\n                        : action.sort.firstNew\r\n                }\r\n            }\r\n        case \"tasks/SET_COUNT_OF_SHOWN_TASKS\":\r\n            return {\r\n                ...state,\r\n                countOfShownTasks: action.countOfShownTasks\r\n            }\r\n        case \"tasks/DELETE_TASK\":\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks.filter(t => t.id !== action.taskId)]\r\n            }\r\n        case \"tasks/CHANGE_TASK\": {\r\n            let changeTaskId = state.tasks.findIndex(t => t.id === action.taskId)\r\n            return changeTaskId === -1\r\n                ? state\r\n                : {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks.filter(t => t.id !== action.taskId),\r\n\r\n                    {\r\n                        ...state.tasks[changeTaskId],\r\n                        isDone: action.status,\r\n                        title: action.title\r\n                    }\r\n                ],\r\n            }\r\n\r\n        }\r\n        case \"tasks/NEW_TASK\":\r\n            return {\r\n                ...state,\r\n                /*tasks: [\r\n                    ...state.tasks,\r\n                    {\r\n                        id: action.task.id,\r\n                        project: action.task.project,\r\n                        author: action.task.author,\r\n                        date: action.task.date,\r\n                        title: action.task.title,\r\n                        isDone: action.task.isDone\r\n                    }\r\n                ],*/\r\n                idCounter: state.idCounter + 1\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setTasks: (tasks: Array<TaskType>) => ({type: 'tasks/SET_TASKS', tasks} as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'tasks/SET_FETCHING', isFetching} as const),\r\n    setFilter: (filter: TaskFilterType) => ({type: 'tasks/SET_FILTER', filter} as const),\r\n    setSort: (sort: TaskSortType) => ({type: 'tasks/SET_SORT', sort} as const),\r\n    setCountOfShownTasks: (countOfShownTasks: number) => ({\r\n        type: 'tasks/SET_COUNT_OF_SHOWN_TASKS',\r\n        countOfShownTasks\r\n    } as const),\r\n    changeTask: (taskId: number, status: boolean, title: string) => ({\r\n        type: 'tasks/CHANGE_TASK',\r\n        taskId,\r\n        status,\r\n        title\r\n    } as const),\r\n    deleteTask: (taskId: number) => ({type: 'tasks/DELETE_TASK', taskId} as const),\r\n    newTask: (task: TaskType) => ({\r\n        type: 'tasks/NEW_TASK', task\r\n    } as const),\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const getTasks = (\r\n    projectIds: Array<number> | null,\r\n    userIds: Array<number> | null\r\n): ThunkType => async (dispatch) => {\r\n    try {\r\n        let tasks = await tasksAPI.getTasksByProjectOrUserIds(projectIds, userIds)\r\n        dispatch(actions.setTasks(tasks))\r\n        dispatch(actions.setFilter({userIds: [], status: null, content: \"\"}))\r\n        dispatch(actions.setFetching(false))\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка загрузки задач'))\r\n    }\r\n}\r\n\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\nexport const setFilter = (filter: TaskFilterType, rewrite = false): ThunkType => async (dispatch) => {\r\n    if (rewrite) dispatch(actions.setFilter({\r\n        userIds: filter.userIds !== undefined ? null : undefined,\r\n        status: filter.status !== undefined ? null : undefined,\r\n        content: filter.content !== undefined ? null : undefined,\r\n    }))\r\n    dispatch(actions.setFilter(filter))\r\n}\r\n\r\nexport const setSort = (sort: TaskSortType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSort(sort))\r\n}\r\n\r\nexport const setCountOfShownTasks = (countOfShownTasks: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setCountOfShownTasks(countOfShownTasks))\r\n}\r\n\r\nexport const deleteTask = (taskId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        /*let response = await tasksAPI.deleteTask(taskId)*/\r\n        dispatch(actions.deleteTask(taskId))\r\n        await dispatch(addIdToDeleted('tasks', taskId))\r\n        await dispatch(deleteItem('tasks', taskId))\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка удаления задачи'))\r\n    }\r\n}\r\n\r\nexport const changeTask = (task: TaskType): ThunkType => async (dispatch) => {\r\n    try {\r\n        /*let response = await tasksAPI.changeTask(task.id, task.title, task.isDone)*/\r\n        dispatch(actions.changeTask(task.id, task.isDone, task.title))\r\n        await dispatch(addIdToDeleted('tasks', task.id))\r\n        await dispatch(deleteItem('tasks', task.id))\r\n        await dispatch(addNewItem('tasks', task))\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка изменения задачи'))\r\n    }\r\n}\r\n\r\nexport const newTask = (task: TaskType): ThunkType => async (dispatch) => {\r\n    try {\r\n        /*let response = await tasksAPI.addNewTask(task)*/\r\n        dispatch(actions.newTask(task))\r\n        await dispatch(addNewItem('tasks', task))\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка добавления задачи'))\r\n    }\r\n}\r\n\r\nexport default tasksReducer","import React, {useEffect} from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport ListMui from '@material-ui/core/List';\r\nimport ListItemMui from '@material-ui/core/ListItem';\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon';\r\nimport ListItemTextMui from '@material-ui/core/ListItemText';\r\nimport CollapseMui from '@material-ui/core/Collapse';\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore';\r\nimport AccountTreeIconMui from '@material-ui/icons/AccountTree';\r\nimport FolderIconMui from '@material-ui/icons/Folder';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {getProjects, setFetching, setProjects, setSelectedProjectId} from \"../../../redux/projectsReducer\"\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport {ProjectType, TaskFilterType, TaskSortType} from \"../../../types/types\"\r\nimport {setSelectedUserId} from \"../../../redux/usersReducer\"\r\nimport {actions, setFilter, setSort} from \"../../../redux/tasksReducer\"\r\nimport {useSnackbar} from \"notistack\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n    }),\r\n)\r\n\r\nconst Projects: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    /**Активируем каскад вертушек\r\n     * при начале инициализации*/\r\n    /*useEffect(() => {\r\n        props.initializationInProgress && props.setFetching(true)\r\n    }, [props.initializationInProgress, props.isAuth])*/\r\n\r\n    /**Получаем пользователей\r\n     * при изменении авторизованного ID*/\r\n    useEffect(() => {\r\n        props.myId!==null\r\n            ? props.getProjects([props.myId])\r\n            : props.setProjects([])\r\n    },[props.myId])\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const handleItemClick = (selectedProjectId: number) => {\r\n        props.setSelectedProjectId(selectedProjectId)\r\n        props.setFilter({userIds: null, status: null, content: null})\r\n        props.setSort({firstCompleted: null, firstNew: null})\r\n        props.setSelectedUserId(null)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ListItemMui button onClick={handleClick}>\r\n                <ListItemIconMui>\r\n                    <AccountTreeIconMui/>\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary=\"Проекты\"\r\n                    primaryTypographyProps={{variant: \"body1\"}}/>\r\n                {open ? <ExpandLessMui/> : <ExpandMoreMui/>}\r\n            </ListItemMui>\r\n            {props.isFetching && props.isAuth\r\n                ? <CircularProgress className={classes.progress}/>\r\n                : <CollapseMui in={open} timeout=\"auto\" unmountOnExit>\r\n                    {props.isAuth  && props.projects.map((item) => {\r\n                        return (\r\n                            <ListMui component=\"div\" disablePadding key={item.id}>\r\n                                <ListItemMui button className={classes.nested} onClick={() => handleItemClick(item.id)}>\r\n                                    <ListItemIconMui>\r\n                                        {\r\n                                            item.id === props.selectedProjectId\r\n                                                ? <FolderOpenIcon/>\r\n                                                : <FolderIconMui/>\r\n                                        }\r\n                                    </ListItemIconMui>\r\n                                    <ListItemTextMui primary={item.projectName}/>\r\n                                </ListItemMui>\r\n                            </ListMui>\r\n                        )\r\n                    })}\r\n                </CollapseMui>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.projects.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        projects: state.projects.projects,\r\n        myId: state.auth.id,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        /*initializationInProgress: state.app.initializationInProgress,*/\r\n        isInitialized: state.app.isInitialized\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    getProjects: (userIds: Array<number>) => void\r\n    /*setFetching: (isFetching: boolean) => void*/\r\n    setProjects: (projects: Array<ProjectType>) => void\r\n    setSelectedProjectId: (selectedProjectId: number) => void\r\n    setSelectedUserId: (selectedUserId: number | null) => void\r\n    setFilter: (filter: TaskFilterType) => void\r\n    setSort: (sort: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    getProjects,\r\n    /*setFetching,*/\r\n    setProjects,\r\n    setSelectedProjectId,\r\n    setSelectedUserId,\r\n    setFilter,\r\n    setSort\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Projects)","import React, {useEffect} from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ListMui from '@material-ui/core/List';\r\nimport ListItemMui from '@material-ui/core/ListItem';\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon';\r\nimport ListItemTextMui from '@material-ui/core/ListItemText';\r\nimport CollapseMui from '@material-ui/core/Collapse';\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore';\r\nimport PeopleIconMui from '@material-ui/icons/People';\r\nimport AccountCircleIconMui from '@material-ui/icons/AccountCircle';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\"\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {getUsers, setFetching, setSelectedUserId} from \"../../../redux/usersReducer\"\r\nimport FolderOpenIcon from \"@material-ui/core/SvgIcon/SvgIcon\"\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\r\nimport {TaskFilterType} from \"../../../types/types\"\r\nimport {setFilter} from \"../../../redux/tasksReducer\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n    }),\r\n)\r\n\r\nconst Users: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n    /**Активируем каскад вертушек\r\n     * при начале инициализации*/\r\n    useEffect(() => {\r\n        props.projectsIsFetching && props.setFetching(true)\r\n    }, [props.projectsIsFetching])\r\n\r\n    useEffect(() => {\r\n        props.selectedProjectId!==null && props.getUsers([props.selectedProjectId])\r\n    },[props.selectedProjectId])\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const handleItemClick = (selectedUserId: number) => {\r\n        props.setSelectedUserId(selectedUserId)\r\n        props.setFilter({userIds: [selectedUserId], status: undefined, content: undefined}, true)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ListItemMui button onClick={handleClick}>\r\n                <ListItemIconMui>\r\n                    <PeopleIconMui />\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary=\"Команда\"\r\n                    primaryTypographyProps={{variant: \"body1\"}}/>\r\n                {open ? <ExpandLessMui /> : <ExpandMoreMui />}\r\n            </ListItemMui>\r\n            {props.isFetching && props.isAuth\r\n                ? <CircularProgress className={classes.progress}/>\r\n                : <CollapseMui in={open} timeout=\"auto\" unmountOnExit>\r\n                    {props.isAuth && props.users.map((item) => {\r\n                        return (\r\n                            <ListMui component=\"div\" disablePadding key={item.id}>\r\n                                <ListItemMui button className={classes.nested} onClick={() => handleItemClick(item.id)}>\r\n                                    <ListItemIconMui>\r\n                                        {\r\n                                            item.id === props.selectedUserId\r\n                                                ? <PermIdentityIcon/>\r\n                                                : <PersonIcon/>\r\n                                        }\r\n                                    </ListItemIconMui>\r\n                                    <ListItemTextMui primary={\r\n                                        `${item.nickname} (${props.tasks.filter(t => t.author === item.id).length})`\r\n                                    }/>\r\n                                </ListItemMui>\r\n                            </ListMui>\r\n                        )\r\n                    })}\r\n                </CollapseMui>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.users.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        projectsIsFetching: state.projects.isFetching,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        users: state.users.users,\r\n        selectedUserId: state.users.selectedUserId,\r\n        tasks: state.tasks.tasks\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFetching: (isFetching: boolean) => void,\r\n    getUsers: (projectIds: Array<number>) => void,\r\n    setSelectedUserId: (selectedUserId: number) => void,\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFetching,\r\n    getUsers,\r\n    setSelectedUserId,\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Users)\r\n","import React from 'react'\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\r\nimport ListSubheaderMui from '@material-ui/core/ListSubheader'\r\nimport ListMui from '@material-ui/core/List'\r\nimport DividerMui from \"@material-ui/core/Divider/Divider\"\r\nimport Projects from \"./Projects/Projects\"\r\nimport Team from \"./Users/Users\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxWidth: 360,\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        /** Для отступа между блоками в меню*/\r\n        verticalSpacing: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: theme.spacing(2, 1),\r\n            justifyContent: 'flex-end',\r\n        },\r\n    }),\r\n)\r\n\r\nconst Menu: React.FC<any> = () => {    \r\n    \r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <ListMui\r\n            component=\"nav\"\r\n            aria-labelledby=\"nested-list-subheader\"\r\n            subheader={\r\n                <ListSubheaderMui component=\"div\" id=\"nested-list-subheader\">\r\n                    Меню\r\n                </ListSubheaderMui>\r\n            }\r\n            className={classes.root}\r\n        >\r\n            <DividerMui />\r\n            <Projects/>\r\n            <div className={classes.verticalSpacing} />\r\n            <Team/>\r\n            <DividerMui />\r\n        </ListMui>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport TypographyMui from '@material-ui/core/Typography'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport MenuMui from '@material-ui/core/Menu'\r\nimport AccountCircleIconMui from '@material-ui/icons/AccountCircle'\r\nimport MoreIconMui from '@material-ui/icons/MoreVert'\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {appInitializing} from \"../../redux/appReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport {Helmet} from \"react-helmet\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport {logout, showLoginForm} from \"../../redux/authReducer\"\r\nimport {Button} from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        title: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n        },\r\n        sectionDesktop: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'flex',\r\n            },\r\n        },\r\n        sectionMobile: {\r\n            display: 'flex',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n        typography__authorizedUserNickname: {\r\n            marginRight: theme.spacing(2),\r\n            alignSelf: 'center',\r\n        },\r\n    }),\r\n)\r\n\r\nconst AppBarContent: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n\r\n    const classes = useStyles()\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\r\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null)\r\n\r\n    const isMenuOpen = Boolean(anchorEl)\r\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl)\r\n\r\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget)\r\n    }\r\n\r\n    const handleMobileMenuClose = () => {\r\n        setMobileMoreAnchorEl(null)\r\n    }\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null)\r\n        handleMobileMenuClose()\r\n    }\r\n\r\n    const handleExit = () => {\r\n        handleMenuClose()\r\n        props.logout()\r\n    }\r\n\r\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setMobileMoreAnchorEl(event.currentTarget)\r\n    }\r\n\r\n    const handleLogin = () => {\r\n        props.showLoginForm(true)\r\n    }\r\n\r\n    const countOfShownTasks = props.isAuth ? props.countOfShownTasks : 0\r\n\r\n    const menuId = 'primary-search-account-menu'\r\n    const renderMenu = (\r\n        <MenuMui\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={menuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMenuOpen}\r\n            onClose={handleMenuClose}\r\n        >\r\n            <MenuItemMui onClick={handleExit}>Выйти</MenuItemMui>\r\n        </MenuMui>\r\n    )\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <MenuMui\r\n            anchorEl={mobileMoreAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileMenuClose}\r\n        >\r\n            {\r\n                !props.isAuth ? <MenuItemMui onClick={handleLogin}>Войти</MenuItemMui>\r\n                    : <MenuItemMui onClick={handleProfileMenuOpen}>\r\n                        <IconButtonMui\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"primary-search-account-menu\"\r\n                            aria-haspopup=\"true\"\r\n                            color=\"inherit\"\r\n                        >\r\n                            <AccountCircleIconMui/>\r\n                        </IconButtonMui>\r\n                        <p>{props.myNickname}</p>\r\n                    </MenuItemMui>\r\n            }\r\n        </MenuMui>\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <TypographyMui className={classes.title} variant=\"h6\" noWrap>\r\n                {`Менеджер задач (${countOfShownTasks})`}\r\n                <Helmet title={`(${countOfShownTasks}) Менеджер задач`}/>\r\n            </TypographyMui>\r\n            <div className={classes.grow}/>\r\n            {\r\n                !props.isAuth ? <div className={classes.sectionDesktop}>\r\n                        <Button color=\"inherit\" onClick={handleLogin}>Войти</Button>\r\n                    </div>\r\n                    : <div className={classes.sectionDesktop}>\r\n\r\n                        <TypographyMui className={classes.typography__authorizedUserNickname}\r\n                                       variant='body1'>{props.myNickname}</TypographyMui>\r\n                        <IconButtonMui\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls={menuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleProfileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <AccountCircleIconMui/>\r\n                        </IconButtonMui>\r\n                    </div>\r\n            }\r\n            <div className={classes.sectionMobile}>\r\n                <IconButtonMui\r\n                    aria-label=\"show more\"\r\n                    aria-controls={mobileMenuId}\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleMobileMenuOpen}\r\n                    color=\"inherit\"\r\n                >\r\n                    <MoreIconMui/>\r\n                </IconButtonMui>\r\n            </div>\r\n            {renderMobileMenu}\r\n            {renderMenu}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        countOfShownTasks: state.tasks.countOfShownTasks,\r\n        myNickname: state.auth.nickname,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    logout: () => void,\r\n    showLoginForm: (loginFormShown: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    logout,\r\n    showLoginForm\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppBarContent)","import React from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport FormControlMui from '@material-ui/core/FormControl'\r\nimport SelectMui from '@material-ui/core/Select'\r\nimport InputAdornmentMui from '@material-ui/core/InputAdornment'\r\nimport FilterListIconMui from '@material-ui/icons/FilterList'\r\nimport {Divider} from \"@material-ui/core\"\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {TaskFilterType, TaskSortType} from \"../../../types/types\"\r\nimport {setFilter, setSort} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n)\r\n\r\nconst CombinedFilter: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        switch (event.target.value) {\r\n            case 'CLOSE_FIRST':\r\n                props.setSort({firstCompleted: true, firstNew: false})\r\n                break\r\n            case 'OPEN_FIRST':\r\n                props.setSort({firstCompleted: false, firstNew: false})\r\n                break\r\n            case 'NEW_FIRST':\r\n                props.setSort({firstCompleted: null, firstNew: true})\r\n                break\r\n            case 'OLD_FIRST':\r\n                props.setSort({firstCompleted: null, firstNew: false})\r\n                break\r\n            default:\r\n                props.setSort({firstCompleted: null, firstNew: null})\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormControlMui className={classes.formControl}>\r\n                <SelectMui\r\n                    value={\r\n                        props.sort.firstCompleted !== null\r\n                            ? props.sort.firstCompleted === true\r\n                                ? 'CLOSE_FIRST'\r\n                                : 'OPEN_FIRST'\r\n                            : props.sort.firstNew !== null\r\n                                ? props.sort.firstNew === true\r\n                                    ? 'NEW_FIRST'\r\n                                    : 'OLD_FIRST'\r\n                                : ''\r\n                    }\r\n                    onChange={handleChange}\r\n                    displayEmpty\r\n                    className={classes.selectEmpty}\r\n                    inputProps={{ 'aria-label': 'Without label' }}\r\n                    startAdornment={\r\n                        <InputAdornmentMui position='start'>\r\n                            <FilterListIconMui />\r\n                        </InputAdornmentMui>\r\n                    }\r\n                >\r\n                    <MenuItemMui value=''>\r\n                        <em>Сортировка</em>\r\n                    </MenuItemMui>\r\n                    <Divider />\r\n                    <MenuItemMui value='NEW_FIRST'>От новых к старым</MenuItemMui>\r\n                    <MenuItemMui value='OLD_FIRST'>От старых к новым</MenuItemMui>\r\n                    <Divider />\r\n                    <MenuItemMui value='OPEN_FIRST'>Сначала незавершенные</MenuItemMui>\r\n                    <MenuItemMui value='CLOSE_FIRST'>Сначала завершенные</MenuItemMui>\r\n                </SelectMui>\r\n            </FormControlMui>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        sort: state.tasks.sort\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setSort: (filter: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setSort\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CombinedFilter)","import React from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport FormControlMui from '@material-ui/core/FormControl'\r\nimport SelectMui from '@material-ui/core/Select'\r\nimport InputAdornmentMui from '@material-ui/core/InputAdornment'\r\nimport SortIconMui from '@material-ui/icons/Sort'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {getTasks, setCountOfShownTasks, setFetching, setFilter} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport {TaskFilterType} from \"../../../types/types\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByStatusSort: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        let value = event.target.value\r\n        props.setFilter({\r\n            userIds: undefined,\r\n            status: value === 'OPEN' ? false\r\n                : value === 'CLOSE' ? true\r\n                    : null,\r\n            content: undefined})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormControlMui className={classes.formControl}>\r\n                <SelectMui\r\n                    value={\r\n                        props.filter.status === true ? 'CLOSE'\r\n                            :  props.filter.status === false ? 'OPEN'\r\n                                : ''\r\n                    }\r\n                    onChange={handleChange}\r\n                    displayEmpty\r\n                    className={classes.selectEmpty}\r\n                    inputProps={{ 'aria-label': 'Without label' }}\r\n                    startAdornment={\r\n                        <InputAdornmentMui position=\"start\">\r\n                            <SortIconMui />\r\n                        </InputAdornmentMui>\r\n                    }\r\n                >\r\n                    <MenuItemMui value=\"\">\r\n                        <em>По статусу</em>\r\n                    </MenuItemMui>\r\n                    <MenuItemMui value='OPEN'>Незавершенные</MenuItemMui>\r\n                    <MenuItemMui value='CLOSE'>Завершенные</MenuItemMui>\r\n                </SelectMui>\r\n            </FormControlMui>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        filter: state.tasks.filter\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByStatusSort)","import React, {ChangeEvent} from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport AutocompleteMui from '@material-ui/lab/Autocomplete'\r\nimport TextFieldMui from '@material-ui/core/TextField'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {TaskFilterType, UserType} from \"../../../types/types\"\r\nimport {setFilter} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: \"100%\",\r\n            '& > * + *': {\r\n                marginTop: theme.spacing(3),\r\n            },\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByUsersFilter: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    let filteredUsers = (() =>\r\n        {\r\n            if (props.filter.userIds) {\r\n                return props.filter.userIds.map( userId => {\r\n                    return props.users.filter( user => user.id === userId)[0]\r\n                })\r\n            } else return []\r\n        }\r\n    )()\r\n\r\n    const handleUsersChanged = (event: ChangeEvent<{}>, users: UserType[]) => {\r\n        let usersIds = users.map( user => user.id)\r\n        props.setFilter({userIds: usersIds, status: undefined, content: undefined}, true)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AutocompleteMui\r\n                onChange={handleUsersChanged}\r\n                disableClearable\r\n                multiple\r\n                id=\"tags-outlined\"\r\n                options={props.users}\r\n                getOptionLabel={(option) => option.nickname}\r\n                value={filteredUsers}\r\n                filterSelectedOptions\r\n                renderInput={(params) => (\r\n                    <TextFieldMui\r\n                        {...params}\r\n                        variant=\"standard\"\r\n                        label=\"\"\r\n                        placeholder=\"Авторы\"\r\n                    />\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.users.users,\r\n        filter: state.tasks.filter\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByUsersFilter)","import React, {ChangeEvent} from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport TextFieldMui from '@material-ui/core/TextField'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {ProjectType, TaskFilterType} from \"../../../types/types\"\r\nimport {getProjects, setFetching, setProjects, setSelectedProjectId} from \"../../../redux/projectsReducer\"\r\nimport {setSelectedUserId} from \"../../../redux/usersReducer\"\r\nimport {setFilter} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                margin: theme.spacing(1, 0),\r\n            },\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByContentFilter: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleContentChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        props.setFilter({userIds: undefined, status: undefined, content: e.currentTarget.value})\r\n    }\r\n\r\n    return (\r\n        <form style={{width: '100%'}} className={classes.root} noValidate autoComplete=\"off\"\r\n        >\r\n            <TextFieldMui\r\n                value={props.filter.content}\r\n                onChange={handleContentChange}\r\n                id=\"standard-basic\"\r\n                label=\"Искать по содержимому: \"\r\n                fullWidth\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        filter: state.tasks.filter\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByContentFilter)","import React from \"react\"\r\nimport ListItemMui from \"@material-ui/core/ListItem/ListItem\"\r\nimport ListItemSecondaryActionMui from \"@material-ui/core/ListItemSecondaryAction/ListItemSecondaryAction\"\r\nimport IconButtonMui from \"@material-ui/core/IconButton/IconButton\"\r\nimport BackspaceIconMui from '@material-ui/icons/Backspace'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {appInitializing} from \"../../../redux/appReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport {TaskFilterType, TaskSortType} from \"../../../types/types\"\r\nimport {setFilter, setSort} from \"../../../redux/tasksReducer\"\r\n\r\ntype OwnProps = {\r\n    children: React.ReactElement | React.ReactElement[]\r\n    rowNumber: number\r\n}\r\n\r\nconst FilterRow: React.FC<OwnProps & MapDispatchProps> = (props) => {\r\n\r\n    const handleClearFiltersInRow = () => {\r\n        switch (props.rowNumber) {\r\n            case 1:\r\n                props.setSort({firstCompleted: null, firstNew: null})\r\n                props.setFilter({userIds: undefined, status: null, content: undefined})\r\n                break\r\n            case 2:\r\n                props.setFilter({userIds: null, status: undefined, content: undefined})\r\n                break\r\n            case 3:\r\n                props.setFilter({userIds: undefined, status: undefined, content: null})\r\n                break\r\n            default: break\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ListItemMui >\r\n            {props.children}\r\n            <ListItemSecondaryActionMui>\r\n                <IconButtonMui onClick={handleClearFiltersInRow} edge=\"end\" aria-label=\"delete\">\r\n                    <BackspaceIconMui/>\r\n                </IconButtonMui>\r\n            </ListItemSecondaryActionMui>\r\n        </ListItemMui>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType) => void\r\n    setSort: (sort: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter,\r\n    setSort\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterRow)","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemSecondaryActionMui from '@material-ui/core/ListItemSecondaryAction'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport BackspaceIconMui from '@material-ui/icons/Backspace'\r\nimport CombinedFilter from \"./CombinedFilter/CombinedFilter\"\r\nimport ByStatusSort from \"./ByStatusSort/ByStatusSort\"\r\nimport ByUsersFilter from \"./ByUsersFilter/ByUsersFilter\"\r\nimport ByContentFilter from \"./ByContentFilter/ByContentFilter\"\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {appInitializing} from \"../../redux/appReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport FilterRow from \"./FilterRow/FilterRow\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nconst Filter: React.FC<any> = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ListMui disablePadding>\r\n                <FilterRow rowNumber={1}>\r\n                        <CombinedFilter/>\r\n                        <ByStatusSort/>\r\n                </FilterRow>\r\n                <FilterRow rowNumber={2}><ByUsersFilter/></FilterRow>\r\n                <FilterRow rowNumber={3}><ByContentFilter/></FilterRow>\r\n            </ListMui>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Filter\r\n","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport CollapseMui from '@material-ui/core/Collapse'\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess'\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore'\r\nimport SearchIconMui from '@material-ui/icons/Search'\r\nimport Filter from \"./Filter\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        /*nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },*/\r\n    }),\r\n)\r\n\r\nconst FilterWrapper: React.FC<any> = () => {\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItemMui button onClick={handleClick}>\r\n                <ListItemIconMui>\r\n                    <SearchIconMui/>\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary=\"Поиск задач\"\r\n                    primaryTypographyProps={{variant: \"body1\"}}/>\r\n                {open ? <ExpandLessMui/> : <ExpandMoreMui/>}\r\n            </ListItemMui>\r\n            <CollapseMui in={open} timeout=\"auto\" unmountOnExit>\r\n                <ListMui component=\"div\" disablePadding>\r\n                    <Filter/>\r\n                </ListMui>\r\n            </CollapseMui>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FilterWrapper","import React from \"react\"\r\n\r\nconst getBreakedString = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    let value = e.currentTarget.value\r\n    let start = e.currentTarget.selectionStart\r\n    let end = e.currentTarget.selectionEnd\r\n\r\n    e.currentTarget.value =\r\n        value.slice(0, start !== null ? start : undefined) + '\\n' +\r\n        value.slice(end !== null ? end : undefined, value.length-1)\r\n\r\n    e.currentTarget.selectionStart = start ? start + 1 : value.length - 1\r\n    e.currentTarget.selectionEnd = start ? start + 1 : value.length - 1\r\n\r\n    return e\r\n}\r\n\r\nexport const keyDownOnTextarea = (\r\n    handleSubmit: () => void,\r\n    handleChange: (e: React.KeyboardEvent<HTMLInputElement>) => void,\r\n    userAgent: string\r\n) => (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter' && !e.ctrlKey) {\r\n        if (/Windows NT/.test(userAgent)) {\r\n            handleSubmit()\r\n            e.preventDefault()\r\n        }\r\n    } else if (e.key === 'Enter' && e.ctrlKey) {\r\n        handleChange(getBreakedString(e))\r\n    }\r\n}","import React from 'react'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon'\r\nimport ListItemSecondaryActionMui from '@material-ui/core/ListItemSecondaryAction'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport CheckboxMui from '@material-ui/core/Checkbox'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport DeleteOutlineIconMui from '@material-ui/icons/DeleteOutline'\r\nimport {connect} from \"react-redux\"\r\nimport {TaskType, UserType} from \"../../../types/types\"\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {changeTask, deleteTask} from \"../../../redux/tasksReducer\"\r\nimport {Form, Formik} from \"formik\"\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\"\r\nimport InputBase from \"@material-ui/core/InputBase\"\r\nimport {keyDownOnTextarea} from \"../../../utils/breakLineForTextarea\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        checkbox_cursor_default: {\r\n            cursor: 'default',\r\n        },\r\n    }),\r\n)\r\n\r\ntype OwnType = {\r\n    task: TaskType\r\n}\r\n\r\nconst Task: React.FC<MapStatePropsType & MapDispatchProps & OwnType> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    console.log('task render')\r\n\r\n    const userById = (users: Array<UserType>, authorId: number): UserType => {\r\n        let filteredUsers = users.filter(u => u.id === authorId)\r\n        return filteredUsers[0]\r\n    }\r\n\r\n    /*const taskById = (tasks: Array<TaskType>, taskId: number): TaskType => {\r\n        let filteredTasks = tasks.filter(t => t.id === taskId)\r\n        return filteredTasks[0]\r\n    }*/\r\n\r\n    const task: TaskType = props.task\r\n\r\n    const labelId = `checkbox-list-label-${task.id}`;\r\n    const date = new Date(task.date)\r\n    const dateStr = `${\r\n        date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\r\n    }.${\r\n        date.getMonth() < 9 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\r\n    }.${\r\n        date.getFullYear()\r\n    } ${\r\n        date.getHours() < 10 ? `0${date.getHours()}` : date.getHours()\r\n    }:${\r\n        date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes()\r\n    }`\r\n\r\n    const handleChangeStatus = () => {\r\n        task.author === props.myId && props.changeTask({...task, isDone: !task.isDone, title: task.title})\r\n    }\r\n\r\n    const handleChangeTitle = (title: string) => {\r\n        task.author === props.myId && props.changeTask({...task, isDone: task.isDone, title})\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        props.deleteTask(task.id)\r\n    }\r\n\r\n    return (\r\n        <ListItemMui role={undefined}>\r\n            <ListItemIconMui\r\n                onChange={handleChangeStatus}\r\n            >\r\n                <CheckboxMui\r\n                    className={task.author !== props.myId ? classes.checkbox_cursor_default : ''}\r\n                    edge=\"start\"\r\n                    checked={task.isDone}\r\n                    tabIndex={-1}\r\n                    disableRipple\r\n                    inputProps={{'aria-labelledby': labelId}}\r\n                    color={task.author === props.myId ? 'secondary' : 'primary'}\r\n                />\r\n            </ListItemIconMui>\r\n            <ListItemTextMui id={labelId}\r\n                             primary={\r\n                                 task.author === props.myId\r\n                                     ? (\r\n                                         <Formik\r\n                                             initialValues={{\r\n                                                 title: task.title,\r\n                                             }}\r\n                                             onSubmit={(values, {setSubmitting}) => {\r\n                                                 setTimeout(() => {\r\n                                                     handleChangeTitle(values.title)\r\n                                                     setSubmitting(false)\r\n                                                 }, 0)\r\n                                             }}\r\n                                         >\r\n                                             {({\r\n                                                   values,\r\n                                                   handleChange,\r\n                                                   handleSubmit,\r\n                                               }) => {\r\n                                                 return (\r\n                                                     <Form onSubmit={handleSubmit}>\r\n                                                         <InputBase\r\n                                                             name=\"title\"\r\n                                                             type=\"title\"\r\n                                                             id=\"title\"\r\n                                                             fullWidth\r\n                                                             multiline\r\n                                                             value={values.title}\r\n                                                             onChange={handleChange}\r\n                                                             onBlur={()=>{handleSubmit()}}\r\n                                                             onKeyDown={keyDownOnTextarea(handleSubmit, handleChange, navigator.userAgent)}\r\n                                                         />\r\n                                                     </Form>\r\n                                                 )\r\n                                             }}\r\n                                         </Formik>\r\n                                     )\r\n                                     : task.title\r\n                             }\r\n                             secondary={`${dateStr} - ${userById(props.users, task.author) && userById(props.users, task.author).nickname}`}\r\n            />\r\n            {task.author === props.myId && (\r\n                <ListItemSecondaryActionMui>\r\n                    <IconButtonMui\r\n                        onClick={handleDelete}\r\n                        edge=\"end\" aria-label=\"comments\">\r\n                        <DeleteOutlineIconMui/>\r\n                    </IconButtonMui>\r\n                </ListItemSecondaryActionMui>\r\n            )}\r\n        </ListItemMui>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.users.users,\r\n        myId: state.auth.id,\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    deleteTask: (taskId: number) => void\r\n    changeTask: (task: TaskType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    deleteTask,\r\n    changeTask\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)","import React from 'react'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemSecondaryActionMui from '@material-ui/core/ListItemSecondaryAction'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport {connect} from \"react-redux\"\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport {createStyles, TextField, Theme} from \"@material-ui/core\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport {Form, Formik} from \"formik\"\r\nimport InputBase from \"@material-ui/core/InputBase/InputBase\"\r\nimport FormControl from \"@material-ui/core/FormControl\"\r\nimport InputLabel from \"@material-ui/core/InputLabel\"\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\"\r\nimport {newTask} from \"../../../redux/tasksReducer\"\r\nimport {TaskType} from \"../../../types/types\"\r\nimport {keyDownOnTextarea} from \"../../../utils/breakLineForTextarea\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        textFieldWrapper_marginRight_20px: {\r\n            marginRight: '20px',\r\n        },\r\n    }),\r\n)\r\n\r\ntype OwnType = {}\r\n\r\nconst NewTask: React.FC<MapStatePropsType & MapDispatchProps & OwnType> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleNewTask = (\r\n        id: number,\r\n        project: number,\r\n        author: number,\r\n        date: number,\r\n        title: string,\r\n        isDone: boolean\r\n    ) => {\r\n        props.newTask({id, project, author, date, title, isDone})\r\n    }\r\n\r\n    return (\r\n\r\n        <Formik\r\n            initialValues={{\r\n                title: ''\r\n            }}\r\n            onSubmit={(values, {setSubmitting}) => {\r\n                setTimeout(() => {\r\n                    props.selectedProjectId !== null && props.myId !== null && handleNewTask(\r\n                        props.idCounter,\r\n                        props.selectedProjectId,\r\n                        props.myId,\r\n                        Date.now(),\r\n                        values.title,\r\n                        false\r\n                    )\r\n                    values.title=''\r\n                    setSubmitting(false)\r\n                }, 0)\r\n            }}\r\n        >\r\n            {({values, handleChange, handleSubmit}) => {\r\n                return (\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <ListItemMui role={undefined}>\r\n                            <ListItemTextMui primary={\r\n                                <div className={classes.textFieldWrapper_marginRight_20px}>\r\n                                    <FormControl variant=\"outlined\" fullWidth>\r\n                                        <OutlinedInput\r\n                                            name=\"title\"\r\n                                            type=\"title\"\r\n                                            id=\"title\"\r\n                                            multiline\r\n                                            placeholder='Новая задача...'\r\n                                            value={values.title}\r\n                                            onChange={handleChange}\r\n                                            onKeyDown={keyDownOnTextarea(handleSubmit, handleChange, navigator.userAgent)}\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                            }\r\n                            />\r\n                            <ListItemSecondaryActionMui>\r\n                                <IconButtonMui\r\n                                    onClick={() => {\r\n                                        handleSubmit()\r\n                                    }}\r\n                                    edge=\"end\"\r\n                                    aria-label=\"comments\"\r\n                                >\r\n                                    <AddCircleIcon fontSize='large'/>\r\n                                </IconButtonMui>\r\n                            </ListItemSecondaryActionMui>\r\n                        </ListItemMui>\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        idCounter: state.tasks.idCounter,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        myId: state.auth.id\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    newTask: (task: TaskType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    newTask\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewTask)","import React, {useEffect, useMemo} from 'react'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ContainerMui from \"@material-ui/core/Container\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\"\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {getTasks, setCountOfShownTasks, setFetching} from \"../../redux/tasksReducer\"\r\nimport {TaskType} from \"../../types/types\"\r\nimport {filterByDate, filterByStatus} from \"../../utils/tasksFilters\"\r\nimport Task from \"./Task/Task\"\r\nimport {setSelectedProjectId} from \"../../redux/projectsReducer\"\r\nimport NewTask from \"./NewTask/NewTask\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxWidth: 600,\r\n            backgroundColor: theme.palette.background.paper,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n        itemSecondaryText: {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n        },\r\n    }),\r\n)\r\n\r\nconst TasksList: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.usersIsFetching\r\n            ? props.setFetching(true)\r\n            : props.selectedProjectId !== null && props.getTasks([props.selectedProjectId], null)\r\n    }, [props.usersIsFetching])\r\n\r\n    const classes = useStyles();\r\n\r\n    let tasksWithClientSideData = props.tasks.filter(\r\n        t => !props.tasksOnClient.deleted.filter(\r\n            item => item === t.id\r\n        ).length\r\n    ).concat(props.tasksOnClient.items.filter(item => item.project === props.selectedProjectId))\r\n\r\n    let filteredTasks = tasksWithClientSideData.filter((t) => {\r\n        let statusFilter = props.filter.status !== null ? t.isDone === props.filter.status : true\r\n        let usersFilter = props.filter.userIds && props.filter.userIds.length > 0 ? props.filter.userIds.filter(id => id === t.author).length > 0 : true\r\n        let contentFilter = props.filter.content ? t.title.match(new RegExp(props.filter.content, 'gi')) : true\r\n        return statusFilter && usersFilter && contentFilter\r\n    })\r\n\r\n    filteredTasks = filteredTasks.sort((a: TaskType, b: TaskType): number => {\r\n        let sortResultByStatus = filterByStatus(a, b, props.sort.firstCompleted)\r\n        let sortResultByDate = filterByDate(a, b, props.sort.firstNew)\r\n\r\n        if (sortResultByStatus !== 0) return sortResultByStatus\r\n        else return sortResultByDate\r\n    })\r\n\r\n    useEffect(()=>{\r\n        props.setCountOfShownTasks(filteredTasks.length)\r\n    },[filteredTasks])\r\n\r\n    return (\r\n        <ContainerMui maxWidth={\"sm\"}>\r\n            <ListMui className={classes.root}>\r\n                {\r\n                    props.isFetching && props.isAuth\r\n                        ? <CircularProgress className={classes.progress} size={50}/>\r\n                        : props.isAuth && (\r\n                            <div>\r\n                                {filteredTasks.map(item => <Task key={item.id} task={item}/>)}\r\n                                <NewTask/>\r\n                            </div>\r\n                    )\r\n                }\r\n            </ListMui>\r\n        </ContainerMui>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.tasks.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        usersIsFetching: state.users.isFetching,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        tasks: state.tasks.tasks,\r\n        filter: state.tasks.filter,\r\n        sort: state.tasks.sort,\r\n        tasksOnClient: state.clientSideDb.clientSideData.tasks\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFetching: (isFetching: boolean) => void,\r\n    getTasks: (projectIds: Array<number> | null, userIds: Array<number> | null) => void\r\n    setCountOfShownTasks: (countOfShownTasks: number) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFetching,\r\n    getTasks,\r\n    setCountOfShownTasks\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksList)","import {TaskType} from \"../types/types\"\r\n\r\nexport const filterByStatus = (a: TaskType, b: TaskType, firstCompleted: boolean | null | undefined) => {\r\n    if (firstCompleted !== null) {\r\n        if (firstCompleted === true) {\r\n            if (a.isDone === b.isDone) return 0\r\n            else if (a.isDone > b.isDone) return -1\r\n            else return 1\r\n        }\r\n        else {\r\n            if (a.isDone === b.isDone) return 0\r\n            else if (a.isDone < b.isDone) return -1\r\n            else return 1\r\n        }\r\n    } else return 0\r\n}\r\n\r\nexport const filterByDate = (a: TaskType, b: TaskType, firstNew: boolean | null | undefined) => {\r\n    const dateDiff = a.date - b.date\r\n    if (firstNew === true || null) return dateDiff * -1\r\n    else return dateDiff\r\n}","import React from 'react';\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {login, setLoginErrorMessage, showLoginForm} from \"../../redux/authReducer\"\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport {Formik, Form} from 'formik';\r\nimport {Button} from '@material-ui/core';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport {Typography} from \"@material-ui/core\"\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport {isEmail} from \"../../validators/validators\"\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\"\r\nimport FormControl from \"@material-ui/core/FormControl\"\r\nimport InputLabel from \"@material-ui/core/InputLabel\"\r\nimport Input from \"@material-ui/core/Input\"\r\n\r\ntype Values = {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\nconst LoginForm: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const handleClose = () => {\r\n        props.showLoginForm(false)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={true} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <Formik\r\n                    initialValues={{\r\n                        email: '',\r\n                        password: '',\r\n                    }}\r\n                    validate={values => {\r\n                        debugger\r\n                        const errors: Partial<Values> = {}\r\n\r\n                        if (!values.email) errors.email = 'Обязательно для заполнения'\r\n                        else if (!isEmail(values.email)) errors.email = 'Неправильный формат адреса'\r\n\r\n                        if (!values.password) errors.password = 'Обязательно для заполнения'\r\n\r\n                        return errors;\r\n                    }}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        setTimeout(async () => {\r\n                            props.setLoginErrorMessage(null)\r\n                            await props.login(values.email, values.password)\r\n                            setSubmitting(false);\r\n                        }, 0);\r\n                    }}\r\n                >\r\n                    {({values, errors, touched, handleChange, handleBlur, handleSubmit,\r\n                          isSubmitting,}) => (\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <DialogTitle id=\"form-dialog-title\">Авторизация</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    <Typography variant='caption'>\r\n                                        test user data. email: 'testuser@email.com' password: 'testuser_pass'\r\n                                    </Typography>\r\n                                </DialogContentText>\r\n                                <FormControl fullWidth error={!!errors.email && touched.email}>\r\n                                    <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                                    <Input\r\n                                        name=\"email\"\r\n                                        type=\"email\"\r\n                                        id=\"email\"\r\n                                        value={values.email}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                    {<FormHelperText id=\"email-error\">{errors.email && touched.email && errors.email}</FormHelperText>}\r\n                                </FormControl>\r\n                                <br/>\r\n                                <FormControl fullWidth error={!!errors.password && touched.password}>\r\n                                    <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n                                    <Input\r\n                                        name=\"password\"\r\n                                        type=\"password\"\r\n                                        id=\"password\"\r\n                                        value={values.password}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                    {<FormHelperText id=\"password-error\">{errors.email && touched.email && errors.email}</FormHelperText>}\r\n                                </FormControl>\r\n                            </DialogContent>\r\n                            {\r\n                                props.loginErrorMessage && <DialogContent>\r\n                                    <FormHelperText id=\"my-helper-text\" error={true}>\r\n                                        {props.loginErrorMessage}\r\n                                    </FormHelperText>\r\n                                </DialogContent>\r\n                            }\r\n                            <DialogActions>\r\n                                <Button\r\n                                    onClick={()=>handleSubmit()}\r\n                                    color=\"primary\"\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                    Войти\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={handleClose}\r\n                                    color=\"primary\"\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                    Отмена\r\n                                </Button>\r\n                            </ DialogActions>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        loginErrorMessage: state.auth.loginErrorMessage\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    showLoginForm: (loginFormShown: boolean) => void\r\n    login: (email: string, password: string) => void\r\n    setLoginErrorMessage: (loginErrorMessage: string | null) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    showLoginForm,\r\n    login,\r\n    setLoginErrorMessage\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm)","export const isEmail = (value: string): string =>\r\n    /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Неправильный формат адреса' : ''","import './App.css'\r\nimport React, {useEffect} from 'react'\r\nimport {AppStateType} from \"./redux/store\"\r\nimport {makeStyles, useTheme, Theme, createStyles} from '@material-ui/core/styles'\r\nimport AppBarMui from '@material-ui/core/AppBar'\r\nimport CssBaselineMui from '@material-ui/core/CssBaseline'\r\nimport DividerMui from '@material-ui/core/Divider'\r\nimport DrawerMui from '@material-ui/core/Drawer'\r\nimport HiddenMui from '@material-ui/core/Hidden'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport ToolbarMui from '@material-ui/core/Toolbar'\r\nimport MenuIconMui from '@material-ui/icons/Menu'\r\nimport Menu from \"./components/Menu/Menu\"\r\nimport AppBarContent from \"./components/AppBarContent/AppBarContent\"\r\nimport FilterWrapper from \"./components/FilterData/FilterWrapper\"\r\nimport TasksList from \"./components/TasksList/TasksList\"\r\nimport {connect} from \"react-redux\"\r\nimport {CircularProgress} from \"@material-ui/core\"\r\nimport Backdrop from \"@material-ui/core/Backdrop\"\r\nimport {appInitializing} from \"./redux/appReducer\"\r\nimport LoginForm from \"./components/LoginForm/LoginForm\"\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\"\r\nimport Snackbar from \"@material-ui/core/Snackbar\"\r\nimport {Alert} from \"@material-ui/lab\"\r\nimport {useSnackbar, VariantType} from \"notistack\"\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        drawer: {\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: drawerWidth,\r\n                flexShrink: 0,\r\n            },\r\n        },\r\n        appBar: {\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: `calc(100% - ${drawerWidth}px)`,\r\n                marginLeft: drawerWidth,\r\n            },\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n        toolbar: theme.mixins.toolbar,\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(3),\r\n        },\r\n        backdrop: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            color: '#fff',\r\n        },\r\n    }),\r\n);\r\n\r\nconst App: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    useEffect( () => {\r\n        props.appInitializing()\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        let variant: VariantType = \"error\"\r\n        props.errors.length > 0 && enqueueSnackbar(props.errors[props.errors.length-1], {variant})\r\n    }, [props.errors])\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false)\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n    const drawer = (\r\n        <div>\r\n            <div className={classes.toolbar}/>\r\n            <DividerMui/>\r\n            <Menu/>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Backdrop className={classes.backdrop} open={!props.isInitialized}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n            {\r\n                props.loginFormShown && <LoginForm/>\r\n            }\r\n            <CssBaselineMui/>\r\n            <AppBarMui position=\"fixed\" className={classes.appBar}>\r\n                <ToolbarMui>\r\n                    <IconButtonMui\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIconMui/>\r\n                    </IconButtonMui>\r\n                    <AppBarContent/>\r\n                </ToolbarMui>\r\n            </AppBarMui>\r\n            <nav className={classes.drawer} aria-label=\"menu folders\">\r\n                <HiddenMui smUp implementation=\"css\">\r\n                    <DrawerMui\r\n                        variant=\"temporary\"\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true,\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </DrawerMui>\r\n                </HiddenMui>\r\n                <HiddenMui xsDown implementation=\"css\">\r\n                    <DrawerMui\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </DrawerMui>\r\n                </HiddenMui>\r\n            </nav>\r\n            {\r\n                props.isAuth && <main className={classes.content}>\r\n                    <div className={classes.toolbar}/>\r\n                    <FilterWrapper/>\r\n                    <TasksList/>\r\n                </main>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isInitialized: state.app.isInitialized,\r\n        isAuth: state.auth.isAuth,\r\n        loginFormShown: state.auth.loginFormShown,\r\n        errors: state.app.errors\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    appInitializing: () => void\r\n}\r\nconst mapDispatchToProps = {\r\n    appInitializing\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport clientSideApiReducer from \"./clientSideApiReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport projectsReducer from \"./projectsReducer\"\r\nimport usersReducer from \"./usersReducer\"\r\nimport tasksReducer from \"./tasksReducer\"\r\nimport appReducer from \"./appReducer\"\r\n\r\nlet rootReducer = combineReducers({\r\n    api: clientSideApiReducer,\r\n    auth: authReducer,\r\n    projects: projectsReducer,\r\n    users: usersReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    clientSideDb: clientSideApiReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype UnionTypeFromObj<T> = T extends {[key: string]: infer R} ? R : never\r\nexport type ActionsTypes<T extends {[key: string]: (...args: any[]) => any}> = ReturnType<UnionTypeFromObj<T>>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n/*let store = createStore(rootReducer, applyMiddleware(thunkMiddleware));*/\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\"\r\nimport store from \"./redux/store\"\r\nimport {SnackbarProvider} from \"notistack\"\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <SnackbarProvider maxSnack={3}>\r\n                <App/>\r\n            </SnackbarProvider>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}