{"version":3,"sources":["utils/arrayToStringArguments.ts","api/api.ts","redux/clientSideApiReducer.ts","exceptions/exceptions.ts","redux/authReducer.ts","redux/projectsReducer.ts","redux/usersReducer.ts","redux/tasksReducer.ts","redux/appReducer.ts","redux/store.ts","utils/universalCounter.ts","components/Menu/Projects/Projects.tsx","components/Menu/Users/Users.tsx","components/Menu/Menu.tsx","components/AppBarContent/AppBarContent.tsx","components/FilterData/CombinedFilter/CombinedFilter.tsx","components/FilterData/ByStatusSort/ByStatusSort.tsx","components/FilterData/ByUsersFilter/ByUsersFilter.tsx","components/FilterData/ByContentFilter/ByContentFilter.tsx","components/FilterData/FilterRow/FilterRow.tsx","components/FilterData/Filter.tsx","components/FilterData/FilterWrapper.tsx","components/TasksList/Task/Task.tsx","components/TasksList/TasksList.tsx","utils/tasksFilters.ts","components/LoginForm/LoginForm.tsx","validators/validators.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["arrayToStringArguments","argName","argArray","map","arg","toString","replace","instance","axios","create","withCredentials","baseURL","headers","authAPI","auth","email","password","get","then","response","data","usersAPI","getUsersByIds","setOfUserIds","length","getUserIdsByProjectIds","setOfProjectIds","addNewUser","console","error","changeUser","deleteUser","projectsAPI","getProjectsByIds","getProjectIdsByUserIds","addNewProject","changeProject","deleteProject","tasksAPI","getTasksByProjectOrUserIds","addNewTask","task","post","changeTask","taskId","title","isDone","patch","deleteTask","delete","initialState","clientSideData","users","items","deleted","authData","projectsToUsers","projects","tasks","actions","tableName","itemId","type","addIdToDeleted","dispatch","a","clientSideApiReducer","state","action","item","filter","id","AuthorizationFailedException","message","this","nickname","isAuth","loginFormShown","loginErrorMessage","login","extraData","Cookies","set","logout","remove","showLoginForm","isFetching","selectedProjectId","getProjects","userIds","projectIds","p","projectId","alert","projectsReducer","selectedUserId","getUsers","u","userId","setSelectedUserId","usersReducer","status","content","sort","firstCompleted","firstNew","countOfShownTasks","getTasks","setFilter","rewrite","undefined","setSort","tasksReducer","t","changeTaskId","findIndex","isInitialized","appReducer","rootReducer","combineReducers","api","authReducer","app","clientSideDb","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","_universalCounter","getCounter","counter","useStyles","makeStyles","theme","createStyles","root","display","flexDirection","progress","alignSelf","margin","spacing","nested","paddingLeft","mapDispatchToProps","setProjects","setSelectedProjectId","connect","myId","props","useEffect","classes","React","useState","open","setOpen","className","ListItem","button","onClick","ListItemIcon","ListItemText","primary","primaryTypographyProps","variant","CircularProgress","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","key","projectName","setFetching","projectsIsFetching","author","width","maxWidth","backgroundColor","palette","background","paper","verticalSpacing","alignItems","padding","justifyContent","Menu","aria-labelledby","subheader","ListSubheader","grow","flexGrow","breakpoints","up","sectionDesktop","sectionMobile","typography__authorizedUserNickname","marginRight","myNickname","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleProfileMenuOpen","event","currentTarget","handleMobileMenuClose","handleMenuClose","handleLogin","menuId","renderMenu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","renderMobileMenu","IconButton","aria-label","aria-controls","aria-haspopup","color","Typography","noWrap","Helmet","edge","Button","formControl","minWidth","selectEmpty","marginTop","FormControl","Select","value","onChange","target","displayEmpty","inputProps","startAdornment","InputAdornment","position","Divider","filteredUsers","user","Autocomplete","usersIds","disableClearable","multiple","options","getOptionLabel","option","filterSelectedOptions","renderInput","params","TextField","label","placeholder","style","noValidate","autoComplete","e","fullWidth","children","rowNumber","Filter","FilterWrapper","userById","authorId","labelId","date","Date","dateStr","getDate","getMonth","getFullYear","getHours","getMinutes","role","Checkbox","checked","tabIndex","disableRipple","secondary","itemSecondaryText","setCountOfShownTasks","usersIsFetching","tasksOnClient","filteredTasks","statusFilter","usersFilter","contentFilter","match","RegExp","b","sortResultByStatus","filterByStatus","sortResultByDate","dateDiff","parseInt","filterByDate","Container","size","setLoginErrorMessage","handleClose","Dialog","initialValues","validate","values","errors","test","onSubmit","setSubmitting","setTimeout","submitForm","isSubmitting","DialogTitle","DialogContent","DialogContentText","name","autoFocus","FormHelperText","DialogActions","disabled","drawer","flexShrink","appBar","marginLeft","menuButton","toolbar","mixins","drawerPaper","backdrop","zIndex","appInitializing","log","Api","thunk","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","Backdrop","CssBaseline","AppBar","Toolbar","Hidden","smUp","implementation","Drawer","anchor","direction","ModalProps","xsDown","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7457e96c.chunk.js","sourcesContent":["const arrayToStringArguments = (argName: string, argArray: Array<number | string> | null) =>\r\n    argArray\r\n        ? argArray.map((arg) => `${argName}=${arg}&`).toString().replace(/,/g,'')\r\n        : \"\"\r\n\r\nexport default arrayToStringArguments","import axios from 'axios'\r\nimport {\r\n    AuthDataType,\r\n    ProjectToUserIdsMatch,\r\n    ProjectType,\r\n    TaskType, UserType\r\n} from \"../types/types\"\r\nimport arrayToStringArguments from \"../utils/arrayToStringArguments\"\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://my-json-server.typicode.com/genekomarov/task-manager_mui',\r\n    headers: {}\r\n})\r\n\r\nexport const authAPI = {\r\n    auth: (email: string, password: string) => {\r\n        return instance.get<Array<AuthDataType>>(`/authData?email=${email}&password=${password}`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsersByIds: (setOfUserIds: Array<number>) =>\r\n        setOfUserIds.length\r\n            ? instance.get<Array<UserType>>(`/users?${arrayToStringArguments(\"id\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    getUserIdsByProjectIds: (setOfProjectIds: Array<number>) =>\r\n        setOfProjectIds.length\r\n            ? instance.get<Array<ProjectToUserIdsMatch>>(\r\n                `/projects-to-users?${arrayToStringArguments(\"projectId\", setOfProjectIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n\r\n    addNewUser: () => console.error(\"method 'addNewUser' is not implemented\"),\r\n    changeUser: () => console.error(\"method 'changeUser' is not implemented\"),\r\n    deleteUser: () => console.error(\"method 'deleteUser' is not implemented\")\r\n}\r\n\r\nexport const projectsAPI = {\r\n    getProjectsByIds: (setOfProjectIds: Array<number>) =>\r\n        setOfProjectIds.length\r\n            ? instance.get<Array<ProjectType>>(`/projects?${arrayToStringArguments(\"id\", setOfProjectIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    getProjectIdsByUserIds: (setOfUserIds: Array<number>) =>\r\n        setOfUserIds.length\r\n            ? instance.get<Array<ProjectToUserIdsMatch>>(\r\n                `/projects-to-users?${arrayToStringArguments(\"userId\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n\r\n    addNewProject: () => console.error(\"method 'addNewProject' is not implemented\"),\r\n    changeProject: () => console.error(\"method 'changeProject' is not implemented\"),\r\n    deleteProject: () => console.error(\"method 'deleteProject' is not implemented\")\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasksByProjectOrUserIds: (setOfProjectIds: Array<number> | null, setOfUserIds: Array<number> | null) =>\r\n        setOfProjectIds || setOfUserIds\r\n            ? instance.get<Array<TaskType>>(\r\n                `/tasks?${arrayToStringArguments(\"project\", setOfProjectIds)}${arrayToStringArguments(\"author\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    addNewTask: (task: TaskType) =>\r\n        instance.post<TaskType>(`/tasks`, task)\r\n            .then(response => response.data),\r\n\r\n    changeTask: (taskId: number, title: string, isDone: boolean) =>\r\n        instance.patch<TaskType>(`/tasks/${taskId}`, {title, isDone})\r\n            .then(response => response.data),\r\n\r\n    deleteTask: (taskId: number) =>\r\n        instance.delete<TaskType>(`/tasks/${taskId}`)\r\n            .then(response => response.data),\r\n}\r\n\r\n","import {ThunkAction} from \"redux-thunk\"\r\nimport {AuthDataType, ProjectToUserIdsMatch, ProjectType, TaskType, UserType} from \"../types/types\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\n\r\nlet initialState = {\r\n    clientSideData: {\r\n        users: {\r\n            items: [] as Array<UserType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        authData: {\r\n            items: [] as Array<UserType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        projectsToUsers: {\r\n            items: [] as Array<ProjectToUserIdsMatch>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        projects: {\r\n            items: [] as Array<ProjectType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        tasks: {\r\n            items: [] as Array<TaskType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        }\r\n    }\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\ntype DataType = typeof initialState.clientSideData\r\ntype TableNamesTypes = keyof DataType\r\ntype ItemType = {id: number, [key: string]: any}\r\n\r\nconst clientSideApiReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_ID_TO_DELETED\":\r\n            return {\r\n                ...state,\r\n                clientSideData: {\r\n                    ...state.clientSideData,\r\n                    [action.tableName]: {\r\n                        ...state.clientSideData[action.tableName],\r\n                        deleted: [\r\n                            ...state.clientSideData[action.tableName].deleted,\r\n                            action.itemId\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n            case \"ADD_NEW_ITEM\":\r\n                return {\r\n                    ...state,\r\n                    clientSideData: {\r\n                        ...state.clientSideData,\r\n                        [action.tableName]: {\r\n                            ...state.clientSideData[action.tableName],\r\n                            items: [\r\n                                ...state.clientSideData[action.tableName].items,\r\n                                action.item\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n                case \"DELETE_ITEM\":\r\n                    return {\r\n                        ...state,\r\n                        clientSideData: {\r\n                            ...state.clientSideData,\r\n                            [action.tableName]: {\r\n                                ...state.clientSideData[action.tableName],\r\n                                items: [...state.clientSideData[action.tableName].items].filter(\r\n                                    (item: ItemType) => item.id !== action.itemId\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n        default: return state\r\n    }\r\n};\r\n\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    addIdToDeleted: (tableName: TableNamesTypes, itemId: number) => ({type: 'ADD_ID_TO_DELETED', tableName, itemId} as const),\r\n    addNewItem: (tableName: TableNamesTypes, item: ItemType) => ({type: 'ADD_NEW_ITEM', tableName, item} as const),\r\n    deleteItem: (tableName: TableNamesTypes, itemId: number) => ({type: 'DELETE_ITEM', tableName, itemId} as const)\r\n}\r\n\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nexport const addIdToDeleted = (tableName: TableNamesTypes, itemId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.addIdToDeleted(tableName, itemId));\r\n};\r\n\r\n\r\n\r\nexport default clientSideApiReducer","export class AuthorizationFailedException {\r\n    message: string;\r\n    constructor () {\r\n        this.message = `Авторизация не удалась`\r\n    }\r\n}","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, usersAPI} from \"../api/api\"\r\nimport {AuthorizationFailedException} from \"../exceptions/exceptions\"\r\nimport Cookies from 'js-cookie'\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    nickname: null as string | null,\r\n    isAuth: false,\r\n    loginFormShown: false,\r\n    loginErrorMessage: null as string | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst clientSideApiReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                id: action.id,\r\n                email: action.email,\r\n                nickname: action.nickname,\r\n                isAuth: action.isAuth\r\n            }\r\n        case \"auth/SHOW_LOGIN_FORM\":\r\n            return {\r\n                ...state,\r\n                loginFormShown: action.loginFormShown\r\n            }\r\n            case \"auth/SET_LOGIN_ERROR_MESSAGE\":\r\n                return {\r\n                    ...state,\r\n                    loginErrorMessage: action.loginErrorMessage\r\n                }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setUserData: (\r\n        id: number | null,\r\n        email: string | null,\r\n        nickname: string | null,\r\n        isAuth: boolean\r\n    ) => ({type: 'auth/SET_USER_DATA', id, email, nickname, isAuth} as const),\r\n    showLoginForm: (loginFormShown: boolean) => ({type: 'auth/SHOW_LOGIN_FORM', loginFormShown} as const),\r\n    setLoginErrorMessage: (loginErrorMessage: string | null) => ({type: 'auth/SET_LOGIN_ERROR_MESSAGE', loginErrorMessage} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const login = (email: string, password: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let authData = await authAPI.auth(email, password)\r\n        if (authData.length === 0) throw new AuthorizationFailedException()\r\n        let extraData = await usersAPI.getUsersByIds([authData[0].id])\r\n        if (authData.length === 0) throw new AuthorizationFailedException()\r\n        dispatch(actions.setUserData(authData[0].id, authData[0].email, extraData[0].nickname, true))\r\n        dispatch(actions.showLoginForm(false))\r\n        dispatch(actions.setLoginErrorMessage(null))\r\n        Cookies.set('email',  email)\r\n        Cookies.set('password', password)\r\n    }\r\n    catch (e) {\r\n        dispatch(actions.setLoginErrorMessage('Неправильно введены email или password!'))\r\n    }\r\n}\r\n\r\nexport const fakeLogin = (): ThunkType => async (dispatch) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            setTimeout(() => {\r\n                dispatch(actions.setUserData(0, 'testuser@email.com', 'testuser', true))\r\n                resolve()\r\n            } ,2000)\r\n        }\r\n        catch (e) {\r\n            alert(e.message)\r\n            reject()\r\n        }\r\n    })\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    Cookies.remove('email')\r\n    Cookies.remove('password')\r\n    dispatch(actions.setUserData(null, null, null, false))\r\n}\r\n\r\nexport const showLoginForm = (loginFormShown: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.showLoginForm(loginFormShown))\r\n}\r\n\r\nexport const setLoginErrorMessage = (loginErrorMessage: string | null): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setLoginErrorMessage(loginErrorMessage))\r\n}\r\n\r\nexport default clientSideApiReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, projectsAPI, usersAPI} from \"../api/api\"\r\nimport {ProjectToUserIdsMatch, ProjectType} from \"../types/types\"\r\n\r\nlet initialState = {\r\n    projects: [] as Array<ProjectType>,\r\n    isFetching: false,\r\n    selectedProjectId: null as number | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nconst projectsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'projects/SET_PROJECTS':\r\n            return {\r\n                ...state,\r\n                projects: action.projects,\r\n                selectedProjectId: action.selectedProjectId\r\n            }\r\n        case \"projects/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"projects/SET_SELECTED_PROJECT_ID\":\r\n            return {\r\n                ...state,\r\n                selectedProjectId: action.selectedProjectId\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setProjects: (projects: Array<ProjectType>) => ({\r\n        type: 'projects/SET_PROJECTS',\r\n        projects,\r\n        selectedProjectId: projects.length>0 ? projects[0].id : null\r\n    } as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'projects/SET_FETCHING', isFetching} as const),\r\n    setSelectedProjectId: (selectedProjectId: number) => ({type: 'projects/SET_SELECTED_PROJECT_ID', selectedProjectId} as const),\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const getProjects = (userIds: Array<number>): ThunkType => async (dispatch) => {\r\n    try {\r\n        let projectIds: Array<ProjectToUserIdsMatch> = await projectsAPI.getProjectIdsByUserIds(userIds)\r\n        let projects: Array<ProjectType> = await projectsAPI.getProjectsByIds(projectIds.map((p) => p.projectId))\r\n        dispatch(actions.setProjects(projects))\r\n        dispatch(actions.setFetching(false))\r\n    }\r\n    catch (e) {\r\n        alert(e.message)\r\n    }\r\n}\r\n\r\nexport const setProjects = (projects: Array<ProjectType>): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setProjects(projects))\r\n}\r\n\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\nexport const setSelectedProjectId = (selectedProjectId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSelectedProjectId(selectedProjectId))\r\n}\r\n\r\nexport default projectsReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, projectsAPI, usersAPI} from \"../api/api\"\r\nimport {ProjectToUserIdsMatch, ProjectType, UserType} from \"../types/types\"\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    isFetching: false,\r\n    selectedUserId: null as number | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"users/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"users/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"users/SET_SELECTED_USER_ID\":\r\n            return {\r\n                ...state,\r\n                selectedUserId: action.selectedUserId\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setUsers: (users: Array<UserType>) => ({type: 'users/SET_USERS', users} as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'users/SET_FETCHING', isFetching} as const),\r\n    setSelectedUserId: (selectedUserId: number | null) => ({type: 'users/SET_SELECTED_USER_ID', selectedUserId} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const getUsers = (projectIds: Array<number>): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.setFetching(true))\r\n        let userIds: Array<ProjectToUserIdsMatch> = await usersAPI.getUserIdsByProjectIds(projectIds)\r\n        let users: Array<UserType> = await usersAPI.getUsersByIds(userIds.map((u) => u.userId))\r\n        dispatch(actions.setUsers(users))\r\n        dispatch(actions.setFetching(false))\r\n    } catch (e) {\r\n        alert(e.message)\r\n    }\r\n\r\n}\r\n\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\nexport const setSelectedUserId = (selectedUserId: number | null): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSelectedUserId(selectedUserId))\r\n}\r\n\r\nexport default usersReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, projectsAPI, tasksAPI, usersAPI} from \"../api/api\"\r\nimport {ProjectToUserIdsMatch, ProjectType, TaskFilterType, TaskSortType, TaskType, UserType} from \"../types/types\"\r\nimport {addIdToDeleted} from \"./clientSideApiReducer\"\r\n\r\nlet initialState = {\r\n    tasks: [] as Array<TaskType>,\r\n    isFetching: false,\r\n    filter: {\r\n        userIds: null as Array<number> | null,\r\n        status: null as boolean | null,\r\n        content: null as string | null,\r\n    } as TaskFilterType,\r\n    sort: {\r\n        firstCompleted: null as boolean | null,\r\n        firstNew: null as boolean | null\r\n    } as TaskSortType,\r\n    countOfShownTasks: 0\r\n};\r\ntype InitialStateType = typeof initialState\r\n\r\nconst tasksReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"tasks/SET_TASKS\":\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            }\r\n        case \"tasks/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"tasks/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: {\r\n                    ...state.filter,\r\n                    userIds: action.filter.userIds === undefined\r\n                        ? state.filter.userIds\r\n                        : action.filter.userIds === null\r\n                            ? null\r\n                            : state.filter.userIds\r\n                                ? [...state.filter.userIds, ...action.filter.userIds]\r\n                                : [...action.filter.userIds],\r\n                    status: action.filter.status === undefined\r\n                        ? state.filter.status\r\n                        : action.filter.status,\r\n                    content: action.filter.content === undefined\r\n                        ? state.filter.content\r\n                        : action.filter.content\r\n                }\r\n            }\r\n        case \"tasks/SET_SORT\":\r\n            return {\r\n                ...state,\r\n                sort: {\r\n                    ...state.sort,\r\n                    firstCompleted: action.sort.firstCompleted === undefined\r\n                        ? state.sort.firstCompleted\r\n                        : action.sort.firstCompleted,\r\n                    firstNew: action.sort.firstNew === undefined\r\n                        ? state.sort.firstNew\r\n                        : action.sort.firstNew\r\n                }\r\n            }\r\n\r\n        case \"tasks/SET_COUNT_OF_SHOWN_TASKS\":\r\n            return {\r\n                ...state,\r\n                countOfShownTasks: action.countOfShownTasks\r\n            }\r\n        case \"tasks/DELETE_TASK\":\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks.filter(t => t.id !== action.taskId)]\r\n            }\r\n        case \"tasks/CHANGE_TASK\": {\r\n            let changeTaskId = state.tasks.findIndex(t => t.id === action.taskId)\r\n            return {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks.filter(t => t.id !== action.taskId),\r\n                    {\r\n                        ...state.tasks[changeTaskId],\r\n                        isDone: !action.status,\r\n                        title: action.title\r\n                    }\r\n                ],\r\n            }\r\n\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setTasks: (tasks: Array<TaskType>) => ({type: 'tasks/SET_TASKS', tasks} as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'tasks/SET_FETCHING', isFetching} as const),\r\n    setFilter: (filter: TaskFilterType) => ({type: 'tasks/SET_FILTER', filter} as const),\r\n    setSort: (sort: TaskSortType) => ({type: 'tasks/SET_SORT', sort} as const),\r\n    setCountOfShownTasks: (countOfShownTasks: number) => ({\r\n        type: 'tasks/SET_COUNT_OF_SHOWN_TASKS',\r\n        countOfShownTasks\r\n    } as const),\r\n    changeTask: (taskId: number, status: boolean, title: string) => ({\r\n        type: 'tasks/CHANGE_TASK',\r\n        taskId,\r\n        status,\r\n        title\r\n    } as const),\r\n    deleteTask: (taskId: number) => ({type: 'tasks/DELETE_TASK', taskId} as const),\r\n    newTask: (project: number, author: number, data: number, title: string) => ({\r\n        type: 'tasks/NEW_TASK',\r\n        project,\r\n        author,\r\n        data,\r\n        title\r\n    } as const),\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const getTasks = (\r\n    projectIds: Array<number> | null,\r\n    userIds: Array<number> | null\r\n): ThunkType => async (dispatch) => {\r\n    try {\r\n        let tasks = await tasksAPI.getTasksByProjectOrUserIds(projectIds, userIds)\r\n        dispatch(actions.setTasks(tasks))\r\n        dispatch(actions.setFilter({userIds: [], status: null, content: \"\"}))\r\n        dispatch(actions.setFetching(false))\r\n    } catch (e) {\r\n        alert(e.message)\r\n    }\r\n}\r\n\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\nexport const setFilter = (filter: TaskFilterType, rewrite = false): ThunkType => async (dispatch) => {\r\n    if (rewrite) dispatch(actions.setFilter({\r\n        userIds: filter.userIds !== undefined ? null : undefined,\r\n        status: filter.status !== undefined ? null : undefined,\r\n        content: filter.content !== undefined ? null : undefined,\r\n    }))\r\n    dispatch(actions.setFilter(filter))\r\n}\r\n\r\nexport const setSort = (sort: TaskSortType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSort(sort))\r\n}\r\n\r\nexport const setCountOfShownTasks = (countOfShownTasks: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setCountOfShownTasks(countOfShownTasks))\r\n}\r\n\r\nexport const deleteTask = (taskId: number): ThunkType => async (dispatch) => {\r\n    debugger\r\n    try {\r\n        let response = await tasksAPI.deleteTask(taskId)\r\n        dispatch(actions.deleteTask(taskId))\r\n        dispatch(addIdToDeleted('tasks', taskId))\r\n    } catch (e) {\r\n        alert(e.message)\r\n    }\r\n\r\n}\r\n\r\nexport const changeTask = (taskId: number, status: boolean, title: string): ThunkType => async (dispatch) => {\r\n    debugger\r\n    try {\r\n        let response = await tasksAPI.changeTask(taskId, title, status)\r\n        dispatch(actions.changeTask(taskId, status, title))\r\n        /*dispatch(addIdToDeleted('tasks', taskId))*/\r\n    } catch (e) {\r\n        alert(e.message)\r\n    }\r\n\r\n}\r\n\r\nexport default tasksReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, usersAPI} from \"../api/api\"\r\nimport {AuthorizationFailedException} from \"../exceptions/exceptions\"\r\nimport {fakeLogin, login, showLoginForm} from \"./authReducer\"\r\nimport Cookies from 'js-cookie'\r\n\r\nlet initialState = {\r\n    isInitialized: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"app/SET_INITIALIZED\":\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setInitialized: (isInitialized: boolean) => ({type: 'app/SET_INITIALIZED', isInitialized} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const appInitializing = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        /*await dispatch(fakeLogin())*/\r\n        let email = Cookies.get('email')\r\n        let password = Cookies.get('password')\r\n        if (email && password)\r\n            await dispatch(login(email, password))\r\n        else {\r\n            /*alert('Ранее вы небыли авторизованы. Авторизация...')\r\n            await dispatch(login('testuser@email.com', 'testuser_pass'))*/\r\n            dispatch(showLoginForm(true))\r\n        }\r\n\r\n        dispatch(actions.setInitialized(true))\r\n    } catch (e) {\r\n        alert(e.message)\r\n    }\r\n}\r\n\r\nexport default appReducer","import {combineReducers, createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport clientSideApiReducer from \"./clientSideApiReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport projectsReducer from \"./projectsReducer\"\r\nimport usersReducer from \"./usersReducer\"\r\nimport tasksReducer from \"./tasksReducer\"\r\nimport appReducer from \"./appReducer\"\r\n\r\nlet rootReducer = combineReducers({\r\n    api: clientSideApiReducer,\r\n    auth: authReducer,\r\n    projects: projectsReducer,\r\n    users: usersReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    clientSideDb: clientSideApiReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype UnionTypeFromObj<T> = T extends {[key: string]: infer R} ? R : never\r\nexport type ActionsTypes<T extends {[key: string]: (...args: any[]) => any}> = ReturnType<UnionTypeFromObj<T>>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n/*let store = createStore(rootReducer, applyMiddleware(thunkMiddleware));*/\r\n\r\nexport default store","/**\r\n * Счетчик сдалан для работы с fake api.\r\n * Используется в качестве уникального идентификатора\r\n * при добавлении записи в любую из таблиц.\r\n * При вызове увеличивается на 1\r\n *\r\n * @param {number} counter - может быть использовано для сброса счетчика в любое значение. необязательный параметр\r\n * @return {number} newCounter - текущее значение счетчика.\r\n * */\r\nlet _universalCounter = 1000\r\nexport const getCounter = (counter: number = _universalCounter ): number => {\r\n    if (counter !== _universalCounter) _universalCounter = counter\r\n    return _universalCounter++\r\n}","import React, {useEffect} from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport ListMui from '@material-ui/core/List';\r\nimport ListItemMui from '@material-ui/core/ListItem';\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon';\r\nimport ListItemTextMui from '@material-ui/core/ListItemText';\r\nimport CollapseMui from '@material-ui/core/Collapse';\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore';\r\nimport AccountTreeIconMui from '@material-ui/icons/AccountTree';\r\nimport FolderIconMui from '@material-ui/icons/Folder';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {getProjects, setFetching, setProjects, setSelectedProjectId} from \"../../../redux/projectsReducer\"\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport {ProjectType, TaskFilterType, TaskSortType} from \"../../../types/types\"\r\nimport {setSelectedUserId} from \"../../../redux/usersReducer\"\r\nimport {actions, setFilter, setSort} from \"../../../redux/tasksReducer\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n    }),\r\n)\r\n\r\nconst Projects: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    /**Активируем каскад вертушек\r\n     * при начале инициализации*/\r\n    /*useEffect(() => {\r\n        props.initializationInProgress && props.setFetching(true)\r\n    }, [props.initializationInProgress, props.isAuth])*/\r\n\r\n    /**Получаем пользователей\r\n     * при изменении авторизованного ID*/\r\n    useEffect(() => {\r\n        props.myId!==null\r\n            ? props.getProjects([props.myId])\r\n            : props.setProjects([])\r\n    },[props.myId])\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const handleItemClick = (selectedProjectId: number) => {\r\n        props.setSelectedProjectId(selectedProjectId)\r\n        props.setFilter({userIds: null, status: null, content: null})\r\n        props.setSort({firstCompleted: null, firstNew: null})\r\n        props.setSelectedUserId(null)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ListItemMui button onClick={handleClick}>\r\n                <ListItemIconMui>\r\n                    <AccountTreeIconMui/>\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary=\"Проекты\"\r\n                    primaryTypographyProps={{variant: \"body1\"}}/>\r\n                {open ? <ExpandLessMui/> : <ExpandMoreMui/>}\r\n            </ListItemMui>\r\n            {props.isFetching && props.isAuth\r\n                ? <CircularProgress className={classes.progress}/>\r\n                : <CollapseMui in={open} timeout=\"auto\" unmountOnExit>\r\n                    {props.isAuth  && props.projects.map((item) => {\r\n                        return (\r\n                            <ListMui component=\"div\" disablePadding key={item.id}>\r\n                                <ListItemMui button className={classes.nested} onClick={() => handleItemClick(item.id)}>\r\n                                    <ListItemIconMui>\r\n                                        {\r\n                                            item.id === props.selectedProjectId\r\n                                                ? <FolderOpenIcon/>\r\n                                                : <FolderIconMui/>\r\n                                        }\r\n                                    </ListItemIconMui>\r\n                                    <ListItemTextMui primary={item.projectName}/>\r\n                                </ListItemMui>\r\n                            </ListMui>\r\n                        )\r\n                    })}\r\n                </CollapseMui>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.projects.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        projects: state.projects.projects,\r\n        myId: state.auth.id,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        /*initializationInProgress: state.app.initializationInProgress,*/\r\n        isInitialized: state.app.isInitialized\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    getProjects: (userIds: Array<number>) => void\r\n    /*setFetching: (isFetching: boolean) => void*/\r\n    setProjects: (projects: Array<ProjectType>) => void\r\n    setSelectedProjectId: (selectedProjectId: number) => void\r\n    setSelectedUserId: (selectedUserId: number | null) => void\r\n    setFilter: (filter: TaskFilterType) => void\r\n    setSort: (sort: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    getProjects,\r\n    /*setFetching,*/\r\n    setProjects,\r\n    setSelectedProjectId,\r\n    setSelectedUserId,\r\n    setFilter,\r\n    setSort\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Projects)","import React, {useEffect} from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ListMui from '@material-ui/core/List';\r\nimport ListItemMui from '@material-ui/core/ListItem';\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon';\r\nimport ListItemTextMui from '@material-ui/core/ListItemText';\r\nimport CollapseMui from '@material-ui/core/Collapse';\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore';\r\nimport PeopleIconMui from '@material-ui/icons/People';\r\nimport AccountCircleIconMui from '@material-ui/icons/AccountCircle';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\"\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {getUsers, setFetching, setSelectedUserId} from \"../../../redux/usersReducer\"\r\nimport FolderOpenIcon from \"@material-ui/core/SvgIcon/SvgIcon\"\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\r\nimport {TaskFilterType} from \"../../../types/types\"\r\nimport {setFilter} from \"../../../redux/tasksReducer\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n    }),\r\n)\r\n\r\nconst Users: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n    /**Активируем каскад вертушек\r\n     * при начале инициализации*/\r\n    useEffect(() => {\r\n        props.projectsIsFetching && props.setFetching(true)\r\n    }, [props.projectsIsFetching])\r\n\r\n    useEffect(() => {\r\n        props.selectedProjectId!==null && props.getUsers([props.selectedProjectId])\r\n    },[props.selectedProjectId])\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const handleItemClick = (selectedUserId: number) => {\r\n        props.setSelectedUserId(selectedUserId)\r\n        props.setFilter({userIds: [selectedUserId], status: undefined, content: undefined}, true)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ListItemMui button onClick={handleClick}>\r\n                <ListItemIconMui>\r\n                    <PeopleIconMui />\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary=\"Команда\"\r\n                    primaryTypographyProps={{variant: \"body1\"}}/>\r\n                {open ? <ExpandLessMui /> : <ExpandMoreMui />}\r\n            </ListItemMui>\r\n            {props.isFetching && props.isAuth\r\n                ? <CircularProgress className={classes.progress}/>\r\n                : <CollapseMui in={open} timeout=\"auto\" unmountOnExit>\r\n                    {props.isAuth && props.users.map((item) => {\r\n                        return (\r\n                            <ListMui component=\"div\" disablePadding key={item.id}>\r\n                                <ListItemMui button className={classes.nested} onClick={() => handleItemClick(item.id)}>\r\n                                    <ListItemIconMui>\r\n                                        {\r\n                                            item.id === props.selectedUserId\r\n                                                ? <PermIdentityIcon/>\r\n                                                : <PersonIcon/>\r\n                                        }\r\n                                    </ListItemIconMui>\r\n                                    <ListItemTextMui primary={\r\n                                        `${item.nickname} (${props.tasks.filter(t => t.author === item.id).length})`\r\n                                    }/>\r\n                                </ListItemMui>\r\n                            </ListMui>\r\n                        )\r\n                    })}\r\n                </CollapseMui>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.users.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        projectsIsFetching: state.projects.isFetching,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        users: state.users.users,\r\n        selectedUserId: state.users.selectedUserId,\r\n        tasks: state.tasks.tasks\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFetching: (isFetching: boolean) => void,\r\n    getUsers: (projectIds: Array<number>) => void,\r\n    setSelectedUserId: (selectedUserId: number) => void,\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFetching,\r\n    getUsers,\r\n    setSelectedUserId,\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Users)\r\n","import React from 'react'\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\r\nimport ListSubheaderMui from '@material-ui/core/ListSubheader'\r\nimport ListMui from '@material-ui/core/List'\r\nimport DividerMui from \"@material-ui/core/Divider/Divider\"\r\nimport Projects from \"./Projects/Projects\"\r\nimport Team from \"./Users/Users\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxWidth: 360,\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        /** Для отступа между блоками в меню*/\r\n        verticalSpacing: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: theme.spacing(2, 1),\r\n            justifyContent: 'flex-end',\r\n        },\r\n    }),\r\n)\r\n\r\nconst Menu: React.FC<any> = () => {    \r\n    \r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <ListMui\r\n            component=\"nav\"\r\n            aria-labelledby=\"nested-list-subheader\"\r\n            subheader={\r\n                <ListSubheaderMui component=\"div\" id=\"nested-list-subheader\">\r\n                    Меню\r\n                </ListSubheaderMui>\r\n            }\r\n            className={classes.root}\r\n        >\r\n            <DividerMui />\r\n            <Projects/>\r\n            <div className={classes.verticalSpacing} />\r\n            <Team/>\r\n            <DividerMui />\r\n        </ListMui>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport TypographyMui from '@material-ui/core/Typography'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport MenuMui from '@material-ui/core/Menu'\r\nimport AccountCircleIconMui from '@material-ui/icons/AccountCircle'\r\nimport MoreIconMui from '@material-ui/icons/MoreVert'\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {appInitializing} from \"../../redux/appReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport {Helmet} from \"react-helmet\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport {logout, showLoginForm} from \"../../redux/authReducer\"\r\nimport {Button} from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        title: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n        },\r\n        sectionDesktop: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'flex',\r\n            },\r\n        },\r\n        sectionMobile: {\r\n            display: 'flex',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n        typography__authorizedUserNickname: {\r\n            marginRight: theme.spacing(2),\r\n            alignSelf: 'center',\r\n        },\r\n    }),\r\n)\r\n\r\nconst AppBarContent: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n\r\n    const classes = useStyles()\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\r\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null)\r\n\r\n    const isMenuOpen = Boolean(anchorEl)\r\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl)\r\n\r\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget)\r\n    }\r\n\r\n    const handleMobileMenuClose = () => {\r\n        setMobileMoreAnchorEl(null)\r\n    }\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null)\r\n        handleMobileMenuClose()\r\n    }\r\n\r\n    const handleExit = () => {\r\n        handleMenuClose()\r\n        props.logout()\r\n    }\r\n\r\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setMobileMoreAnchorEl(event.currentTarget)\r\n    }\r\n\r\n    const handleLogin = () => {\r\n        props.showLoginForm(true)\r\n    }\r\n\r\n    const countOfShownTasks = props.isAuth ? props.countOfShownTasks : 0\r\n\r\n    const menuId = 'primary-search-account-menu'\r\n    const renderMenu = (\r\n        <MenuMui\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={menuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMenuOpen}\r\n            onClose={handleMenuClose}\r\n        >\r\n            <MenuItemMui onClick={handleExit}>Выйти</MenuItemMui>\r\n        </MenuMui>\r\n    )\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <MenuMui\r\n            anchorEl={mobileMoreAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileMenuClose}\r\n        >\r\n            {\r\n                !props.isAuth ? <MenuItemMui onClick={handleLogin}>Войти</MenuItemMui>\r\n                    : <MenuItemMui onClick={handleProfileMenuOpen}>\r\n                        <IconButtonMui\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"primary-search-account-menu\"\r\n                            aria-haspopup=\"true\"\r\n                            color=\"inherit\"\r\n                        >\r\n                            <AccountCircleIconMui/>\r\n                        </IconButtonMui>\r\n                        <p>{props.myNickname}</p>\r\n                    </MenuItemMui>\r\n            }\r\n        </MenuMui>\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <TypographyMui className={classes.title} variant=\"h6\" noWrap>\r\n                {`Менеджер задач (${countOfShownTasks})`}\r\n                <Helmet title={`(${countOfShownTasks}) Менеджер задач`}/>\r\n            </TypographyMui>\r\n            <div className={classes.grow}/>\r\n            {\r\n                !props.isAuth ? <div className={classes.sectionDesktop}>\r\n                        <Button color=\"inherit\" onClick={handleLogin}>Войти</Button>\r\n                    </div>\r\n                    : <div className={classes.sectionDesktop}>\r\n\r\n                        <TypographyMui className={classes.typography__authorizedUserNickname}\r\n                                       variant='body1'>{props.myNickname}</TypographyMui>\r\n                        <IconButtonMui\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls={menuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleProfileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <AccountCircleIconMui/>\r\n                        </IconButtonMui>\r\n                    </div>\r\n            }\r\n            <div className={classes.sectionMobile}>\r\n                <IconButtonMui\r\n                    aria-label=\"show more\"\r\n                    aria-controls={mobileMenuId}\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleMobileMenuOpen}\r\n                    color=\"inherit\"\r\n                >\r\n                    <MoreIconMui/>\r\n                </IconButtonMui>\r\n            </div>\r\n            {renderMobileMenu}\r\n            {renderMenu}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        countOfShownTasks: state.tasks.countOfShownTasks,\r\n        myNickname: state.auth.nickname,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    logout: () => void,\r\n    showLoginForm: (loginFormShown: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    logout,\r\n    showLoginForm\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppBarContent)","import React from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport FormControlMui from '@material-ui/core/FormControl'\r\nimport SelectMui from '@material-ui/core/Select'\r\nimport InputAdornmentMui from '@material-ui/core/InputAdornment'\r\nimport FilterListIconMui from '@material-ui/icons/FilterList'\r\nimport {Divider} from \"@material-ui/core\"\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {TaskFilterType, TaskSortType} from \"../../../types/types\"\r\nimport {setFilter, setSort} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n)\r\n\r\nconst CombinedFilter: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        switch (event.target.value) {\r\n            case 'CLOSE_FIRST':\r\n                props.setSort({firstCompleted: true, firstNew: false})\r\n                break\r\n            case 'OPEN_FIRST':\r\n                props.setSort({firstCompleted: false, firstNew: false})\r\n                break\r\n            case 'NEW_FIRST':\r\n                props.setSort({firstCompleted: null, firstNew: true})\r\n                break\r\n            case 'OLD_FIRST':\r\n                props.setSort({firstCompleted: null, firstNew: false})\r\n                break\r\n            default:\r\n                props.setSort({firstCompleted: null, firstNew: null})\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormControlMui className={classes.formControl}>\r\n                <SelectMui\r\n                    value={\r\n                        props.sort.firstCompleted !== null\r\n                            ? props.sort.firstCompleted === true\r\n                                ? 'CLOSE_FIRST'\r\n                                : 'OPEN_FIRST'\r\n                            : props.sort.firstNew !== null\r\n                                ? props.sort.firstNew === true\r\n                                    ? 'NEW_FIRST'\r\n                                    : 'OLD_FIRST'\r\n                                : ''\r\n                    }\r\n                    onChange={handleChange}\r\n                    displayEmpty\r\n                    className={classes.selectEmpty}\r\n                    inputProps={{ 'aria-label': 'Without label' }}\r\n                    startAdornment={\r\n                        <InputAdornmentMui position='start'>\r\n                            <FilterListIconMui />\r\n                        </InputAdornmentMui>\r\n                    }\r\n                >\r\n                    <MenuItemMui value=''>\r\n                        <em>Сортировка</em>\r\n                    </MenuItemMui>\r\n                    <Divider />\r\n                    <MenuItemMui value='NEW_FIRST'>От новых к старым</MenuItemMui>\r\n                    <MenuItemMui value='OLD_FIRST'>От старых к новым</MenuItemMui>\r\n                    <Divider />\r\n                    <MenuItemMui value='OPEN_FIRST'>Сначала незавершенные</MenuItemMui>\r\n                    <MenuItemMui value='CLOSE_FIRST'>Сначала завершенные</MenuItemMui>\r\n                </SelectMui>\r\n            </FormControlMui>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        sort: state.tasks.sort\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setSort: (filter: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setSort\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CombinedFilter)","import React from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport FormControlMui from '@material-ui/core/FormControl'\r\nimport SelectMui from '@material-ui/core/Select'\r\nimport InputAdornmentMui from '@material-ui/core/InputAdornment'\r\nimport SortIconMui from '@material-ui/icons/Sort'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {getTasks, setCountOfShownTasks, setFetching, setFilter} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport {TaskFilterType} from \"../../../types/types\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByStatusSort: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        let value = event.target.value\r\n        props.setFilter({\r\n            userIds: undefined,\r\n            status: value === 'OPEN' ? false\r\n                : value === 'CLOSE' ? true\r\n                    : null,\r\n            content: undefined})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormControlMui className={classes.formControl}>\r\n                <SelectMui\r\n                    value={\r\n                        props.filter.status === true ? 'CLOSE'\r\n                            :  props.filter.status === false ? 'OPEN'\r\n                                : ''\r\n                    }\r\n                    onChange={handleChange}\r\n                    displayEmpty\r\n                    className={classes.selectEmpty}\r\n                    inputProps={{ 'aria-label': 'Without label' }}\r\n                    startAdornment={\r\n                        <InputAdornmentMui position=\"start\">\r\n                            <SortIconMui />\r\n                        </InputAdornmentMui>\r\n                    }\r\n                >\r\n                    <MenuItemMui value=\"\">\r\n                        <em>По статусу</em>\r\n                    </MenuItemMui>\r\n                    <MenuItemMui value='OPEN'>Незавершенные</MenuItemMui>\r\n                    <MenuItemMui value='CLOSE'>Завершенные</MenuItemMui>\r\n                </SelectMui>\r\n            </FormControlMui>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        filter: state.tasks.filter\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByStatusSort)","import React, {ChangeEvent} from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport AutocompleteMui from '@material-ui/lab/Autocomplete'\r\nimport TextFieldMui from '@material-ui/core/TextField'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {TaskFilterType, UserType} from \"../../../types/types\"\r\nimport {setFilter} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: \"100%\",\r\n            '& > * + *': {\r\n                marginTop: theme.spacing(3),\r\n            },\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByUsersFilter: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    let filteredUsers = (() =>\r\n        {\r\n            if (props.filter.userIds) {\r\n                return props.filter.userIds.map( userId => {\r\n                    return props.users.filter( user => user.id === userId)[0]\r\n                })\r\n            } else return []\r\n        }\r\n    )()\r\n\r\n    const handleUsersChanged = (event: ChangeEvent<{}>, users: UserType[]) => {\r\n        let usersIds = users.map( user => user.id)\r\n        props.setFilter({userIds: usersIds, status: undefined, content: undefined}, true)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AutocompleteMui\r\n                onChange={handleUsersChanged}\r\n                disableClearable\r\n                multiple\r\n                id=\"tags-outlined\"\r\n                options={props.users}\r\n                getOptionLabel={(option) => option.nickname}\r\n                value={filteredUsers}\r\n                filterSelectedOptions\r\n                renderInput={(params) => (\r\n                    <TextFieldMui\r\n                        {...params}\r\n                        variant=\"standard\"\r\n                        label=\"\"\r\n                        placeholder=\"Авторы\"\r\n                    />\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.users.users,\r\n        filter: state.tasks.filter\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByUsersFilter)","import React, {ChangeEvent} from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport TextFieldMui from '@material-ui/core/TextField'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {ProjectType, TaskFilterType} from \"../../../types/types\"\r\nimport {getProjects, setFetching, setProjects, setSelectedProjectId} from \"../../../redux/projectsReducer\"\r\nimport {setSelectedUserId} from \"../../../redux/usersReducer\"\r\nimport {setFilter} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                margin: theme.spacing(1, 0),\r\n            },\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByContentFilter: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleContentChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        props.setFilter({userIds: undefined, status: undefined, content: e.currentTarget.value})\r\n    }\r\n\r\n    return (\r\n        <form style={{width: '100%'}} className={classes.root} noValidate autoComplete=\"off\"\r\n        >\r\n            <TextFieldMui\r\n                value={props.filter.content}\r\n                onChange={handleContentChange}\r\n                id=\"standard-basic\"\r\n                label=\"Искать по содержимому: \"\r\n                fullWidth\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        filter: state.tasks.filter\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByContentFilter)","import React from \"react\"\r\nimport ListItemMui from \"@material-ui/core/ListItem/ListItem\"\r\nimport ListItemSecondaryActionMui from \"@material-ui/core/ListItemSecondaryAction/ListItemSecondaryAction\"\r\nimport IconButtonMui from \"@material-ui/core/IconButton/IconButton\"\r\nimport BackspaceIconMui from '@material-ui/icons/Backspace'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {appInitializing} from \"../../../redux/appReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport {TaskFilterType, TaskSortType} from \"../../../types/types\"\r\nimport {setFilter, setSort} from \"../../../redux/tasksReducer\"\r\n\r\ntype OwnProps = {\r\n    children: React.ReactElement | React.ReactElement[]\r\n    rowNumber: number\r\n}\r\n\r\nconst FilterRow: React.FC<OwnProps & MapDispatchProps> = (props) => {\r\n\r\n    const handleClearFiltersInRow = () => {\r\n        switch (props.rowNumber) {\r\n            case 1:\r\n                props.setSort({firstCompleted: null, firstNew: null})\r\n                props.setFilter({userIds: undefined, status: null, content: undefined})\r\n                break\r\n            case 2:\r\n                props.setFilter({userIds: null, status: undefined, content: undefined})\r\n                break\r\n            case 3:\r\n                props.setFilter({userIds: undefined, status: undefined, content: null})\r\n                break\r\n            default: break\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ListItemMui >\r\n            {props.children}\r\n            <ListItemSecondaryActionMui>\r\n                <IconButtonMui onClick={handleClearFiltersInRow} edge=\"end\" aria-label=\"delete\">\r\n                    <BackspaceIconMui/>\r\n                </IconButtonMui>\r\n            </ListItemSecondaryActionMui>\r\n        </ListItemMui>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType) => void\r\n    setSort: (sort: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter,\r\n    setSort\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterRow)","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemSecondaryActionMui from '@material-ui/core/ListItemSecondaryAction'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport BackspaceIconMui from '@material-ui/icons/Backspace'\r\nimport CombinedFilter from \"./CombinedFilter/CombinedFilter\"\r\nimport ByStatusSort from \"./ByStatusSort/ByStatusSort\"\r\nimport ByUsersFilter from \"./ByUsersFilter/ByUsersFilter\"\r\nimport ByContentFilter from \"./ByContentFilter/ByContentFilter\"\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {appInitializing} from \"../../redux/appReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport FilterRow from \"./FilterRow/FilterRow\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nconst Filter: React.FC<any> = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ListMui disablePadding>\r\n                <FilterRow rowNumber={1}>\r\n                        <CombinedFilter/>\r\n                        <ByStatusSort/>\r\n                </FilterRow>\r\n                <FilterRow rowNumber={2}><ByUsersFilter/></FilterRow>\r\n                <FilterRow rowNumber={3}><ByContentFilter/></FilterRow>\r\n            </ListMui>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Filter\r\n","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport CollapseMui from '@material-ui/core/Collapse'\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess'\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore'\r\nimport SearchIconMui from '@material-ui/icons/Search'\r\nimport Filter from \"./Filter\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        /*nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },*/\r\n    }),\r\n)\r\n\r\nconst FilterWrapper: React.FC<any> = () => {\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItemMui button onClick={handleClick}>\r\n                <ListItemIconMui>\r\n                    <SearchIconMui/>\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary=\"Поиск задач\"\r\n                    primaryTypographyProps={{variant: \"body1\"}}/>\r\n                {open ? <ExpandLessMui/> : <ExpandMoreMui/>}\r\n            </ListItemMui>\r\n            <CollapseMui in={open} timeout=\"auto\" unmountOnExit>\r\n                <ListMui component=\"div\" disablePadding>\r\n                    <Filter/>\r\n                </ListMui>\r\n            </CollapseMui>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FilterWrapper","import React from 'react'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon'\r\nimport ListItemSecondaryActionMui from '@material-ui/core/ListItemSecondaryAction'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport CheckboxMui from '@material-ui/core/Checkbox'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport DeleteOutlineIconMui from '@material-ui/icons/DeleteOutline'\r\nimport {connect} from \"react-redux\"\r\nimport {TaskType, UserType} from \"../../../types/types\"\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {changeTask, deleteTask} from \"../../../redux/tasksReducer\"\r\n\r\ntype OwnType = {\r\n    taskId: number\r\n}\r\n\r\nconst Task: React.FC<MapStatePropsType & MapDispatchProps & OwnType> = (props) => {\r\n\r\n    const userById = (users: Array<UserType>, authorId: number): UserType => {\r\n        let filteredUsers = users.filter(u => u.id === authorId)\r\n        return filteredUsers[0]\r\n    }\r\n\r\n    const taskById = (tasks: Array<TaskType>, taskId: number): TaskType => {\r\n        let filteredTasks = tasks.filter(t => t.id === taskId)\r\n        return filteredTasks[0]\r\n    }\r\n\r\n    const task: TaskType | false = taskById(props.tasks, props.taskId)\r\n\r\n    const labelId = `checkbox-list-label-${task.id}`;\r\n    const date = new Date(task.date)\r\n    const dateStr = `${\r\n        date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\r\n    }.${\r\n        date.getMonth() < 9 ? `0${date.getMonth()+1}` : date.getMonth()+1\r\n    }.${\r\n        date.getFullYear()\r\n    } ${\r\n        date.getHours() < 10 ? `0${date.getHours()}` : date.getHours()\r\n    }:${\r\n        date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes()\r\n    }`\r\n\r\n    const handleChangeStatus = () => {\r\n        props.changeTask(task.id, task.isDone, task.title)\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        props.deleteTask(props.taskId)\r\n    }\r\n\r\n    return (\r\n        <ListItemMui role={undefined}>\r\n            <ListItemIconMui\r\n                onChange={handleChangeStatus}\r\n            >\r\n                <CheckboxMui\r\n                    edge=\"start\"\r\n                    checked={task.isDone}\r\n                    tabIndex={-1}\r\n                    disableRipple\r\n                    inputProps={{'aria-labelledby': labelId}}\r\n                />\r\n            </ListItemIconMui>\r\n            <ListItemTextMui id={labelId}\r\n                             primary={task.title}\r\n                             secondary={`${dateStr} - ${userById(props.users, task.author) && userById(props.users, task.author).nickname}`}\r\n            />\r\n            {task.author === props.myId && (\r\n                <ListItemSecondaryActionMui>\r\n                    <IconButtonMui\r\n                        onClick={handleDelete}\r\n                        edge=\"end\" aria-label=\"comments\">\r\n                        <DeleteOutlineIconMui/>\r\n                    </IconButtonMui>\r\n                </ListItemSecondaryActionMui>\r\n            )}\r\n        </ListItemMui>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.users.users,\r\n        tasks: state.tasks.tasks,\r\n        myId: state.auth.id\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    deleteTask: (taskId: number) => void\r\n    changeTask: (taskId: number, status: boolean, title: string) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    deleteTask,\r\n    changeTask\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)","import React, {useEffect, useMemo} from 'react'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ContainerMui from \"@material-ui/core/Container\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\"\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {getTasks, setCountOfShownTasks, setFetching} from \"../../redux/tasksReducer\"\r\nimport {TaskType} from \"../../types/types\"\r\nimport {filterByDate, filterByStatus} from \"../../utils/tasksFilters\"\r\nimport Task from \"./Task/Task\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxWidth: 600,\r\n            backgroundColor: theme.palette.background.paper,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n        itemSecondaryText: {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n        },\r\n    }),\r\n)\r\n\r\nconst TasksList: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.usersIsFetching\r\n            ? props.setFetching(true)\r\n            : props.selectedProjectId !== null && props.getTasks([props.selectedProjectId], null)\r\n    }, [props.usersIsFetching])\r\n\r\n    /*useEffect(() => {\r\n        props.selectedProjectId !== null && props.getTasks([props.selectedProjectId], null)\r\n}, [props.selectedProjectId])*/\r\n\r\n    const classes = useStyles();\r\n\r\n    let tasksWithClientSideData = props.tasks.filter(\r\n        t => !props.tasksOnClient.deleted.filter(\r\n            item => item === t.id\r\n        ).length\r\n    )\r\n\r\n    let filteredTasks = tasksWithClientSideData.filter((t) => {\r\n        let statusFilter = props.filter.status !== null ? t.isDone === props.filter.status : true\r\n        let usersFilter = props.filter.userIds && props.filter.userIds.length > 0 ? props.filter.userIds.filter(id => id === t.author).length > 0 : true\r\n        let contentFilter = props.filter.content ? t.title.match(new RegExp(props.filter.content, 'gi')) : true\r\n        return statusFilter && usersFilter && contentFilter\r\n    })\r\n\r\n    filteredTasks = filteredTasks.sort((a: TaskType, b: TaskType): number => {\r\n        let sortResultByStatus = filterByStatus(a, b, props.sort.firstCompleted)\r\n        let sortResultByDate = filterByDate(a, b, props.sort.firstNew)\r\n\r\n        if (sortResultByStatus !== 0) return sortResultByStatus\r\n        else return sortResultByDate\r\n    })\r\n\r\n    useEffect(()=>{\r\n        props.setCountOfShownTasks(filteredTasks.length)\r\n    },[filteredTasks])\r\n\r\n    return (\r\n        <ContainerMui maxWidth={\"sm\"}>\r\n            <ListMui className={classes.root}>\r\n                {\r\n                    props.isFetching && props.isAuth\r\n                        ? <CircularProgress className={classes.progress} size={50}/>\r\n                        : props.isAuth && filteredTasks.map(item => <Task key={item.id} taskId={item.id}/>)\r\n                }\r\n            </ListMui>\r\n        </ContainerMui>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.tasks.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        usersIsFetching: state.users.isFetching,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        tasks: state.tasks.tasks,\r\n        filter: state.tasks.filter,\r\n        sort: state.tasks.sort,\r\n        tasksOnClient: state.clientSideDb.clientSideData.tasks\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFetching: (isFetching: boolean) => void,\r\n    getTasks: (projectIds: Array<number> | null, userIds: Array<number> | null) => void\r\n    setCountOfShownTasks: (countOfShownTasks: number) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFetching,\r\n    getTasks,\r\n    setCountOfShownTasks\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksList)","import {TaskType} from \"../types/types\"\r\n\r\nexport const filterByStatus = (a: TaskType, b: TaskType, firstCompleted: boolean | null | undefined) => {\r\n    if (firstCompleted !== null) {\r\n        if (firstCompleted === true) {\r\n            if (a.isDone === b.isDone) return 0\r\n            else if (a.isDone > b.isDone) return -1\r\n            else return 1\r\n        }\r\n        else {\r\n            if (a.isDone === b.isDone) return 0\r\n            else if (a.isDone < b.isDone) return -1\r\n            else return 1\r\n        }\r\n    } else return 0\r\n}\r\n\r\nexport const filterByDate = (a: TaskType, b: TaskType, firstNew: boolean | null | undefined) => {\r\n    const dateDiff = parseInt(a.date) - parseInt(b.date)\r\n    if (firstNew === true || null) return dateDiff * -1\r\n    else return dateDiff\r\n}","import React from 'react';\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {login, setLoginErrorMessage, showLoginForm} from \"../../redux/authReducer\"\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport {Formik, Form, Field} from 'formik';\r\nimport {Button, LinearProgress} from '@material-ui/core';\r\nimport {TextField} from 'formik-material-ui';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport {Typography} from \"@material-ui/core\"\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport {CircularProgress} from \"@material-ui/core\"\r\nimport {isEmail} from \"../../validators/validators\"\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\"\r\n\r\ntype Values = {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\nconst LoginForm: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const handleClose = () => {\r\n        props.showLoginForm(false)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={true} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <Formik\r\n                    initialValues={{\r\n                        email: '',\r\n                        password: '',\r\n                    }}\r\n                    validate={values => {\r\n                        const errors: Partial<Values> = {}\r\n\r\n                        if (!values.email) errors.email = 'Обязательно для заполнения'\r\n                        else if (!isEmail(values.email)) errors.email = 'Неправильный формат адреса'\r\n\r\n                        if (!values.password) errors.password = 'Обязательно для заполнения'\r\n\r\n                        return errors;\r\n                    }}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        setTimeout(async () => {\r\n                            props.setLoginErrorMessage(null)\r\n                            await props.login(values.email, values.password)\r\n                            setSubmitting(false);\r\n                        }, 0);\r\n                    }}\r\n                >\r\n                    {({submitForm, isSubmitting}) => (\r\n                        <Form>\r\n                            <DialogTitle id=\"form-dialog-title\">Авторизация</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    <Typography variant='caption'>\r\n                                        test user data. email: 'testuser@email.com' password: 'testuser_pass'\r\n                                    </Typography>\r\n                                </DialogContentText>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    name=\"email\"\r\n                                    autoFocus\r\n                                    margin=\"dense\"\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    type=\"email\"\r\n                                    fullWidth\r\n                                />\r\n                                <br/>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    name=\"password\"\r\n                                    margin=\"dense\"\r\n                                    id=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    fullWidth\r\n                                />\r\n                                <br/>\r\n                            </DialogContent>\r\n                            {\r\n                                props.loginErrorMessage && <DialogContent>\r\n                                    <FormHelperText id=\"my-helper-text\" error={true}>\r\n                                        {props.loginErrorMessage}\r\n                                    </FormHelperText>\r\n                                </DialogContent>\r\n                            }\r\n                            <DialogActions>\r\n                                <Button\r\n                                    onClick={submitForm}\r\n                                    color=\"primary\"\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                    Войти\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={handleClose}\r\n                                    color=\"primary\"\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                    Отмена\r\n                                </Button>\r\n                            </ DialogActions>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        loginErrorMessage: state.auth.loginErrorMessage\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    showLoginForm: (loginFormShown: boolean) => void\r\n    login: (email: string, password: string) => void\r\n    setLoginErrorMessage: (loginErrorMessage: string | null) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    showLoginForm,\r\n    login,\r\n    setLoginErrorMessage\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm)","export const isEmail = (value: string): string =>\r\n    /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Неправильный формат адреса' : ''","import './App.css'\r\nimport React, {useCallback, useEffect} from 'react'\r\nimport * as Api from '../src/api/api'\r\nimport store, {AppStateType} from \"./redux/store\"\r\nimport {getCounter} from \"./utils/universalCounter\"\r\nimport {login, logout} from './redux/authReducer'\r\nimport {getProjects} from \"./redux/projectsReducer\"\r\nimport {getUsers} from \"./redux/usersReducer\"\r\nimport {getTasks} from \"./redux/tasksReducer\"\r\nimport {makeStyles, useTheme, Theme, createStyles} from '@material-ui/core/styles'\r\nimport AppBarMui from '@material-ui/core/AppBar'\r\nimport CssBaselineMui from '@material-ui/core/CssBaseline'\r\nimport DividerMui from '@material-ui/core/Divider'\r\nimport DrawerMui from '@material-ui/core/Drawer'\r\nimport HiddenMui from '@material-ui/core/Hidden'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport ToolbarMui from '@material-ui/core/Toolbar'\r\nimport MenuIconMui from '@material-ui/icons/Menu'\r\nimport Menu from \"./components/Menu/Menu\"\r\nimport AppBarContent from \"./components/AppBarContent/AppBarContent\"\r\nimport FilterWrapper from \"./components/FilterData/FilterWrapper\"\r\nimport TasksList from \"./components/TasksList/TasksList\"\r\nimport {connect} from \"react-redux\"\r\nimport {CircularProgress} from \"@material-ui/core\"\r\nimport Backdrop from \"@material-ui/core/Backdrop\"\r\nimport {appInitializing} from \"./redux/appReducer\"\r\nimport LoginForm from \"./components/LoginForm/LoginForm\"\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        drawer: {\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: drawerWidth,\r\n                flexShrink: 0,\r\n            },\r\n        },\r\n        appBar: {\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: `calc(100% - ${drawerWidth}px)`,\r\n                marginLeft: drawerWidth,\r\n            },\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n        toolbar: theme.mixins.toolbar,\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(3),\r\n        },\r\n        backdrop: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            color: '#fff',\r\n        },\r\n    }),\r\n);\r\n\r\nconst App: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    /*********************************************\r\n     * Отладочный блок\r\n     * *******************************************/\r\n    console.log(`Component \"App\" was drawed`)\r\n    /*********************************************\r\n     * Конец отладочного блока\r\n     * *******************************************/\r\n\r\n    useEffect( () => {\r\n        props.appInitializing()\r\n    },[])\r\n\r\n// @ts-ignore\r\n    window.api = Api\r\n// @ts-ignore\r\n    window.counter = getCounter\r\n// @ts-ignore\r\n    window.dispatch = store.dispatch\r\n// @ts-ignore\r\n    window.thunk = {}\r\n// @ts-ignore\r\n    window.thunk.login = login\r\n// @ts-ignore\r\n    window.thunk.logout = logout\r\n// @ts-ignore\r\n    window.thunk.getProjects = getProjects\r\n// @ts-ignore\r\n    window.thunk.getUsers = getUsers\r\n// @ts-ignore\r\n    window.thunk.getTasks = getTasks\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false)\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n    const drawer = (\r\n        <div>\r\n            <div className={classes.toolbar}/>\r\n            <DividerMui/>\r\n            <Menu/>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Backdrop className={classes.backdrop} open={!props.isInitialized}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n            {\r\n                props.loginFormShown && <LoginForm/>\r\n            }\r\n            <CssBaselineMui/>\r\n            <AppBarMui position=\"fixed\" className={classes.appBar}>\r\n                <ToolbarMui>\r\n                    <IconButtonMui\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIconMui/>\r\n                    </IconButtonMui>\r\n                    <AppBarContent/>\r\n                </ToolbarMui>\r\n            </AppBarMui>\r\n            <nav className={classes.drawer} aria-label=\"menu folders\">\r\n                <HiddenMui smUp implementation=\"css\">\r\n                    <DrawerMui\r\n                        variant=\"temporary\"\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true,\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </DrawerMui>\r\n                </HiddenMui>\r\n                <HiddenMui xsDown implementation=\"css\">\r\n                    <DrawerMui\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </DrawerMui>\r\n                </HiddenMui>\r\n            </nav>\r\n            {\r\n                props.isAuth && <main className={classes.content}>\r\n                    <div className={classes.toolbar}/>\r\n                    <FilterWrapper/>\r\n                    <TasksList/>\r\n                </main>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isInitialized: state.app.isInitialized,\r\n        isAuth: state.auth.isAuth,\r\n        loginFormShown: state.auth.loginFormShown\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    appInitializing: () => void\r\n}\r\nconst mapDispatchToProps = {\r\n    appInitializing\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\"\r\nimport store from \"./redux/store\"\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}