{"version":3,"sources":["redux/clientSideApiReducer.ts","utils/arrayToStringArguments.ts","api/api.ts","exceptions/exceptions.ts","redux/authReducer.ts","redux/appReducer.ts","redux/projectsReducer.ts","redux/usersReducer.ts","utils/tasksFilters.ts","redux/tasksReducer.ts","redux/store.ts","serviceWorker.ts","components/Menu/Projects/Projects.tsx","components/Menu/Users/Users.tsx","components/Menu/Menu.tsx","components/LoginForm/LoginForm.tsx","validators/validators.tsx","components/BackdropPreloader/BackdropPreloader.tsx","components/AppTopBar/AppBarContent/AppBarContent.tsx","components/AppTopBar/Tabs/Tabs.tsx","components/common/HideOnScroll/HideOnScroll.tsx","components/AppTopBar/AppTopBar.tsx","utils/wrapStringForTextarea.ts","components/Main/TasksList/Task/Task.tsx","utils/dateHelper.ts","components/Main/TasksList/NewTask/NewTask.tsx","components/Main/TasksList/TasksList.tsx","components/Main/FilterData/FilterRow/FilterRow.tsx","components/Main/FilterData/CombinedSort/CombinedSort.tsx","components/Main/FilterData/ByStatusFilter/ByStatusFilter.tsx","components/Main/FilterData/ByUsersFilter/ByUsersFilter.tsx","components/Main/FilterData/ByContentFilter/ByContentFilter.tsx","components/Main/FilterData/FilterWrapper.tsx","components/Main/Main.tsx","App.tsx","index.tsx"],"names":["initialState","clientSideData","users","items","deleted","authData","projectsToUsers","projects","tasks","actions","tableName","itemId","type","item","addIdToDeleted","dispatch","a","addNewItem","deleteItem","clientSideApiReducer","state","action","filter","id","arrayToStringArguments","argName","argArray","map","arg","toString","replace","instance","axios","create","withCredentials","baseURL","headers","authAPI","email","password","get","then","response","data","usersAPI","setOfUserIds","length","setOfProjectIds","projectsAPI","tasksAPI","task","post","AuthorizationFailedException","message","this","nickname","isAuth","loginFormShown","loginErrorMessage","login","extraData","Cookies","set","showLoginForm","ROUTE","ROOT","MY_TASKS","USER_TASKS","PAGE_404","isInitialized","errors","route","newError","appReducer","isFetching","selectedProjectId","setSelectedProjectId","projectsReducer","selectedUserId","setSelectedUserId","setUsers","usersReducer","sortByStatus","b","firstCompleted","isDone","sortByDate","firstNew","dateDiff","date","filteredTasks","userIds","status","content","sort","countOfShownTasks","idCounter","addNewTaskInProcess","taskId","title","inProgress","getTasks","projectIds","getState","tasksOnClient","clientSideDb","app","tasksWithClientSideData","t","concat","project","filterTasks","setFilter","rewrite","undefined","setSort","setTasks","statusFilter","usersFilter","author","contentFilter","match","RegExp","sortResultByStatus","sortResultByDate","selectMyTasks","myId","auth","tasksReducer","changeTaskId","findIndex","rootReducer","combineReducers","api","authReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Boolean","location","hostname","useStyles","makeStyles","theme","createStyles","root","display","flexDirection","progress","alignSelf","margin","spacing","nested","paddingLeft","mapDispatchToProps","getProjects","p","projectId","setProjects","connect","props","classes","React","useState","open","setOpen","useEffect","className","ListItem","button","onClick","ListItemIcon","ListItemText","primary","primaryTypographyProps","variant","CircularProgress","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","key","to","NavLink","projectName","getUsersByProjectIds","u","userId","getUsersByIds","withRouter","locationPathName","history","pathname","width","maxWidth","backgroundColor","palette","background","paper","verticalSpacing","alignItems","padding","justifyContent","Menu","subheader","ListSubheader","setLoginErrorMessage","handleClose","Dialog","onClose","initialValues","validate","values","value","test","onSubmit","setSubmitting","setTimeout","touched","handleChange","handleBlur","handleSubmit","isSubmitting","DialogTitle","DialogContent","DialogContentText","Typography","FormControl","fullWidth","error","InputLabel","htmlFor","Input","name","onChange","onBlur","FormHelperText","DialogActions","Button","color","disabled","backdrop","zIndex","drawer","BackdropPreloader","Backdrop","grow","flexGrow","breakpoints","up","sectionDesktop","sectionMobile","authorizedUserNickname__typography","marginRight","logout","remove","myNickname","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","isMobileMenuOpen","document","handleProfileMenuOpen","event","currentTarget","handleMobileMenuClose","handleMenuClose","handleLogin","renderMenu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","MenuItem","renderMobileMenu","IconButton","noWrap","edge","Tab","selected","label","href","HideOnScroll","children","trigger","useScrollTrigger","target","appear","direction","appBar","marginLeft","menuButton","mobileOpen","setMobileOpen","AppBar","position","Toolbar","aria-label","Tabs","hendleKeyDownOnTextarea","userAgent","e","ctrlKey","start","selectionStart","end","selectionEnd","slice","getEventWithWrappedString","preventDefault","blur","checkbox_cursor_default","cursor","deleteTask","changeTask","userById","authorId","projectById","taskTitle","enableReinitialize","initialTouched","InputBase","multiline","onKeyDown","navigator","taskSecondaryText","Date","getDate","getMonth","getFullYear","getHours","getMinutes","role","Checkbox","checked","tabIndex","disableRipple","secondary","ListItemSecondaryAction","textFieldWrapper_marginRight_20px","newTask","now","OutlinedInput","placeholder","fontSize","setFetching","locationPath","Container","size","rowNumber","formControl","minWidth","selectEmpty","marginTop","Select","displayEmpty","startAdornment","InputAdornment","Divider","filteredUsers","user","Autocomplete","usersIds","disableClearable","multiple","options","getOptionLabel","option","filterSelectedOptions","renderInput","params","TextField","style","noValidate","autoComplete","toolbar","mixins","Main","flexShrink","drawerPaper","appInitializing","setRoute","useTheme","pushIntoHistory","push","isRouteSet","enqueueSnackbar","useSnackbar","CssBaseline","Hidden","smUp","implementation","Drawer","anchor","ModalProps","xsDown","ReactDOM","render","StrictMode","maxSnack","getElementById","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.89c24d19.chunk.js","sourcesContent":["import {ThunkAction} from \"redux-thunk\"\r\nimport {ProjectToUserIdsMatchType, ProjectType, TaskType, UserType} from \"../types/types\"\r\nimport {InferActionsType, AppStateType} from \"./store\"\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\n/** Объединенный тип из имен подобъектов initialState.clientSideData*/\r\ntype TableNamesTypes = keyof typeof initialState.clientSideData\r\n/** Универсальный тип для объектов items*/\r\ntype ItemType = { id: number, [key: string]: any }\r\n\r\nlet initialState = {\r\n    clientSideData: {\r\n        users: {\r\n            items: [] as Array<UserType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        authData: {\r\n            items: [] as Array<UserType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        projectsToUsers: {\r\n            items: [] as Array<ProjectToUserIdsMatchType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        projects: {\r\n            items: [] as Array<ProjectType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        tasks: {\r\n            items: [] as Array<TaskType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        }\r\n    }\r\n};\r\n\r\nconst clientSideApiReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_ID_TO_DELETED\":\r\n            return {\r\n                ...state,\r\n                clientSideData: {\r\n                    ...state.clientSideData,\r\n                    [action.tableName]: {\r\n                        ...state.clientSideData[action.tableName],\r\n                        deleted: [\r\n                            ...state.clientSideData[action.tableName].deleted,\r\n                            action.itemId\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n        case \"ADD_NEW_ITEM\":\r\n            return {\r\n                ...state,\r\n                clientSideData: {\r\n                    ...state.clientSideData,\r\n                    [action.tableName]: {\r\n                        ...state.clientSideData[action.tableName],\r\n                        items: [\r\n                            ...state.clientSideData[action.tableName].items,\r\n                            action.item\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n        case \"DELETE_ITEM\":\r\n            return {\r\n                ...state,\r\n                clientSideData: {\r\n                    ...state.clientSideData,\r\n                    [action.tableName]: {\r\n                        ...state.clientSideData[action.tableName],\r\n                        items: [...state.clientSideData[action.tableName].items].filter(\r\n                            (item: ItemType) => item.id !== action.itemId\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addIdToDeleted: (tableName: TableNamesTypes, itemId: number) => ({type: 'ADD_ID_TO_DELETED', tableName, itemId} as const),\r\n    addNewItem: (tableName: TableNamesTypes, item: ItemType) => ({type: 'ADD_NEW_ITEM', tableName, item} as const),\r\n    deleteItem: (tableName: TableNamesTypes, itemId: number) => ({type: 'DELETE_ITEM', tableName, itemId} as const)\r\n}\r\n\r\n/**\r\n * Добавление ID удаленного элемента для указанной таблицы\r\n * @param {TableNamesTypes} tableName\r\n * @param {number} itemId\r\n * @return {Promise<void>}\r\n * */\r\nexport const addIdToDeleted = (tableName: TableNamesTypes, itemId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.addIdToDeleted(tableName, itemId));\r\n};\r\n\r\n/**\r\n * Добавление элементы в указанную таблицу\r\n * @param {TableNamesTypes} tableName\r\n * @param {ItemType} item\r\n * @return {Promise<void>}\r\n * */\r\nexport const addNewItem = (tableName: TableNamesTypes, item: ItemType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.addNewItem(tableName, item));\r\n};\r\n\r\n/**\r\n * Удаление элемента из указанной таблицы\r\n * @param {TableNamesTypes} tableName\r\n * @param {number} itemId\r\n * @return {Promise<void>}\r\n * */\r\nexport const deleteItem = (tableName: TableNamesTypes, itemId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.deleteItem(tableName, itemId));\r\n};\r\n\r\nexport default clientSideApiReducer","/**\r\n * Преобразует переданный массив параметров в сегмент строки для использования в GET-запросах.\r\n * @param {string} argName - Имя параметра.\r\n * @param {Array<number | string> | null} argArray - Массив значений параметра. Если передан null, возвращается пустая строка.\r\n * @return {string} Строка из пар имя_параметра=значение_параметра.\r\n */\r\nexport const arrayToStringArguments = (argName: string, argArray: Array<number | string> | null) =>\r\n    argArray\r\n        ? argArray.map((arg) => `${argName}=${arg}&`).toString().replace(/,/g,'')\r\n        : \"\"","import axios from 'axios'\r\nimport {AuthDataType, ProjectToUserIdsMatchType, ProjectType, TaskType, UserType} from \"../types/types\"\r\nimport {arrayToStringArguments} from \"../utils/arrayToStringArguments\"\r\n\r\n/**\r\n * Преднастроенный экземпляр axios.\r\n * */\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://my-json-server.typicode.com/genekomarov/task-manager_mui',\r\n    headers: {}\r\n})\r\n\r\n/**\r\n * Авторизация.\r\n * */\r\nexport const authAPI = {\r\n    auth: (email: string, password: string) => {\r\n        return instance.get<Array<AuthDataType>>(`/authData?email=${email}&password=${password}`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\n/**\r\n * Работа с пользователями.\r\n * */\r\nexport const usersAPI = {\r\n\r\n    /**\r\n     * Получение набора пользователей по их ID.\r\n     * @param {Array<number>} setOfUserIds - Набор ID пользователей.\r\n     * @return {Promise<Array<UserType>> | []} Набор пользователей.\r\n     * */\r\n    getUsersByIds: (setOfUserIds: Array<number>) =>\r\n        setOfUserIds.length\r\n            ? instance.get<Array<UserType>>(`/users?${arrayToStringArguments(\"id\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    /**\r\n     * Получение набора соответствий записей из таблиц \"projects\" и \"users\" по набору ID проектов.\r\n     * @param {Array<number>} setOfProjectIds - Набор ID проектов.\r\n     * @return {Promise<Array<ProjectToUserIdsMatchType>> | []} - Набор соответствий.\r\n     * */\r\n    getUserIdsByProjectIds: (setOfProjectIds: Array<number>) =>\r\n        setOfProjectIds.length\r\n            ? instance.get<Array<ProjectToUserIdsMatchType>>(\r\n                `/projects-to-users?${arrayToStringArguments(\"projectId\", setOfProjectIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    /**\r\n     * Добавление пользователя.\r\n     * Метод не реализован.\r\n     * */\r\n    addNewUser: () => console.error(\"method 'addNewUser' is not implemented\"),\r\n\r\n    /**\r\n     * Изменение пользователя.\r\n     * Метод не реализован.\r\n     * */\r\n    changeUser: () => console.error(\"method 'changeUser' is not implemented\"),\r\n\r\n    /**\r\n     * Удаление пользователя.\r\n     * Метод не реализован.\r\n     * */\r\n    deleteUser: () => console.error(\"method 'deleteUser' is not implemented\")\r\n}\r\n\r\n/**\r\n * Работа с проектами.\r\n * */\r\nexport const projectsAPI = {\r\n\r\n    /**\r\n     * Получение набора проектов по их ID.\r\n     * @param {Array<number>} setOfProjectIds - Набор ID проектов.\r\n     * @return {Promise<Array<ProjectType>> | []} Набор проектов.\r\n     * */\r\n    getProjectsByIds: (setOfProjectIds: Array<number>) =>\r\n        setOfProjectIds.length\r\n            ? instance.get<Array<ProjectType>>(`/projects?${arrayToStringArguments(\"id\", setOfProjectIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    /**\r\n     * Получение набора соответствий записей таблиц \"projects\" и \"users\" по набору ID пользователей.\r\n     * @param {Array<number>} setOfUserIds - Набор ID пользователей.\r\n     * @return {Promise<Array<ProjectToUserIdsMatchType>> | []} - Набор соответствий.\r\n     * */\r\n    getProjectIdsByUserIds: (setOfUserIds: Array<number>) =>\r\n        setOfUserIds.length\r\n            ? instance.get<Array<ProjectToUserIdsMatchType>>(\r\n                `/projects-to-users?${arrayToStringArguments(\"userId\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    /**\r\n     * Добавление проекта.\r\n     * Метод не реализован.\r\n     * */\r\n    addNewProject: () => console.error(\"method 'addNewProject' is not implemented\"),\r\n\r\n    /**\r\n     * Изменение проекта.\r\n     * Метод не реализован.\r\n     * */\r\n    changeProject: () => console.error(\"method 'changeProject' is not implemented\"),\r\n\r\n    /**\r\n     * Удаление проекта.\r\n     * Метод не реализован.\r\n     * */\r\n    deleteProject: () => console.error(\"method 'deleteProject' is not implemented\")\r\n}\r\n\r\n/**\r\n * Работа с задачами.\r\n * */\r\nexport const tasksAPI = {\r\n\r\n    /**\r\n     * Получение набора задач по ID проектов и/или пользователей.\r\n     * @param {Array<number> | null} setOfProjectIds - Набор ID проектов.\r\n     * @param {Array<number> | null} setOfUserIds - Набор ID пользователей.\r\n     * @return {Promise<Array<TaskType>> | []} Набор задач.\r\n     * */\r\n    getTasksByProjectOrUserIds: (setOfProjectIds: Array<number> | null, setOfUserIds: Array<number> | null) =>\r\n        setOfProjectIds || setOfUserIds\r\n            ? instance.get<Array<TaskType>>(\r\n                `/tasks?${arrayToStringArguments(\"project\", setOfProjectIds)}${arrayToStringArguments(\"author\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    /**\r\n     * Добавление задами.\r\n     * @param {TaskType} task - Объект задачи.\r\n     * @return {Promise<any>} Ответ сервера. Не имеет значения, так как пока не используется в проекте.\r\n     * */\r\n    addNewTask: (task: TaskType) =>\r\n        instance.post<TaskType>(`/tasks`, task)\r\n            .then(response => response.data),\r\n\r\n    /**\r\n     * Изменение задами.\r\n     * @param {number} taskId - ID задачи.\r\n     * @param {string} title - Заголовок задачи.\r\n     * @param {boolean} isDone - Статус задачи.\r\n     * @return {Promise<any>} Ответ сервера. Не имеет значения, так как пока не используется в проекте.\r\n     * */\r\n    changeTask: (taskId: number, title: string, isDone: boolean) =>\r\n        instance.patch<TaskType>(`/tasks/${taskId}`, {title, isDone})\r\n            .then(response => response.data),\r\n\r\n    /**\r\n     * Удаление задами.\r\n     * @param {number} taskId - ID задачи.\r\n     * @return {Promise<any>} Ответ сервера. Не имеет значения, так как пока не используется в проекте.\r\n     * */\r\n    deleteTask: (taskId: number) =>\r\n        instance.delete<TaskType>(`/tasks/${taskId}`)\r\n            .then(response => response.data),\r\n}\r\n\r\n","/**\r\n * Исключение ошибки авторизации.\r\n * */\r\nexport class AuthorizationFailedException {\r\n    message: string;\r\n    constructor () {\r\n        this.message = `Авторизация не удалась`\r\n    }\r\n}","import {ThunkAction} from \"redux-thunk\"\r\nimport {InferActionsType, AppStateType} from \"./store\"\r\nimport {authAPI, usersAPI} from \"../api/api\"\r\nimport {AuthorizationFailedException} from \"../exceptions/exceptions\"\r\nimport Cookies from 'js-cookie'\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    nickname: null as string | null,\r\n    isAuth: false,\r\n    loginFormShown: false,\r\n    loginErrorMessage: null as string | null\r\n};\r\n\r\nconst clientSideApiReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                id: action.id,\r\n                email: action.email,\r\n                nickname: action.nickname,\r\n                isAuth: action.isAuth\r\n            }\r\n        case \"auth/SHOW_LOGIN_FORM\":\r\n            return {\r\n                ...state,\r\n                loginFormShown: action.loginFormShown\r\n            }\r\n            case \"auth/SET_LOGIN_ERROR_MESSAGE\":\r\n                return {\r\n                    ...state,\r\n                    loginErrorMessage: action.loginErrorMessage\r\n                }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUserData: (\r\n        id: number | null,\r\n        email: string | null,\r\n        nickname: string | null,\r\n        isAuth: boolean\r\n    ) => ({type: 'auth/SET_USER_DATA', id, email, nickname, isAuth} as const),\r\n    showLoginForm: (loginFormShown: boolean) => ({type: 'auth/SHOW_LOGIN_FORM', loginFormShown} as const),\r\n    setLoginErrorMessage: (loginErrorMessage: string | null) => ({type: 'auth/SET_LOGIN_ERROR_MESSAGE', loginErrorMessage} as const)\r\n}\r\n\r\n/**\r\n * Авторизация пользователя\r\n * @param {string} email\r\n * @param {string} password\r\n * @return {Promise<void>}\r\n * */\r\nexport const login = (email: string, password: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let authData = await authAPI.auth(email, password)\r\n        if (authData.length === 0) throw new AuthorizationFailedException()\r\n        let extraData = await usersAPI.getUsersByIds([authData[0].id])\r\n        if (authData.length === 0) throw new AuthorizationFailedException()\r\n        dispatch(actions.setUserData(authData[0].id, authData[0].email, extraData[0].nickname, true))\r\n        dispatch(actions.showLoginForm(false))\r\n        dispatch(actions.setLoginErrorMessage(null))\r\n        Cookies.set('email',  email)\r\n        Cookies.set('password', password)\r\n    }\r\n    catch (e) {\r\n        dispatch(actions.setLoginErrorMessage('Неправильно введены email или password!'))\r\n    }\r\n}\r\n\r\n/**\r\n * Выход пользователя\r\n * @return {Promise<void>}\r\n * */\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    Cookies.remove('email')\r\n    Cookies.remove('password')\r\n    dispatch(actions.setUserData(null, null, null, false))\r\n}\r\n\r\n/**\r\n * Показывает форму логина\r\n * @param {boolean} loginFormShown\r\n * @return {Promise<void>}\r\n * */\r\nexport const showLoginForm = (loginFormShown: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.showLoginForm(loginFormShown))\r\n}\r\n\r\n/**\r\n * Устанавливает ошибку логина\r\n * @param {string | null} loginErrorMessage\r\n * @return {Promise<void>}\r\n * */\r\nexport const setLoginErrorMessage = (loginErrorMessage: string | null): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setLoginErrorMessage(loginErrorMessage))\r\n}\r\n\r\nexport default clientSideApiReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {InferActionsType, AppStateType} from \"./store\"\r\nimport {login, showLoginForm} from \"./authReducer\"\r\nimport Cookies from 'js-cookie'\r\n\r\n// Пути адреса страницы\r\nexport type RouteType = keyof typeof ROUTE\r\nexport const ROUTE = {\r\n    ROOT: '/',\r\n    MY_TASKS: '/my-tasks',\r\n    USER_TASKS: '/user',\r\n    PAGE_404: '/404'\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nlet initialState = {\r\n    isInitialized: false,\r\n    errors: [] as Array<string>,\r\n    route: ROUTE.ROOT\r\n};\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"app/SET_INITIALIZED\":\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        case \"app/ADD_ERROR\":\r\n            return {\r\n                ...state,\r\n                errors: [\r\n                    ...state.errors,\r\n                    action.message\r\n                ]\r\n            }\r\n        case \"app/SET_ROUTE\":\r\n            return {\r\n                ...state,\r\n                route: action.route\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setInitialized: (isInitialized: boolean) => ({type: 'app/SET_INITIALIZED', isInitialized} as const),\r\n    newError: (message: string) => ({type: 'app/ADD_ERROR', message} as const),\r\n    setRoute: (route: string) => ({type: 'app/SET_ROUTE', route} as const)\r\n}\r\n\r\n/**\r\n * Инициализация приложения\r\n * @return {Promise<void>}\r\n * */\r\nexport const appInitializing = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        let email = Cookies.get('email')\r\n        let password = Cookies.get('password')\r\n        if (email && password)\r\n            await dispatch(login(email, password))\r\n        else {\r\n            dispatch(showLoginForm(true))\r\n        }\r\n        dispatch(actions.setInitialized(true))\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка инициализации'))\r\n    }\r\n}\r\n\r\n/**\r\n * Установка ошибки\r\n * @param {string} message - Текст ошибки\r\n * @return {Promise<void>}\r\n * */\r\nexport const newError = (message: string): ThunkType => async (dispatch) => {\r\n    dispatch(actions.newError(message))\r\n}\r\n\r\n/**\r\n * Установка текущего адреса\r\n * @param {string} route - Адрес страницы\r\n * @return {Promise<void>}\r\n * */\r\nexport const setRoute = (route: string): ThunkType => async (dispatch) => {\r\n    let key: keyof typeof ROUTE\r\n    for (key in ROUTE)\r\n        if (ROUTE[key] === route) {\r\n            dispatch(actions.setRoute(route))\r\n            break\r\n        } else dispatch(actions.setRoute('404'))\r\n}\r\n\r\nexport default appReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {InferActionsType, AppStateType} from \"./store\"\r\nimport {projectsAPI} from \"../api/api\"\r\nimport {ProjectToUserIdsMatchType, ProjectType} from \"../types/types\"\r\nimport {newError} from \"./appReducer\"\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nlet initialState = {\r\n    projects: [] as Array<ProjectType>,\r\n    isFetching: false,\r\n    selectedProjectId: null as number | null\r\n};\r\n\r\nconst projectsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'projects/SET_PROJECTS':\r\n            return {\r\n                ...state,\r\n                projects: action.projects,\r\n            }\r\n        case \"projects/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"projects/SET_SELECTED_PROJECT_ID\":\r\n            return {\r\n                ...state,\r\n                selectedProjectId: action.selectedProjectId\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setProjects: (projects: Array<ProjectType>) => ({type: 'projects/SET_PROJECTS', projects} as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'projects/SET_FETCHING', isFetching} as const),\r\n    setSelectedProjectId: (selectedProjectId: number | null) => ({type: 'projects/SET_SELECTED_PROJECT_ID', selectedProjectId} as const),\r\n}\r\n\r\n/**\r\n * Получение проектов для указанного списка ID пользователей\r\n * @param {Array<number>} userIds\r\n * @return {Promise<void>}\r\n * */\r\nexport const getProjects = (userIds: Array<number>): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.setFetching(true))\r\n        let projectIds: Array<ProjectToUserIdsMatchType> = await projectsAPI.getProjectIdsByUserIds(userIds)\r\n        let projects: Array<ProjectType> = await projectsAPI.getProjectsByIds(projectIds.map((p) => p.projectId))\r\n        dispatch(actions.setProjects(projects))\r\n        dispatch(actions.setSelectedProjectId(projects[0].id))\r\n        dispatch(actions.setFetching(false))\r\n    }\r\n    catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка загрузки проектов'))\r\n    }\r\n}\r\n\r\n/**\r\n * Установка списка проектов\r\n * @param {Array<ProjectType>} projects\r\n * @return {Promise<void>}\r\n * */\r\nexport const setProjects = (projects: Array<ProjectType>): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setProjects(projects))\r\n}\r\n\r\n/**\r\n * Установка флага получения данных\r\n * @param {boolean} isFetching\r\n * @return {Promise<void>}\r\n * */\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\n/**\r\n * Установка значения ID выбранного проекта\r\n * @param {number} selectedProjectId\r\n * @return {Promise<void>}\r\n * */\r\nexport const setSelectedProjectId = (selectedProjectId: number | null): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSelectedProjectId(selectedProjectId))\r\n}\r\n\r\nexport default projectsReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {InferActionsType, AppStateType} from \"./store\"\r\nimport {usersAPI} from \"../api/api\"\r\nimport {ProjectToUserIdsMatchType, UserType} from \"../types/types\"\r\nimport {newError} from \"./appReducer\"\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    isFetching: false,\r\n    selectedUserId: null as number | null\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"users/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"users/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"users/SET_SELECTED_USER_ID\":\r\n            return {\r\n                ...state,\r\n                selectedUserId: action.selectedUserId\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUsers: (users: Array<UserType>) => ({type: 'users/SET_USERS', users} as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'users/SET_FETCHING', isFetching} as const),\r\n    setSelectedUserId: (selectedUserId: number | null) => ({type: 'users/SET_SELECTED_USER_ID', selectedUserId} as const)\r\n}\r\n\r\n/**\r\n * Получение пользователей для указанного списка ID проектов\r\n * @param {Array<number>} projectIds\r\n * @return {Promise<void>}\r\n * */\r\nexport const getUsersByProjectIds = (projectIds: Array<number>): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.setFetching(true))\r\n        let userIds: Array<ProjectToUserIdsMatchType> = await usersAPI.getUserIdsByProjectIds(projectIds)\r\n        let users: Array<UserType> = await usersAPI.getUsersByIds(userIds.map((u) => u.userId))\r\n        await dispatch(setUsers(users))\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка загрузки команды пользователей'))\r\n    }\r\n}\r\n\r\n/**\r\n * Получение пользователей по их ID\r\n * @param {Array<number>} userIds\r\n * @return {Promise<void>}\r\n * */\r\nexport const getUsersByIds = (userIds: Array<number>): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.setFetching(true))\r\n        let users: Array<UserType> = await usersAPI.getUsersByIds(userIds)\r\n        await dispatch(setUsers(users))\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка загрузки команды пользователей'))\r\n    }\r\n}\r\n\r\n/**\r\n * Установка флага получения данных\r\n * @param {boolean} isFetching\r\n * @return {Promise<void>}\r\n * */\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\n/**\r\n * Установка значения ID выбранного проекта\r\n * @param {number | null} selectedUserId\r\n * @return {Promise<void>}\r\n * */\r\nexport const setSelectedUserId = (selectedUserId: number | null): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSelectedUserId(selectedUserId))\r\n}\r\n\r\n/**\r\n * Установка списка пользователей\r\n * @param {Array<UserType>} users\r\n * @return {Promise<void>}\r\n * */\r\nexport const setUsers = (users: Array<UserType>): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setUsers(users))\r\n    dispatch(actions.setFetching(false))\r\n}\r\n\r\nexport default usersReducer","import {TaskType} from \"../types/types\"\r\n\r\n/**\r\n * Функция для сравнения задач по параметру завершенности задачи.\r\n * Испльзуется в Callback для метода Array.prototype.sort() у списка задач\r\n *\r\n * @param {TaskType} a - Сравниваемый элемент\r\n * @param {TaskType} b - Сравниваемый элемент\r\n * @param {boolean | null | undefined} firstCompleted - Параметр сортировки\r\n * @return {number}\r\n * */\r\nexport const sortByStatus = (a: TaskType, b: TaskType, firstCompleted: boolean | null | undefined) => {\r\n    if (firstCompleted !== null) {\r\n        if (firstCompleted === true) {\r\n            if (a.isDone === b.isDone) return 0\r\n            else if (a.isDone > b.isDone) return -1\r\n            else return 1\r\n        }\r\n        else {\r\n            if (a.isDone === b.isDone) return 0\r\n            else if (a.isDone < b.isDone) return -1\r\n            else return 1\r\n        }\r\n    } else return 0\r\n}\r\n\r\n/**\r\n * Функция для сравнения задач по дате\r\n * Испльзуется в Callback для метода Array.prototype.sort() у списка задач\r\n *\r\n * @param {TaskType} a - Сравниваемый элемент\r\n * @param {TaskType} b - Сравниваемый элемент\r\n * @param {boolean | null | undefined} firstNew - Параметр сортировки\r\n * @return {number}\r\n * */\r\nexport const sortByDate = (a: TaskType, b: TaskType, firstNew: boolean | null | undefined) => {\r\n    const dateDiff = a.date - b.date\r\n    if (firstNew === true || null) return dateDiff * -1\r\n    else return dateDiff\r\n}","import {ThunkAction} from \"redux-thunk\"\r\nimport {InferActionsType, AppStateType} from \"./store\"\r\nimport {tasksAPI} from \"../api/api\"\r\nimport {TaskFilterType, TaskSortType, TaskType} from \"../types/types\"\r\nimport {addIdToDeleted, addNewItem, deleteItem} from \"./clientSideApiReducer\"\r\nimport {newError, ROUTE} from \"./appReducer\"\r\nimport {sortByDate, sortByStatus} from \"../utils/tasksFilters\"\r\nimport {setSelectedProjectId} from \"./projectsReducer\"\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nlet initialState = {\r\n    tasks: [] as Array<TaskType>,\r\n    filteredTasks: [] as Array<TaskType>,\r\n    isFetching: false,\r\n    filter: {\r\n        userIds: null as Array<number> | null,\r\n        status: null as boolean | null,\r\n        content: null as string | null,\r\n    } as TaskFilterType,\r\n    sort: {\r\n        firstCompleted: null as boolean | null,\r\n        firstNew: null as boolean | null\r\n    } as TaskSortType,\r\n    countOfShownTasks: 0,\r\n    idCounter: 1000,\r\n    addNewTaskInProcess: false\r\n};\r\n\r\nconst tasksReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"tasks/SET_TASKS\":\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            }\r\n        case \"tasks/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"tasks/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: {\r\n                    ...state.filter,\r\n                    userIds: action.filter.userIds === undefined\r\n                        ? state.filter.userIds\r\n                        : action.filter.userIds === null\r\n                            ? null\r\n                            : state.filter.userIds\r\n                                ? [...state.filter.userIds, ...action.filter.userIds]\r\n                                : [...action.filter.userIds],\r\n                    status: action.filter.status === undefined\r\n                        ? state.filter.status\r\n                        : action.filter.status,\r\n                    content: action.filter.content === undefined\r\n                        ? state.filter.content\r\n                        : action.filter.content\r\n                }\r\n            }\r\n        case \"tasks/SET_SORT\":\r\n            return {\r\n                ...state,\r\n                sort: {\r\n                    ...state.sort,\r\n                    firstCompleted: action.sort.firstCompleted === undefined\r\n                        ? state.sort.firstCompleted\r\n                        : action.sort.firstCompleted,\r\n                    firstNew: action.sort.firstNew === undefined\r\n                        ? state.sort.firstNew\r\n                        : action.sort.firstNew\r\n                }\r\n            }\r\n        case \"tasks/SET_COUNT_OF_SHOWN_TASKS\":\r\n            return {\r\n                ...state,\r\n                countOfShownTasks: action.countOfShownTasks\r\n            }\r\n        case \"tasks/DELETE_TASK\":\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks.filter(t => t.id !== action.taskId)]\r\n            }\r\n        case \"tasks/CHANGE_TASK\": {\r\n            let changeTaskId = state.tasks.findIndex(t => t.id === action.taskId)\r\n            return changeTaskId === -1\r\n                ? state\r\n                : {\r\n                    ...state,\r\n                    tasks: [\r\n                        ...state.tasks.filter(t => t.id !== action.taskId),\r\n\r\n                        {\r\n                            ...state.tasks[changeTaskId],\r\n                            isDone: action.status,\r\n                            title: action.title\r\n                        }\r\n                    ],\r\n                }\r\n        }\r\n        case \"tasks/NEW_TASK\":\r\n            return {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks,\r\n                    {\r\n                        id: action.task.id,\r\n                        project: action.task.project,\r\n                        author: action.task.author,\r\n                        date: action.task.date,\r\n                        title: action.task.title,\r\n                        isDone: action.task.isDone\r\n                    }\r\n                ],\r\n                idCounter: state.idCounter + 1\r\n            }\r\n        case \"tasks/SET_ADDING_NEW_TASK_IN_PROGRESS\":\r\n            return {\r\n                ...state,\r\n                addNewTaskInProcess: action.inProgress\r\n            }\r\n        case \"tasks/SET_FILTERED_TASKS\":\r\n            return {\r\n                ...state,\r\n                filteredTasks: action.tasks\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTasks: (tasks: Array<TaskType>) => ({type: 'tasks/SET_TASKS', tasks} as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'tasks/SET_FETCHING', isFetching} as const),\r\n    setFilter: (filter: TaskFilterType) => ({type: 'tasks/SET_FILTER', filter} as const),\r\n    setSort: (sort: TaskSortType) => ({type: 'tasks/SET_SORT', sort} as const),\r\n    setCountOfShownTasks: (countOfShownTasks: number) => ({type: 'tasks/SET_COUNT_OF_SHOWN_TASKS', countOfShownTasks} as const),\r\n    changeTask: (taskId: number, status: boolean, title: string) => ({type: 'tasks/CHANGE_TASK', taskId, status, title} as const),\r\n    deleteTask: (taskId: number) => ({type: 'tasks/DELETE_TASK', taskId} as const),\r\n    newTask: (task: TaskType) => ({type: 'tasks/NEW_TASK', task} as const),\r\n    setAddingNewTaskInProgress: (inProgress: boolean) => ({type: 'tasks/SET_ADDING_NEW_TASK_IN_PROGRESS', inProgress} as const),\r\n    setFilteredTasks: (tasks: Array<TaskType>) => ({type: 'tasks/SET_FILTERED_TASKS', tasks} as const)\r\n}\r\n\r\n/**\r\n * Получение задач для указанного списка ID проектов или пользователей\r\n * @param {Array<number> | null} projectIds\r\n * @param {Array<number> | null} userIds\r\n * @return {Promise<void>}\r\n * */\r\nexport const getTasks = (projectIds: Array<number> | null, userIds: Array<number> | null): ThunkType => async (dispatch, getState) => {\r\n\r\n    const state = getState()\r\n    const tasksOnClient = state.clientSideDb.clientSideData.tasks\r\n    const selectedProjectId = state.projects.selectedProjectId\r\n    const route = state.app.route\r\n\r\n    try {\r\n        let tasks = await tasksAPI.getTasksByProjectOrUserIds(projectIds, userIds)\r\n\r\n        // Объединение данных, полученных с сервера, с данными на стороне клиента\r\n        let tasksWithClientSideData = tasks.filter(\r\n            t => !tasksOnClient.deleted.filter(\r\n                item => item === t.id\r\n            ).length\r\n        ).concat(\r\n            route === ROUTE.ROOT\r\n                ? tasksOnClient.items.filter(item => item.project === selectedProjectId)\r\n                : tasksOnClient.items\r\n        )\r\n\r\n        dispatch(actions.setTasks(tasksWithClientSideData))\r\n        dispatch(actions.setFilter({userIds: null, status: null, content: \"\"}))\r\n        dispatch(actions.setSort({firstNew: null, firstCompleted: null}))\r\n        await dispatch(filterTasks())\r\n        dispatch(actions.setFetching(false))\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка загрузки задач'))\r\n    }\r\n}\r\n\r\n/**\r\n * Установка флага получения данных\r\n * @param {boolean} isFetching\r\n * @return {Promise<void>}\r\n * */\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\n/**\r\n * Установка фильтра\r\n * @param {TaskFilterType} filter\r\n * @param {boolean} rewrite - Флаг предварительного сброса текущего значения перед установкой нового\r\n * @return {Promise<void>}\r\n * */\r\nexport const setFilter = (filter: TaskFilterType, rewrite = false): ThunkType => async (dispatch) => {\r\n    if (rewrite) dispatch(actions.setFilter({\r\n        userIds: filter.userIds !== undefined ? null : undefined,\r\n        status: filter.status !== undefined ? null : undefined,\r\n        content: filter.content !== undefined ? null : undefined,\r\n    }))\r\n    dispatch(actions.setFilter(filter))\r\n    dispatch(filterTasks())\r\n}\r\n\r\n/**\r\n * Установка сортировки\r\n * @param {TaskSortType} sort\r\n * @return {Promise<void>}\r\n * */\r\nexport const setSort = (sort: TaskSortType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSort(sort))\r\n    dispatch(filterTasks())\r\n}\r\n\r\n/**\r\n * Установка списка задач\r\n * @param {Array<TaskType>} tasks\r\n * @return {Promise<void>}\r\n * */\r\nexport const setTasks = (tasks: Array<TaskType>): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setTasks(tasks))\r\n    await dispatch(filterTasks())\r\n    dispatch(actions.setFetching(false))\r\n}\r\n\r\n/**\r\n * Удаление задачи\r\n * @param {number} taskId\r\n * @return {Promise<void>}\r\n * */\r\nexport const deleteTask = (taskId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        // Эта строка закомментрированая, так как используется fake api\r\n        // Попытка удаления задачи, не существующей на сервере, приводит к выбросу исключения\r\n        /*let response = await tasksAPI.deleteTask(taskId)*/\r\n        dispatch(actions.deleteTask(taskId))\r\n        await dispatch(addIdToDeleted('tasks', taskId))\r\n        await dispatch(deleteItem('tasks', taskId))\r\n        dispatch(filterTasks())\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка удаления задачи'))\r\n    }\r\n}\r\n\r\n/**\r\n * Изменение задачи\r\n * @param {TaskType} task\r\n * @return {Promise<void>}\r\n * */\r\nexport const changeTask = (task: TaskType): ThunkType => async (dispatch) => {\r\n    try {\r\n        // Эта строка закомментрированая, так как используется fake api\r\n        // Попытка изменения задачи, не существующей на сервере, приводит к выбросу исключения\r\n        /*let response = await tasksAPI.changeTask(task.id, task.title, task.isDone)*/\r\n        dispatch(actions.changeTask(task.id, task.isDone, task.title))\r\n        await dispatch(addIdToDeleted('tasks', task.id))\r\n        await dispatch(deleteItem('tasks', task.id))\r\n        await dispatch(addNewItem('tasks', task))\r\n        await dispatch(filterTasks())\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка изменения задачи'))\r\n    }\r\n}\r\n\r\n/**\r\n * Добавление задачи\r\n * @param {TaskType} task\r\n * @return {Promise<void>}\r\n * */\r\nexport const newTask = (task: TaskType): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.setAddingNewTaskInProgress(true))\r\n        await tasksAPI.addNewTask(task)\r\n        dispatch(actions.newTask(task))\r\n        await dispatch(addNewItem('tasks', task))\r\n        await dispatch(filterTasks())\r\n    } catch (e) {\r\n        dispatch(newError(e.message + ' Ошибка добавления задачи'))\r\n    } finally {\r\n        dispatch(actions.setAddingNewTaskInProgress(false))\r\n    }\r\n}\r\n\r\n/**\r\n * Объединение данных сервера с данными клиента, фильтрация и сортировка\r\n * @return {Promise<void>}\r\n * */\r\nexport const filterTasks = (): ThunkType => async (dispatch, getState) => {\r\n    const state = getState()\r\n    const tasks = state.tasks.tasks\r\n    const filter = state.tasks.filter\r\n    const sort = state.tasks.sort\r\n\r\n    // Фильтрация задач\r\n    let filteredTasks = tasks.filter((t) => {\r\n        let statusFilter = filter.status !== null ? t.isDone === filter.status : true\r\n        let usersFilter = filter.userIds && filter.userIds.length > 0 ? filter.userIds.filter(id => id === t.author).length > 0 : true\r\n        let contentFilter = filter.content ? t.title.match(new RegExp(filter.content, 'gi')) : true\r\n        return statusFilter && usersFilter && contentFilter\r\n    })\r\n\r\n    // Сортировка задач\r\n    filteredTasks = filteredTasks.sort((a: TaskType, b: TaskType): number => {\r\n        let sortResultByStatus = sortByStatus(a, b, sort.firstCompleted)\r\n        let sortResultByDate = sortByDate(a, b, sort.firstNew)\r\n\r\n        if (sortResultByStatus !== 0) return sortResultByStatus\r\n        else return sortResultByDate\r\n    })\r\n\r\n    dispatch(actions.setCountOfShownTasks(filteredTasks.length))\r\n    dispatch(actions.setFilteredTasks(filteredTasks))\r\n}\r\n\r\n/**\r\n * Получение всех задачь для авторизованного пользователя\r\n * @return {Promise<void>}\r\n * */\r\nexport const selectMyTasks = (): ThunkType => async (dispatch, getState) => {\r\n    let myId = getState().auth.id\r\n    dispatch(actions.setFetching(true))\r\n    dispatch(setSelectedProjectId(null))\r\n    if (myId !== null) await dispatch(getTasks([], [myId]))\r\n    dispatch(actions.setFetching(false))\r\n}\r\n\r\nexport default tasksReducer","import {combineReducers, createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport clientSideApiReducer from \"./clientSideApiReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport projectsReducer from \"./projectsReducer\"\r\nimport usersReducer from \"./usersReducer\"\r\nimport tasksReducer from \"./tasksReducer\"\r\nimport appReducer from \"./appReducer\"\r\n\r\nlet rootReducer = combineReducers({\r\n    api: clientSideApiReducer,\r\n    auth: authReducer,\r\n    projects: projectsReducer,\r\n    users: usersReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    clientSideDb: clientSideApiReducer\r\n});\r\n\r\n// Выведение типа глобального redux state\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n// Выведение типа для объектов action\r\nexport type InferActionsType<T> = T extends { [key: string]: (...args: any[]) => infer R} ? R : never\r\n\r\n// Подключение React DevTools\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// Создание Redux store\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useEffect} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport CollapseMui from '@material-ui/core/Collapse'\r\nimport CircularProgressMui from '@material-ui/core/CircularProgress'\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess'\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore'\r\nimport AccountTreeIconMui from '@material-ui/icons/AccountTree'\r\nimport FolderIconMui from '@material-ui/icons/Folder'\r\nimport FolderOpenIconMui from '@material-ui/icons/FolderOpen'\r\nimport {AppStateType} from '../../../redux/store'\r\nimport {ProjectType, TaskFilterType, TaskSortType} from '../../../types/types'\r\nimport {getProjects, setProjects, setSelectedProjectId} from '../../../redux/projectsReducer'\r\nimport {setSelectedUserId} from '../../../redux/usersReducer'\r\nimport {setFilter, setSort} from '../../../redux/tasksReducer'\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n    }),\r\n)\r\n\r\nconst Projects: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    // Изменение списка проектов при изменении статуса авторизации\r\n    let {myId, getProjects, setProjects} = props\r\n    useEffect(() => {\r\n        myId!==null\r\n            ? getProjects([myId])\r\n            : setProjects([])\r\n    },[myId, getProjects, setProjects])\r\n\r\n    const handleCollapseList = () => {setOpen(!open)}\r\n\r\n    const handleSelectList = (selectedProjectId: number) => {\r\n        props.setSelectedProjectId(selectedProjectId)\r\n        props.setFilter({userIds: null, status: null, content: null})\r\n        props.setSort({firstCompleted: null, firstNew: null})\r\n        props.setSelectedUserId(null)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            {/*Элемент заголовка списка*/}\r\n            <ListItemMui button onClick={handleCollapseList}>\r\n                <ListItemIconMui>\r\n                    <AccountTreeIconMui/>\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary='Проекты'\r\n                    primaryTypographyProps={{variant: 'body1'}}/>\r\n                {open ? <ExpandLessMui/> : <ExpandMoreMui/>}\r\n            </ListItemMui>\r\n\r\n            {/*Список*/}\r\n            {props.isFetching && props.isAuth\r\n                ? <CircularProgressMui className={classes.progress}/>\r\n                : <CollapseMui in={open} timeout='auto' unmountOnExit>\r\n                    {props.isAuth  && props.projects.map((item) => {\r\n                        return (\r\n                            <ListMui component='div' disablePadding key={item.id}>\r\n                                <ListItemMui\r\n                                    className={classes.nested}\r\n                                    onClick={() => handleSelectList(item.id)}\r\n                                    to={'/'}\r\n                                    component={NavLink}\r\n                                >\r\n                                    <ListItemIconMui>\r\n                                        {\r\n                                            item.id === props.selectedProjectId\r\n                                                ? <FolderOpenIconMui/>\r\n                                                : <FolderIconMui/>\r\n                                        }\r\n                                    </ListItemIconMui>\r\n                                    <ListItemTextMui primary={item.projectName}/>\r\n                                </ListItemMui>\r\n                            </ListMui>\r\n                        )\r\n                    })}\r\n                </CollapseMui>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.projects.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        projects: state.projects.projects,\r\n        myId: state.auth.id,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjects: (userIds: Array<number>) => void\r\n    setProjects: (projects: Array<ProjectType>) => void\r\n    setSelectedProjectId: (selectedProjectId: number) => void\r\n    setSelectedUserId: (selectedUserId: number | null) => void\r\n    setFilter: (filter: TaskFilterType) => void\r\n    setSort: (sort: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    getProjects,\r\n    setProjects,\r\n    setSelectedProjectId,\r\n    setSelectedUserId,\r\n    setFilter,\r\n    setSort\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Projects)","import React, {useEffect} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {RouteComponentProps, withRouter} from 'react-router'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport CollapseMui from '@material-ui/core/Collapse'\r\nimport CircularProgressMui from '@material-ui/core/CircularProgress/CircularProgress'\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess'\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore'\r\nimport PeopleIconMui from '@material-ui/icons/People'\r\nimport PersonIconMui from '@material-ui/icons/Person'\r\nimport PermIdentityIconMui from '@material-ui/icons/PermIdentity'\r\nimport {AppStateType} from '../../../redux/store'\r\nimport {TaskFilterType, UserType} from '../../../types/types'\r\nimport {getUsersByIds, getUsersByProjectIds, setSelectedUserId, setUsers} from '../../../redux/usersReducer'\r\nimport {setFilter} from '../../../redux/tasksReducer'\r\nimport {ROUTE} from '../../../redux/appReducer'\r\nimport {compose} from \"redux\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n    }),\r\n)\r\n\r\nconst Users: React.FC<RouteComponentProps & MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    // Установка флага процесса загрузки при загрузке списка проектов\r\n    let {selectedProjectId, getUsersByProjectIds, setUsers, myId, getUsersByIds} = props\r\n    let locationPathName = props.history.location.pathname\r\n    useEffect(() => {\r\n        switch (locationPathName) {\r\n            case ROUTE.ROOT:\r\n                if (selectedProjectId !== null) getUsersByProjectIds([selectedProjectId])\r\n                else setUsers([])\r\n                break\r\n            case ROUTE.MY_TASKS:\r\n                if (myId !== null) getUsersByIds([myId])\r\n                else setUsers([])\r\n                break\r\n            default:\r\n                setUsers([])\r\n        }\r\n    }, [selectedProjectId, setUsers, getUsersByProjectIds, locationPathName, myId, getUsersByIds])\r\n\r\n    const handleCollapseList = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const handleSelectItem = (selectedUserId: number) => {\r\n        props.setSelectedUserId(selectedUserId)\r\n        props.setFilter({userIds: [selectedUserId], status: undefined, content: undefined}, true)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            {/*Элемент заголовка списка*/}\r\n            <ListItemMui button onClick={handleCollapseList}>\r\n                <ListItemIconMui>\r\n                    <PeopleIconMui/>\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary='Команда'\r\n                    primaryTypographyProps={{variant: 'body1'}}/>\r\n                {open ? <ExpandLessMui/> : <ExpandMoreMui/>}\r\n            </ListItemMui>\r\n\r\n            {/*Список*/}\r\n            {props.isFetching && props.isAuth\r\n                ? <CircularProgressMui className={classes.progress}/>\r\n                : <CollapseMui in={open} timeout='auto' unmountOnExit>\r\n                    {props.isAuth && props.users.map((item) => {\r\n                        return (\r\n                            <ListMui component='div' disablePadding key={item.id}>\r\n                                <ListItemMui button className={classes.nested}\r\n                                             onClick={() => handleSelectItem(item.id)}>\r\n                                    <ListItemIconMui>\r\n                                        {\r\n                                            item.id === props.selectedUserId\r\n                                                ? <PermIdentityIconMui/>\r\n                                                : <PersonIconMui/>\r\n                                        }\r\n                                    </ListItemIconMui>\r\n                                    <ListItemTextMui primary={\r\n                                        `${item.nickname} (${props.tasks.filter(t => t.author === item.id).length})`\r\n                                    }/>\r\n                                </ListItemMui>\r\n                            </ListMui>\r\n                        )\r\n                    })}\r\n                </CollapseMui>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.users.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        users: state.users.users,\r\n        selectedUserId: state.users.selectedUserId,\r\n        tasks: state.tasks.tasks,\r\n        myId: state.auth.id\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersByProjectIds: (projectIds: Array<number>) => void,\r\n    getUsersByIds: (userIds: Array<number>) => void,\r\n    setUsers: (users: Array<UserType>) => void\r\n    setSelectedUserId: (selectedUserId: number) => void,\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    getUsersByProjectIds,\r\n    getUsersByIds,\r\n    setUsers,\r\n    setSelectedUserId,\r\n    setFilter\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Users)","import React from 'react'\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\r\nimport ListSubheaderMui from '@material-ui/core/ListSubheader'\r\nimport ListMui from '@material-ui/core/List'\r\nimport DividerMui from '@material-ui/core/Divider/Divider'\r\nimport Projects from './Projects/Projects'\r\nimport Team from './Users/Users'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxWidth: 360,\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        /** Для отступа между блоками в меню*/\r\n        verticalSpacing: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: theme.spacing(2, 1),\r\n            justifyContent: 'flex-end',\r\n        },\r\n    }),\r\n)\r\n\r\nconst Menu: React.FC<any> = () => {    \r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <ListMui\r\n            component='nav'\r\n            subheader={\r\n                <ListSubheaderMui component='div'>\r\n                    Меню\r\n                </ListSubheaderMui>\r\n            }\r\n            className={classes.root}\r\n        >\r\n            <DividerMui />\r\n\r\n            {/*Список проектов*/}\r\n            <Projects/>\r\n            <div className={classes.verticalSpacing} />\r\n\r\n            {/*Список пользователей*/}\r\n            <Team/>\r\n            <DividerMui />\r\n        </ListMui>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react'\r\nimport {AppStateType} from '../../redux/store'\r\nimport {connect} from 'react-redux'\r\nimport {Formik, Form} from 'formik'\r\nimport DialogMui from '@material-ui/core/Dialog'\r\nimport ButtonMui from '@material-ui/core/Button'\r\nimport DialogTitleMui from '@material-ui/core/DialogTitle'\r\nimport DialogContentMui from '@material-ui/core/DialogContent'\r\nimport DialogContentTextMui from '@material-ui/core/DialogContentText'\r\nimport TypographyMui from '@material-ui/core/Typography'\r\nimport DialogActionsMui from '@material-ui/core/DialogActions'\r\nimport FormHelperTextMui from '@material-ui/core/FormHelperText'\r\nimport FormControlMui from '@material-ui/core/FormControl'\r\nimport InputLabelMui from '@material-ui/core/InputLabel'\r\nimport InputMui from '@material-ui/core/Input'\r\nimport {login, setLoginErrorMessage, showLoginForm} from '../../redux/authReducer'\r\nimport {isEmail} from '../../validators/validators'\r\n\r\ntype Values = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nconst LoginForm: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const handleClose = () => {\r\n        props.showLoginForm(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <DialogMui open={true} onClose={handleClose}>\r\n                <Formik\r\n                    initialValues={{\r\n                        email: '',\r\n                        password: '',\r\n                    }}\r\n                    validate={values => {\r\n                        const errors: Partial<Values> = {}\r\n\r\n                        if (!values.email) errors.email = 'Обязательно для заполнения'\r\n                        else if (!isEmail(values.email)) errors.email = 'Неправильный формат адреса'\r\n\r\n                        if (!values.password) errors.password = 'Обязательно для заполнения'\r\n\r\n                        return errors\r\n                    }}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        setTimeout(async () => {\r\n                            props.setLoginErrorMessage(null)\r\n                            await props.login(values.email, values.password)\r\n                            setSubmitting(false)\r\n                        }, 0)\r\n                    }}\r\n                >\r\n                    {({values, errors, touched, handleChange, handleBlur, handleSubmit,\r\n                          isSubmitting,}) => (\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <DialogTitleMui>Авторизация</DialogTitleMui>\r\n                            <DialogContentMui>\r\n                                <DialogContentTextMui>\r\n                                    <TypographyMui variant='caption'>\r\n                                        test user data. email: 'testuser@email.com' password: 'testuser_pass'\r\n                                    </TypographyMui>\r\n                                </DialogContentTextMui>\r\n                                <FormControlMui fullWidth error={!!errors.email && touched.email}>\r\n                                    <InputLabelMui htmlFor='email'>Email</InputLabelMui>\r\n                                    <InputMui\r\n                                        name='email'\r\n                                        type='text'\r\n                                        value={values.email}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                    {<FormHelperTextMui id='email-error'>{errors.email && touched.email && errors.email}</FormHelperTextMui>}\r\n                                </FormControlMui>\r\n                                <br/>\r\n                                <FormControlMui fullWidth error={!!errors.password && touched.password}>\r\n                                    <InputLabelMui htmlFor='password'>Password</InputLabelMui>\r\n                                    <InputMui\r\n                                        name='password'\r\n                                        type='password'\r\n                                        value={values.password}\r\n                                        onChange={handleChange}\r\n                                        onBlur={handleBlur}\r\n                                    />\r\n                                    {<FormHelperTextMui id='password-error'>{errors.email && touched.email && errors.email}</FormHelperTextMui>}\r\n                                </FormControlMui>\r\n                            </DialogContentMui>\r\n\r\n                            {/*Сообщение об ошибке*/}\r\n                            {\r\n                                props.loginErrorMessage && <DialogContentMui>\r\n                                    <FormHelperTextMui id='my-helper-text' error={true}>\r\n                                        {props.loginErrorMessage}\r\n                                    </FormHelperTextMui>\r\n                                </DialogContentMui>\r\n                            }\r\n                            <DialogActionsMui>\r\n                                <ButtonMui\r\n                                    onClick={()=>handleSubmit()}\r\n                                    color='primary'\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                    Войти\r\n                                </ButtonMui>\r\n                                <ButtonMui\r\n                                    onClick={handleClose}\r\n                                    color='primary'\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                    Отмена\r\n                                </ButtonMui>\r\n                            </ DialogActionsMui>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </DialogMui>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        loginErrorMessage: state.auth.loginErrorMessage\r\n    }\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    showLoginForm: (loginFormShown: boolean) => void\r\n    login: (email: string, password: string) => void\r\n    setLoginErrorMessage: (loginErrorMessage: string | null) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    showLoginForm,\r\n    login,\r\n    setLoginErrorMessage\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm)","/**\r\n * Валидация строки - Email.\r\n * @param {string} value - Email адрес.\r\n * @return {string} Сообщение об ошибке валидации. Пустая строка если валидация пройдена.\r\n * */\r\nexport const isEmail = (value: string): string =>\r\n    /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Неправильный формат адреса' : ''","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport CircularProgressMui from '@material-ui/core/CircularProgress'\r\nimport BackdropMui from '@material-ui/core/Backdrop'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        backdrop: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            color: '#fff',\r\n        },\r\n    }),\r\n)\r\n\r\nconst BackdropPreloader: React.FC<OwnPropsType> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n            <BackdropMui className={classes.backdrop} open={props.open}>\r\n                <CircularProgressMui color='inherit'/>\r\n            </BackdropMui>\r\n    )\r\n}\r\n\r\ntype OwnPropsType = {\r\n    open: boolean\r\n}\r\n\r\nexport default BackdropPreloader","import React, {useEffect} from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport {connect} from 'react-redux'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport TypographyMui from '@material-ui/core/Typography'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport MenuMui from '@material-ui/core/Menu'\r\nimport ButtonMui from '@material-ui/core/Button'\r\nimport AccountCircleIconMui from '@material-ui/icons/AccountCircle'\r\nimport MoreIconMui from '@material-ui/icons/MoreVert'\r\nimport {AppStateType} from '../../../redux/store'\r\nimport {logout, showLoginForm} from '../../../redux/authReducer'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        title: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n        },\r\n        sectionDesktop: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'flex',\r\n            },\r\n        },\r\n        sectionMobile: {\r\n            display: 'flex',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n        authorizedUserNickname__typography: {\r\n            marginRight: theme.spacing(2),\r\n            alignSelf: 'center',\r\n        },\r\n    }),\r\n)\r\n\r\nconst AppBarContent: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const classes = useStyles()\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\r\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null)\r\n    const isMenuOpen = Boolean(anchorEl)\r\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl)\r\n\r\n    const countOfShownTasks = props.isAuth ? props.countOfShownTasks : 0\r\n\r\n    // Изменение заголовка страницы\r\n    useEffect(()=>{\r\n        document.title = `(${countOfShownTasks}) Менеджер задач`\r\n    },[countOfShownTasks])\r\n\r\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {setAnchorEl(event.currentTarget)}\r\n\r\n    const handleMobileMenuClose = () => {setMobileMoreAnchorEl(null)}\r\n\r\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {setMobileMoreAnchorEl(event.currentTarget)}\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null)\r\n        handleMobileMenuClose()\r\n    }\r\n\r\n    const handleLogin = () => {props.showLoginForm(true)}\r\n\r\n    const handleExit = () => {\r\n        handleMenuClose()\r\n        props.logout()\r\n    }\r\n\r\n    const renderMenu = (\r\n        <MenuMui\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMenuOpen}\r\n            onClose={handleMenuClose}\r\n        >\r\n            <MenuItemMui onClick={handleExit}>Выйти</MenuItemMui>\r\n        </MenuMui>\r\n    )\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile'\r\n    const renderMobileMenu = (\r\n        <MenuMui\r\n            anchorEl={mobileMoreAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileMenuClose}\r\n        >\r\n            {\r\n                !props.isAuth ? <MenuItemMui onClick={handleLogin}>Войти</MenuItemMui>\r\n                    : <MenuItemMui onClick={handleProfileMenuOpen}>\r\n                        <IconButtonMui\r\n                            color='inherit'\r\n                        >\r\n                            <AccountCircleIconMui/>\r\n                        </IconButtonMui>\r\n                        <p>{props.myNickname}</p>\r\n                    </MenuItemMui>\r\n            }\r\n        </MenuMui>\r\n    )\r\n\r\n    return (\r\n        <>\r\n\r\n            {/*Заголовок приложениия*/}\r\n            <TypographyMui className={classes.title} variant='h6' noWrap>\r\n                {`Менеджер задач (${countOfShownTasks})`}\r\n\r\n                {/*Установка текста заголовка в название вкладки браузера*/}\r\n                {}\r\n            </TypographyMui>\r\n\r\n            <div className={classes.grow}/>\r\n\r\n            {/*Десктопный вариант отображения кнопки открытия меню*/}\r\n            {\r\n                !props.isAuth\r\n                    ?\r\n                    <div className={classes.sectionDesktop}>\r\n                        <ButtonMui color='inherit' onClick={handleLogin}>Войти</ButtonMui>\r\n                    </div>\r\n                    :\r\n                    <div className={classes.sectionDesktop}>\r\n                        <TypographyMui className={classes.authorizedUserNickname__typography}\r\n                                       variant='body1'>{props.myNickname}</TypographyMui>\r\n                        <IconButtonMui\r\n                            edge='end'\r\n                            onClick={handleProfileMenuOpen}\r\n                            color='inherit'\r\n                        >\r\n                            <AccountCircleIconMui/>\r\n                        </IconButtonMui>\r\n                    </div>\r\n            }\r\n\r\n            {/*Мобильный вариант отображения кнопки открытия меню*/}\r\n            <div className={classes.sectionMobile}>\r\n                <IconButtonMui\r\n                    onClick={handleMobileMenuOpen}\r\n                    color='inherit'\r\n                >\r\n                    <MoreIconMui/>\r\n                </IconButtonMui>\r\n            </div>\r\n            {renderMobileMenu}\r\n            {renderMenu}\r\n        </>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        countOfShownTasks: state.tasks.countOfShownTasks,\r\n        myNickname: state.auth.nickname,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: () => void,\r\n    showLoginForm: (loginFormShown: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    logout,\r\n    showLoginForm\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppBarContent)","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport TabMui from '@material-ui/core/Tab'\r\nimport {AppStateType} from '../../../redux/store'\r\nimport {TaskType} from '../../../types/types'\r\nimport {setSelectedProjectId} from '../../../redux/projectsReducer'\r\nimport {selectMyTasks, setTasks} from '../../../redux/tasksReducer'\r\nimport {ROUTE} from '../../../redux/appReducer'\r\n\r\nconst TabsPanel: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <TabMui selected={props.route === ROUTE.ROOT}\r\n                    onClick={() => props.setSelectedProjectId(props.projects[0].id)}\r\n                    label={'Задачи по проектам'} href={'/'} to={'/'}\r\n                    component={NavLink}/>\r\n            <TabMui selected={props.route === ROUTE.MY_TASKS}\r\n                    label={'Мои задачи (Все)'} href={'/my-tasks'} to={'/my-tasks'}\r\n                    component={NavLink}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        projects: state.projects.projects,\r\n        route: state.app.route\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    selectMyTasks: () => void,\r\n    setSelectedProjectId: (selectedProjectId: number | null) => void,\r\n    setTasks: (tasks: Array<TaskType>) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    selectMyTasks,\r\n    setSelectedProjectId,\r\n    setTasks\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TabsPanel)","import React from \"react\"\r\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger/useScrollTrigger\"\r\nimport Slide from \"@material-ui/core/Slide/Slide\"\r\n\r\ninterface HideOnScrollPropsType {\r\n    window?: () => Window\r\n    children: React.ReactElement\r\n}\r\n\r\nconst HideOnScroll = (props: HideOnScrollPropsType) => {\r\n    const {children, window} = props\r\n    const trigger = useScrollTrigger({target: window ? window() : undefined})\r\n\r\n    return (\r\n        <Slide appear={false} direction=\"down\" in={!trigger}>\r\n            {children}\r\n        </Slide>\r\n    );\r\n}\r\n\r\nexport default HideOnScroll","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport AppBarMui from '@material-ui/core/AppBar'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport ToolbarMui from '@material-ui/core/Toolbar'\r\nimport MenuIconMui from '@material-ui/icons/Menu'\r\nimport AppBarContent from \"./AppBarContent/AppBarContent\"\r\nimport TabsPanel from './Tabs/Tabs'\r\nimport HideOnScroll from '../common/HideOnScroll/HideOnScroll'\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst drawerWidth = 240\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBar: {\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: `calc(100% - ${drawerWidth}px)`,\r\n                marginLeft: drawerWidth,\r\n            },\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n    }),\r\n)\r\n\r\nconst AppTopBar: React.FC<MapStatePropsType> = (props) => {\r\n\r\n    const classes = useStyles()\r\n    const [mobileOpen, setMobileOpen] = React.useState(false)\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen)\r\n    }\r\n\r\n    return (\r\n        <HideOnScroll>\r\n            <AppBarMui position='fixed' className={classes.appBar}>\r\n                <ToolbarMui>\r\n                    <IconButtonMui\r\n                        color='inherit'\r\n                        aria-label='open drawer'\r\n                        edge='start'\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIconMui/>\r\n                    </IconButtonMui>\r\n\r\n                    {/*Основное содержимое верхней панели*/}\r\n                    <AppBarContent/>\r\n                </ToolbarMui>\r\n\r\n                {/*Вкладки*/}\r\n                {props.isAuth && <TabsPanel/>}\r\n            </AppBarMui>\r\n        </HideOnScroll>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AppTopBar)","import React from \"react\"\r\n\r\n/**\r\n * Переносит строку в зависимости от положения коретки у объекта события onKeyDown для текстровых полей\r\n *\r\n * @param {React.KeyboardEvent<HTMLInputElement>} e - Объект события onKeyDown\r\n * @return {React.KeyboardEvent<HTMLInputElement>} Объект события с измененным значением поля\r\n * */\r\nconst getEventWithWrappedString = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    let value = e.currentTarget.value\r\n    let start = e.currentTarget.selectionStart\r\n    let end = e.currentTarget.selectionEnd\r\n\r\n    //Формируем строку с переносами\r\n    e.currentTarget.value =\r\n        value.slice(0, start !== null ? start : undefined) + '\\n' +\r\n        value.slice(end !== null ? end : undefined, value.length)\r\n\r\n    //Устанавливам положение коретки\r\n    e.currentTarget.selectionStart = start ? start + 1 : value.length - 1\r\n    e.currentTarget.selectionEnd = start ? start + 1 : value.length - 1\r\n\r\n    return e\r\n}\r\n\r\n/**\r\n * Обработчик события onKeyDown для многострочных текстовых полей\r\n * Изменяет способ отправки формы на Ctrl+Enter для UserAgent = /Windows/\r\n *\r\n * @param {() => void} handleSubmit - обработчик события отправки формы\r\n * @param {(e: React.KeyboardEvent<HTMLInputElement>) => void} handleChange - обработчик события изменения значения поля формы\r\n * @param {string} userAgent - значение параметра navigator.userAgent\r\n * */\r\nexport const hendleKeyDownOnTextarea = (\r\n    handleSubmit: () => void,\r\n    handleChange: (e: React.KeyboardEvent<HTMLInputElement>) => void,\r\n    userAgent: string\r\n) => (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter' && !e.ctrlKey) {\r\n        if (/Windows NT/.test(userAgent)) {\r\n            handleSubmit()\r\n            e.preventDefault()\r\n            e.currentTarget.blur()\r\n        }\r\n    } else if (e.key === 'Enter' && e.ctrlKey) {\r\n        handleChange(getEventWithWrappedString(e))\r\n    }\r\n}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Form, Formik} from 'formik'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon'\r\nimport ListItemSecondaryActionMui from '@material-ui/core/ListItemSecondaryAction'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport CheckboxMui from '@material-ui/core/Checkbox'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport InputBaseMui from '@material-ui/core/InputBase'\r\nimport DeleteOutlineIconMui from '@material-ui/icons/DeleteOutline'\r\nimport {AppStateType} from '../../../../redux/store'\r\nimport {ProjectType, TaskType, UserType} from '../../../../types/types'\r\nimport {changeTask, deleteTask} from '../../../../redux/tasksReducer'\r\nimport {getDateString} from '../../../../utils/dateHelper'\r\nimport {hendleKeyDownOnTextarea} from '../../../../utils/wrapStringForTextarea'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        checkbox_cursor_default: {\r\n            cursor: 'default',\r\n        },\r\n    }),\r\n)\r\n\r\nconst Task: React.FC<MapStatePropsType & MapDispatchPropsType & OwnType> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const task: TaskType = props.task\r\n\r\n    const userById = (users: Array<UserType>, authorId: number): UserType => {\r\n        let filteredUsers = users.filter(u => u.id === authorId)\r\n        return filteredUsers[0]\r\n    }\r\n\r\n    const projectById = (projects: Array<ProjectType>, projectId: number): ProjectType => {\r\n        let filteredProjects = projects.filter(u => u.id === projectId)\r\n        return filteredProjects[0]\r\n    }\r\n\r\n    const handleChangeStatus = () => {\r\n        task.author === props.myId && props.changeTask({...task, isDone: !task.isDone, title: task.title})\r\n    }\r\n\r\n    const handleChangeTitle = (title: string) => {\r\n        task.author === props.myId && props.changeTask({...task, isDone: task.isDone, title})\r\n    }\r\n\r\n    const handleDelete = () => {props.deleteTask(task.id)}\r\n\r\n    // Содержание задачи. Если автор авторизованный пользователь, выводим редактируемое поле\r\n    const taskTitle = task.author === props.myId\r\n        ? <Formik\r\n            enableReinitialize={true}\r\n            initialTouched={{title: false}}\r\n            initialValues={{\r\n                title: task.title,\r\n            }}\r\n            onSubmit={(values, {setSubmitting}) => {\r\n                setTimeout(() => {\r\n                    if (values.title === '') values.title = task.title\r\n                    else {\r\n                        handleChangeTitle(values.title)\r\n                    }\r\n                    setSubmitting(false)\r\n                }, 0)\r\n            }}\r\n        >\r\n            {({values, handleChange, handleSubmit}) => {\r\n                return (\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <InputBaseMui\r\n                            name='title'\r\n                            type='text'\r\n                            fullWidth\r\n                            multiline\r\n                            value={values.title}\r\n                            onChange={handleChange}\r\n                            onBlur={() => {\r\n                                handleSubmit()\r\n                            }}\r\n                            onKeyDown={\r\n                                hendleKeyDownOnTextarea(\r\n                                    handleSubmit, handleChange, navigator.userAgent\r\n                                )\r\n                            }\r\n                        />\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n        : task.title\r\n\r\n    // Второстепенный текст под задачей\r\n    const taskSecondaryText = `${\r\n        getDateString(new Date(task.date))} - ${\r\n        userById(props.users, task.author) ? userById(props.users, task.author).nickname : ''} - ${\r\n        projectById(props.projects, task.project) ? projectById(props.projects, task.project).projectName : ''\r\n    }`\r\n\r\n    return (\r\n        <ListItemMui role={undefined}>\r\n            <ListItemIconMui onChange={handleChangeStatus}>\r\n                <CheckboxMui\r\n                    className={task.author !== props.myId ? classes.checkbox_cursor_default : ''}\r\n                    color='secondary'\r\n                    edge='start'\r\n                    checked={task.isDone}\r\n                    tabIndex={-1}\r\n                    disableRipple\r\n                    disabled={task.author !== props.myId}\r\n                />\r\n            </ListItemIconMui>\r\n            <ListItemTextMui\r\n                primary={taskTitle}\r\n                secondary={taskSecondaryText}\r\n            />\r\n            {task.author === props.myId && (\r\n                <ListItemSecondaryActionMui>\r\n                    <IconButtonMui\r\n                        onClick={handleDelete}\r\n                        edge='end'>\r\n                        <DeleteOutlineIconMui/>\r\n                    </IconButtonMui>\r\n                </ListItemSecondaryActionMui>\r\n            )}\r\n        </ListItemMui>\r\n    )\r\n}\r\n\r\ntype OwnType = {\r\n    task: TaskType\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.users.users,\r\n        projects: state.projects.projects,\r\n        myId: state.auth.id,\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    deleteTask: (taskId: number) => void\r\n    changeTask: (task: TaskType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    deleteTask,\r\n    changeTask\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)","/**\r\n * Преобразует переданный объект даты в строку формата \"dd.mm.yyyy hh:mm\".\r\n * @param {Date} date - Объект даты.\r\n * @return {string} Дата в формате строки.\r\n */\r\nexport const getDateString = (date: Date) =>\r\n    `${\r\n        date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\r\n    }.${\r\n        date.getMonth() < 9 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\r\n    }.${\r\n        date.getFullYear()\r\n    } ${\r\n        date.getHours() < 10 ? `0${date.getHours()}` : date.getHours()\r\n    }:${\r\n        date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes()\r\n    }`","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Form, Formik} from 'formik'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemSecondaryActionMui from '@material-ui/core/ListItemSecondaryAction'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\r\nimport {AppStateType} from '../../../../redux/store'\r\nimport {TaskType} from '../../../../types/types'\r\nimport {newTask} from '../../../../redux/tasksReducer'\r\nimport {hendleKeyDownOnTextarea} from '../../../../utils/wrapStringForTextarea'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        textFieldWrapper_marginRight_20px: {\r\n            marginRight: '20px',\r\n        },\r\n    }),\r\n)\r\n\r\nconst NewTask: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleNewTask = (id: number, project: number, author: number, date: number, title: string, isDone: boolean) => {\r\n        props.newTask({id, project, author, date, title, isDone})\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{title: ''}}\r\n            onSubmit={(values, {setSubmitting}) => {\r\n                setTimeout(() => {\r\n                    if (values.title === '') setSubmitting(false)\r\n                    else {\r\n                        props.selectedProjectId !== null && props.myId !== null && handleNewTask(\r\n                            props.idCounter, props.selectedProjectId, props.myId, Date.now(), values.title, false\r\n                        )\r\n                        values.title=''\r\n                    }\r\n                    setSubmitting(false)\r\n                }, 0)\r\n            }}\r\n        >\r\n            {({values, handleChange, handleSubmit}) => {\r\n                return (\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <ListItemMui role={undefined}>\r\n                            <ListItemTextMui primary={\r\n                                <div className={classes.textFieldWrapper_marginRight_20px}>\r\n                                    <FormControl variant='outlined' fullWidth>\r\n                                        <OutlinedInput\r\n                                            name='title'\r\n                                            type='title'\r\n                                            multiline\r\n                                            placeholder='Новая задача...'\r\n                                            value={values.title}\r\n                                            onChange={handleChange}\r\n                                            onKeyDown={\r\n                                                hendleKeyDownOnTextarea(\r\n                                                    handleSubmit, handleChange, navigator.userAgent\r\n                                                )}\r\n                                            disabled={props.inProgress}\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                            }\r\n                            />\r\n                            <ListItemSecondaryActionMui>\r\n                                <IconButtonMui\r\n                                    onClick={() => {handleSubmit()}}\r\n                                    edge='end'\r\n                                    disabled={props.inProgress}\r\n                                >\r\n                                    <AddCircleIcon fontSize='large'/>\r\n                                </IconButtonMui>\r\n                            </ListItemSecondaryActionMui>\r\n                        </ListItemMui>\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        idCounter: state.tasks.idCounter,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        myId: state.auth.id,\r\n        inProgress: state.tasks.addNewTaskInProcess\r\n    }\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    newTask: (task: TaskType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    newTask\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewTask)","import React, {useEffect} from 'react'\r\nimport {RouteComponentProps, withRouter} from 'react-router'\r\nimport {connect} from 'react-redux'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ContainerMui from '@material-ui/core/Container'\r\nimport CircularProgressMui from '@material-ui/core/CircularProgress/CircularProgress'\r\nimport Task from './Task/Task'\r\nimport NewTask from './NewTask/NewTask'\r\nimport {AppStateType} from '../../../redux/store'\r\nimport {TaskType} from '../../../types/types'\r\nimport {getTasks, selectMyTasks, setFetching, setTasks} from '../../../redux/tasksReducer'\r\nimport {ROUTE} from '../../../redux/appReducer'\r\nimport {compose} from \"redux\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            backgroundColor: theme.palette.background.paper,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n    }),\r\n)\r\n\r\nconst TasksList: React.FC<RouteComponentProps & MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    // Положение списка задач\r\n    let {setFetching, selectedProjectId, getTasks, setTasks, route, projects, selectMyTasks} = props\r\n    let locationPath = props.history.location.pathname\r\n    useEffect(() => {\r\n        switch (locationPath) {\r\n            case ROUTE.ROOT:\r\n                selectedProjectId !== null && getTasks([selectedProjectId], null)\r\n                break\r\n            case ROUTE.MY_TASKS:\r\n                projects.length > 0 && selectMyTasks()\r\n                break\r\n            default:\r\n                setTasks([])\r\n        }\r\n    }, [selectedProjectId, route, setFetching, getTasks, setTasks, projects, locationPath, selectMyTasks])\r\n\r\n    return (\r\n        <ContainerMui maxWidth={'sm'}>\r\n            <ListMui className={classes.root}>\r\n                {\r\n                    props.isFetching && props.isAuth\r\n                        ? <CircularProgressMui className={classes.progress} size={50}/>\r\n                        : props.isAuth && (\r\n                            <div>\r\n                                {props.filteredTasks.map(item => <Task key={item.id} task={item}/>)}\r\n                                {props.route === ROUTE.ROOT && props.selectedProjectId !== null && <NewTask/>}\r\n                            </div>\r\n                        )\r\n                }\r\n            </ListMui>\r\n        </ContainerMui>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.tasks.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        filteredTasks: state.tasks.filteredTasks,\r\n        route: state.app.route,\r\n        projects: state.projects.projects\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setFetching: (isFetching: boolean) => void,\r\n    getTasks: (projectIds: Array<number> | null, userIds: Array<number> | null) => void,\r\n    setTasks: (tasks: Array<TaskType>) => void,\r\n    selectMyTasks: () => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFetching,\r\n    getTasks,\r\n    setTasks,\r\n    selectMyTasks\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(TasksList)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport ListItemMui from '@material-ui/core/ListItem/ListItem'\r\nimport ListItemSecondaryActionMui from '@material-ui/core/ListItemSecondaryAction/ListItemSecondaryAction'\r\nimport IconButtonMui from '@material-ui/core/IconButton/IconButton'\r\nimport BackspaceIconMui from '@material-ui/icons/Backspace'\r\nimport {TaskFilterType, TaskSortType} from '../../../../types/types'\r\nimport {setFilter, setSort} from '../../../../redux/tasksReducer'\r\n\r\nconst FilterRow: React.FC<OwnProps & MapDispatchProps> = (props) => {\r\n\r\n    const handleClearFiltersInRow = () => {\r\n        switch (props.rowNumber) {\r\n            case 1:\r\n                props.setSort({firstCompleted: null, firstNew: null})\r\n                props.setFilter({userIds: undefined, status: null, content: undefined})\r\n                break\r\n            case 2:\r\n                props.setFilter({userIds: null, status: undefined, content: undefined})\r\n                break\r\n            case 3:\r\n                props.setFilter({userIds: undefined, status: undefined, content: null})\r\n                break\r\n            default: break\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ListItemMui >\r\n            {props.children}\r\n            <ListItemSecondaryActionMui>\r\n                <IconButtonMui onClick={handleClearFiltersInRow} edge='end' aria-label='delete'>\r\n                    <BackspaceIconMui/>\r\n                </IconButtonMui>\r\n            </ListItemSecondaryActionMui>\r\n        </ListItemMui>\r\n    )\r\n}\r\n\r\ntype OwnProps = {\r\n    children: React.ReactElement | React.ReactElement[]\r\n    rowNumber: number\r\n}\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType) => void\r\n    setSort: (sort: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter,\r\n    setSort\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(FilterRow)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport FormControlMui from '@material-ui/core/FormControl'\r\nimport SelectMui from '@material-ui/core/Select'\r\nimport InputAdornmentMui from '@material-ui/core/InputAdornment'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport FilterListIconMui from '@material-ui/icons/FilterList'\r\nimport {AppStateType} from '../../../../redux/store'\r\nimport {TaskSortType} from '../../../../types/types'\r\nimport {setSort} from '../../../../redux/tasksReducer'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n)\r\n\r\nconst CombinedSort: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const CLOSE_FIRST = 'CLOSE_FIRST'\r\n    const OPEN_FIRST = 'OPEN_FIRST'\r\n    const NEW_FIRST = 'NEW_FIRST'\r\n    const OLD_FIRST = 'OLD_FIRST'\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        switch (event.target.value) {\r\n            case CLOSE_FIRST:\r\n                props.setSort({firstCompleted: true, firstNew: false})\r\n                break\r\n            case OPEN_FIRST:\r\n                props.setSort({firstCompleted: false, firstNew: false})\r\n                break\r\n            case NEW_FIRST:\r\n                props.setSort({firstCompleted: null, firstNew: true})\r\n                break\r\n            case OLD_FIRST:\r\n                props.setSort({firstCompleted: null, firstNew: false})\r\n                break\r\n            default:\r\n                props.setSort({firstCompleted: null, firstNew: null})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormControlMui className={classes.formControl}>\r\n                <SelectMui\r\n                    value={\r\n                        props.sort.firstCompleted !== null\r\n                            ? props.sort.firstCompleted === true\r\n                                ? CLOSE_FIRST\r\n                                : OPEN_FIRST\r\n                            : props.sort.firstNew !== null\r\n                                ? props.sort.firstNew === true\r\n                                    ? NEW_FIRST\r\n                                    : OLD_FIRST\r\n                                : ''\r\n                    }\r\n                    onChange={handleChange}\r\n                    displayEmpty\r\n                    className={classes.selectEmpty}\r\n                    startAdornment={\r\n                        <InputAdornmentMui position='start'>\r\n                            <FilterListIconMui />\r\n                        </InputAdornmentMui>\r\n                    }\r\n                >\r\n                    <MenuItemMui value=''>\r\n                        <em>Сортировка</em>\r\n                    </MenuItemMui>\r\n                    <Divider />\r\n                    <MenuItemMui value={NEW_FIRST}>От новых к старым</MenuItemMui>\r\n                    <MenuItemMui value={OLD_FIRST}>От старых к новым</MenuItemMui>\r\n                    <Divider />\r\n                    <MenuItemMui value={OPEN_FIRST}>Сначала незавершенные</MenuItemMui>\r\n                    <MenuItemMui value={CLOSE_FIRST}>Сначала завершенные</MenuItemMui>\r\n                </SelectMui>\r\n            </FormControlMui>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        sort: state.tasks.sort\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setSort: (filter: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setSort\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CombinedSort)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport FormControlMui from '@material-ui/core/FormControl'\r\nimport SelectMui from '@material-ui/core/Select'\r\nimport InputAdornmentMui from '@material-ui/core/InputAdornment'\r\nimport SortIconMui from '@material-ui/icons/Sort'\r\nimport {AppStateType} from '../../../../redux/store'\r\nimport {TaskFilterType} from '../../../../types/types'\r\nimport {setFilter} from '../../../../redux/tasksReducer'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByStatusFilter: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const OPEN = 'OPEN'\r\n    const CLOSE = 'CLOSE'\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        let value = event.target.value\r\n        props.setFilter({\r\n            userIds: undefined,\r\n            status: value === OPEN ? false\r\n                : value === CLOSE ? true\r\n                    : null,\r\n            content: undefined})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormControlMui className={classes.formControl}>\r\n                <SelectMui\r\n                    value={\r\n                        props.filter.status === true ? CLOSE\r\n                            :  props.filter.status === false ? OPEN\r\n                                : ''\r\n                    }\r\n                    onChange={handleChange}\r\n                    displayEmpty\r\n                    className={classes.selectEmpty}\r\n                    startAdornment={\r\n                        <InputAdornmentMui position='start'>\r\n                            <SortIconMui />\r\n                        </InputAdornmentMui>\r\n                    }\r\n                >\r\n                    <MenuItemMui value=''>\r\n                        <em>По статусу</em>\r\n                    </MenuItemMui>\r\n                    <MenuItemMui value={OPEN}>Незавершенные</MenuItemMui>\r\n                    <MenuItemMui value={CLOSE}>Завершенные</MenuItemMui>\r\n                </SelectMui>\r\n            </FormControlMui>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        filter: state.tasks.filter\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setFilter: (filter: TaskFilterType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByStatusFilter)","import React, {ChangeEvent} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport TextFieldMui from '@material-ui/core/TextField'\r\nimport AutocompleteMui from '@material-ui/lab/Autocomplete'\r\nimport {AppStateType} from '../../../../redux/store'\r\nimport {TaskFilterType, UserType} from '../../../../types/types'\r\nimport {setFilter} from '../../../../redux/tasksReducer'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            '& > * + *': {\r\n                marginTop: theme.spacing(3),\r\n            },\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByUsersFilter: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    // Получение имен пользователей по их ID\r\n    let filteredUsers = (() =>\r\n        {\r\n            if (props.filter.userIds) {\r\n                return props.filter.userIds.map( userId => {\r\n                    return props.users.filter( user => user.id === userId)[0]\r\n                })\r\n            } else return []\r\n        }\r\n    )()\r\n\r\n    const handleUsersChanged = (event: ChangeEvent<{}>, users: UserType[]) => {\r\n        let usersIds = users.map( user => user.id)\r\n        props.setFilter({userIds: usersIds, status: undefined, content: undefined}, true)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AutocompleteMui\r\n                onChange={handleUsersChanged}\r\n                disableClearable\r\n                multiple\r\n                id='tags-outlined'\r\n                options={\r\n                    props.users.filter(u => props.tasks.filter(t => t.author === u.id).length > 0)\r\n                }\r\n                getOptionLabel={(option) => option.nickname}\r\n                value={filteredUsers}\r\n                filterSelectedOptions\r\n                renderInput={(params) => (\r\n                    <TextFieldMui\r\n                        {...params}\r\n                        variant='standard'\r\n                        label=''\r\n                        placeholder='Авторы'\r\n                    />\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.users.users,\r\n        filter: state.tasks.filter,\r\n        tasks: state.tasks.tasks\r\n    }\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByUsersFilter)","import React, {ChangeEvent} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport TextFieldMui from '@material-ui/core/TextField'\r\nimport {AppStateType} from '../../../../redux/store'\r\nimport {TaskFilterType} from '../../../../types/types'\r\nimport {setFilter} from '../../../../redux/tasksReducer'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                margin: theme.spacing(1, 0),\r\n            },\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByContentFilter: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleContentChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        props.setFilter({userIds: undefined, status: undefined, content: e.currentTarget.value})\r\n    }\r\n\r\n    return (\r\n        <form style={{width: '100%'}} className={classes.root} noValidate autoComplete='off'\r\n        >\r\n            <TextFieldMui\r\n                value={props.filter.content}\r\n                onChange={handleContentChange}\r\n                id='standard-basic'\r\n                label='Искать по содержимому: '\r\n                fullWidth\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        filter: state.tasks.filter\r\n    }\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByContentFilter)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport CollapseMui from '@material-ui/core/Collapse'\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess'\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore'\r\nimport SearchIconMui from '@material-ui/icons/Search'\r\nimport FilterRow from './FilterRow/FilterRow'\r\nimport CombinedSort from './CombinedSort/CombinedSort'\r\nimport ByStatusFilter from './ByStatusFilter/ByStatusFilter'\r\nimport ByUsersFilter from './ByUsersFilter/ByUsersFilter'\r\nimport ByContentFilter from './ByContentFilter/ByContentFilter'\r\nimport {AppStateType} from '../../../redux/store'\r\nimport {ROUTE} from '../../../redux/appReducer'\r\n\r\nconst FilterWrapper: React.FC<MapStatePropsType> = (props) => {\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItemMui button onClick={handleClick}>\r\n                <ListItemIconMui>\r\n                    <SearchIconMui/>\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary='Поиск задач'\r\n                    primaryTypographyProps={{variant: 'body1'}}/>\r\n                {open ? <ExpandLessMui/> : <ExpandMoreMui/>}\r\n            </ListItemMui>\r\n            <CollapseMui in={open} timeout='auto' unmountOnExit>\r\n                <ListMui component='div' disablePadding>\r\n                    <ListMui disablePadding>\r\n\r\n                        {/*Строка 1. Сортировка и фильтр по статусу*/}\r\n                        <FilterRow rowNumber={1}>\r\n                            <CombinedSort/>\r\n                            <ByStatusFilter/>\r\n                        </FilterRow>\r\n\r\n                        {/*Строка 2. Фильтр по пользователям*/}\r\n                        {props.route === ROUTE.ROOT && (\r\n                            <FilterRow rowNumber={2}>\r\n                                <ByUsersFilter/>\r\n                            </FilterRow>\r\n                        )}\r\n\r\n                        {/*Строка 3. Фильтр по содержимому*/}\r\n                        <FilterRow rowNumber={3}>\r\n                            <ByContentFilter/>\r\n                        </FilterRow>\r\n                    </ListMui>\r\n                </ListMui>\r\n            </CollapseMui>\r\n        </>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        route: state.app.route\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(FilterWrapper)","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport TasksList from './TasksList/TasksList'\r\nimport FilterWrapper from './FilterData/FilterWrapper'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        toolbar: theme.mixins.toolbar,\r\n\r\n        content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(3),\r\n        },\r\n    }),\r\n)\r\n\r\nconst Main: React.FC = () => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <main className={classes.content}>\r\n            <div className={classes.toolbar}/>\r\n            <div className={classes.toolbar}/>\r\n            <FilterWrapper/>\r\n            <TasksList/>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main","import './App.css'\r\nimport React, {useEffect} from 'react'\r\nimport {AppStateType} from './redux/store'\r\nimport {connect} from 'react-redux'\r\nimport {withRouter, RouteComponentProps} from 'react-router'\r\nimport {useSnackbar, VariantType} from 'notistack'\r\nimport {makeStyles, useTheme, Theme, createStyles} from '@material-ui/core/styles'\r\nimport CssBaselineMui from '@material-ui/core/CssBaseline'\r\nimport DividerMui from '@material-ui/core/Divider'\r\nimport DrawerMui from '@material-ui/core/Drawer'\r\nimport HiddenMui from '@material-ui/core/Hidden'\r\nimport Menu from './components/Menu/Menu'\r\nimport LoginForm from './components/LoginForm/LoginForm'\r\nimport BackdropPreloader from './components/BackdropPreloader/BackdropPreloader'\r\nimport AppTopBar from './components/AppTopBar/AppTopBar'\r\nimport Main from './components/Main/Main'\r\nimport {appInitializing, ROUTE, setRoute, RouteType} from './redux/appReducer'\r\nimport {compose} from \"redux\"\r\n\r\nconst drawerWidth = 240 //Ширина бокового меню\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        drawer: {\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: drawerWidth,\r\n                flexShrink: 0,\r\n            },\r\n        },\r\n        appBar: {\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: `calc(100% - ${drawerWidth}px)`,\r\n                marginLeft: drawerWidth,\r\n            },\r\n        },\r\n        toolbar: theme.mixins.toolbar,\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n        },\r\n    }),\r\n)\r\n\r\nconst App: React.FC<RouteComponentProps & MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\r\n    const classes = useStyles()\r\n    const theme = useTheme()\r\n\r\n    //Управление показом боковой панели в мобильном режиме\r\n    const [mobileOpen, setMobileOpen] = React.useState(false)\r\n    const handleDrawerToggle = () => {setMobileOpen(!mobileOpen)}\r\n\r\n    // Запуск инициализации приложения\r\n    let {appInitializing} = props\r\n    useEffect(() => {\r\n        appInitializing()\r\n    }, [appInitializing])\r\n\r\n    // Настраиваем текущее значение роутинга\r\n    let locationPath = props.history.location.pathname\r\n    let pushIntoHistory = props.history.push\r\n    let {setRoute} = props\r\n    useEffect(() => {\r\n        let isRouteSet = false\r\n        let key: RouteType\r\n        for (key in ROUTE)\r\n            if (ROUTE[key] === locationPath) {\r\n                setRoute(locationPath)\r\n                isRouteSet = true\r\n                break\r\n            }\r\n        !isRouteSet && pushIntoHistory('/404')\r\n    }, [locationPath, setRoute, pushIntoHistory])\r\n\r\n    // Добавление ошибки в Snackbar\r\n    const {enqueueSnackbar} = useSnackbar()\r\n    let {errors} = props\r\n    useEffect(() => {\r\n        let variant: VariantType = 'error'\r\n        errors.length > 0 && enqueueSnackbar(errors[errors.length - 1], {variant})\r\n    }, [errors, enqueueSnackbar])\r\n\r\n    // Содержимое боковой панели\r\n    const drawer = (\r\n        <div>\r\n            <div className={classes.toolbar}/>\r\n            <DividerMui/>\r\n            <Menu/>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            {/*Затемнение и прелодер при инициализации*/}\r\n            <BackdropPreloader open={!props.isInitialized}/>\r\n\r\n            {/*Форма логина*/}\r\n            {props.loginFormShown && <LoginForm/>}\r\n\r\n            <CssBaselineMui/>\r\n\r\n            {/*Верхняя панель*/}\r\n            <AppTopBar/>\r\n\r\n            {/*Обертка над боковой панелью для управления режимом отображения*/}\r\n            <nav className={classes.drawer}>\r\n                <HiddenMui smUp implementation='css'>\r\n                    <DrawerMui\r\n                        variant='temporary'\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{paper: classes.drawerPaper,}}\r\n                        ModalProps={{keepMounted: true,}}\r\n                    >\r\n                        {drawer}\r\n                    </DrawerMui>\r\n                </HiddenMui>\r\n                <HiddenMui xsDown implementation='css'>\r\n                    <DrawerMui\r\n                        classes={{paper: classes.drawerPaper,}}\r\n                        variant='permanent'\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </DrawerMui>\r\n                </HiddenMui>\r\n            </nav>\r\n\r\n            {/*Основное содержимое*/}\r\n            {props.isAuth && <Main/>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isInitialized: state.app.isInitialized,\r\n        isAuth: state.auth.isAuth,\r\n        loginFormShown: state.auth.loginFormShown,\r\n        errors: state.app.errors\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    appInitializing: () => void,\r\n    setRoute: (route: string) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    appInitializing,\r\n    setRoute\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(App)\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {Provider} from 'react-redux'\r\nimport store from './redux/store'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport {SnackbarProvider} from 'notistack'\r\nimport App from './App'\r\nimport {HashRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <SnackbarProvider maxSnack={3}>\r\n                <HashRouter>\r\n                    <App/>\r\n                </HashRouter>\r\n            </SnackbarProvider>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister()"],"sourceRoot":""}