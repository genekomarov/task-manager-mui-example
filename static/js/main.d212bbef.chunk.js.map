{"version":3,"sources":["utils/arrayToStringArguments.ts","api/api.ts","redux/projectsReducer.ts","redux/usersReducer.ts","redux/clientSideApiReducer.ts","redux/tasksReducer.ts","components/Menu/Projects/Projects.tsx","components/Menu/Users/Users.tsx","components/Menu/Menu.tsx","exceptions/exceptions.ts","redux/authReducer.ts","components/AppBarContent/AppBarContent.tsx","components/FilterData/CombinedFilter/CombinedFilter.tsx","components/FilterData/ByStatusSort/ByStatusSort.tsx","components/FilterData/ByUsersFilter/ByUsersFilter.tsx","components/FilterData/ByContentFilter/ByContentFilter.tsx","components/FilterData/FilterRow/FilterRow.tsx","components/FilterData/Filter.tsx","components/FilterData/FilterWrapper.tsx","components/TasksList/Task/Task.tsx","components/TasksList/NewTask/NewTask.tsx","utils/breakLineForTextarea.ts","components/TasksList/TasksList.tsx","utils/tasksFilters.ts","redux/appReducer.ts","components/LoginForm/LoginForm.tsx","validators/validators.tsx","App.tsx","serviceWorker.ts","redux/store.ts","index.tsx"],"names":["arrayToStringArguments","argName","argArray","map","arg","toString","replace","instance","axios","create","withCredentials","baseURL","headers","authAPI","email","password","get","then","response","data","usersAPI","setOfUserIds","length","setOfProjectIds","projectsAPI","tasksAPI","initialState","projects","isFetching","selectedProjectId","actions","type","id","projectsReducer","state","action","users","selectedUserId","setSelectedUserId","dispatch","a","usersReducer","clientSideData","items","deleted","authData","projectsToUsers","tasks","tableName","itemId","item","addIdToDeleted","addNewItem","deleteItem","clientSideApiReducer","filter","userIds","status","content","sort","firstCompleted","firstNew","countOfShownTasks","idCounter","taskId","title","task","setFilter","rewrite","undefined","setSort","tasksReducer","t","changeTaskId","findIndex","isDone","useStyles","makeStyles","theme","createStyles","root","display","flexDirection","progress","alignSelf","margin","spacing","nested","paddingLeft","mapDispatchToProps","getProjects","projectIds","p","projectId","alert","message","setProjects","setSelectedProjectId","connect","isAuth","auth","myId","isInitialized","app","props","useEffect","classes","React","useState","open","setOpen","className","ListItem","button","onClick","ListItemIcon","ListItemText","primary","primaryTypographyProps","variant","CircularProgress","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","key","projectName","setFetching","getUsers","u","userId","projectsIsFetching","nickname","author","width","maxWidth","backgroundColor","palette","background","paper","verticalSpacing","alignItems","padding","justifyContent","Menu","aria-labelledby","subheader","ListSubheader","AuthorizationFailedException","this","loginFormShown","loginErrorMessage","login","extraData","Cookies","set","showLoginForm","grow","flexGrow","breakpoints","up","sectionDesktop","sectionMobile","typography__authorizedUserNickname","marginRight","logout","remove","myNickname","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleProfileMenuOpen","event","currentTarget","handleMobileMenuClose","handleMenuClose","handleLogin","menuId","renderMenu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","renderMobileMenu","IconButton","aria-label","aria-controls","aria-haspopup","color","Typography","noWrap","Helmet","edge","Button","formControl","minWidth","selectEmpty","marginTop","FormControl","Select","value","onChange","target","displayEmpty","inputProps","startAdornment","InputAdornment","position","Divider","filteredUsers","user","Autocomplete","usersIds","disableClearable","multiple","options","getOptionLabel","option","filterSelectedOptions","renderInput","params","TextField","label","placeholder","style","noValidate","autoComplete","e","fullWidth","children","rowNumber","Filter","FilterWrapper","checkbox_cursor_default","cursor","deleteTask","changeTask","console","log","userById","authorId","labelId","date","Date","dateStr","getDate","getMonth","getFullYear","getHours","getMinutes","role","Checkbox","checked","tabIndex","disableRipple","initialValues","onSubmit","values","setSubmitting","setTimeout","handleChange","handleSubmit","InputBase","name","multiline","onBlur","onKeyDown","ctrlKey","preventDefault","secondary","textFieldWrapper_marginRight_20px","newTask","project","now","OutlinedInput","start","selectionStart","end","selectionEnd","slice","getBreakedString","test","navigator","userAgent","fontSize","itemSecondaryText","getTasks","setCountOfShownTasks","usersIsFetching","tasksOnClient","clientSideDb","filteredTasks","concat","statusFilter","usersFilter","contentFilter","match","RegExp","b","sortResultByStatus","filterByStatus","sortResultByDate","dateDiff","filterByDate","Container","size","appReducer","setLoginErrorMessage","handleClose","Dialog","validate","errors","submitForm","isSubmitting","DialogTitle","DialogContent","DialogContentText","autoFocus","FormHelperText","error","DialogActions","disabled","drawer","flexShrink","appBar","marginLeft","menuButton","toolbar","mixins","drawerPaper","backdrop","zIndex","appInitializing","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","Backdrop","CssBaseline","AppBar","Toolbar","Hidden","smUp","implementation","Drawer","anchor","direction","ModalProps","xsDown","window","location","hostname","rootReducer","combineReducers","api","authReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d212bbef.chunk.js","sourcesContent":["const arrayToStringArguments = (argName: string, argArray: Array<number | string> | null) =>\r\n    argArray\r\n        ? argArray.map((arg) => `${argName}=${arg}&`).toString().replace(/,/g,'')\r\n        : \"\"\r\n\r\nexport default arrayToStringArguments","import axios from 'axios'\r\nimport {\r\n    AuthDataType,\r\n    ProjectToUserIdsMatch,\r\n    ProjectType,\r\n    TaskType, UserType\r\n} from \"../types/types\"\r\nimport arrayToStringArguments from \"../utils/arrayToStringArguments\"\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://my-json-server.typicode.com/genekomarov/task-manager_mui',\r\n    headers: {}\r\n})\r\n\r\nexport const authAPI = {\r\n    auth: (email: string, password: string) => {\r\n        return instance.get<Array<AuthDataType>>(`/authData?email=${email}&password=${password}`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsersByIds: (setOfUserIds: Array<number>) =>\r\n        setOfUserIds.length\r\n            ? instance.get<Array<UserType>>(`/users?${arrayToStringArguments(\"id\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    getUserIdsByProjectIds: (setOfProjectIds: Array<number>) =>\r\n        setOfProjectIds.length\r\n            ? instance.get<Array<ProjectToUserIdsMatch>>(\r\n                `/projects-to-users?${arrayToStringArguments(\"projectId\", setOfProjectIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n\r\n    addNewUser: () => console.error(\"method 'addNewUser' is not implemented\"),\r\n    changeUser: () => console.error(\"method 'changeUser' is not implemented\"),\r\n    deleteUser: () => console.error(\"method 'deleteUser' is not implemented\")\r\n}\r\n\r\nexport const projectsAPI = {\r\n    getProjectsByIds: (setOfProjectIds: Array<number>) =>\r\n        setOfProjectIds.length\r\n            ? instance.get<Array<ProjectType>>(`/projects?${arrayToStringArguments(\"id\", setOfProjectIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    getProjectIdsByUserIds: (setOfUserIds: Array<number>) =>\r\n        setOfUserIds.length\r\n            ? instance.get<Array<ProjectToUserIdsMatch>>(\r\n                `/projects-to-users?${arrayToStringArguments(\"userId\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n\r\n    addNewProject: () => console.error(\"method 'addNewProject' is not implemented\"),\r\n    changeProject: () => console.error(\"method 'changeProject' is not implemented\"),\r\n    deleteProject: () => console.error(\"method 'deleteProject' is not implemented\")\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasksByProjectOrUserIds: (setOfProjectIds: Array<number> | null, setOfUserIds: Array<number> | null) =>\r\n        setOfProjectIds || setOfUserIds\r\n            ? instance.get<Array<TaskType>>(\r\n                `/tasks?${arrayToStringArguments(\"project\", setOfProjectIds)}${arrayToStringArguments(\"author\", setOfUserIds)}`)\r\n                .then(response => response.data)\r\n            : [],\r\n\r\n    addNewTask: (task: TaskType) =>\r\n        instance.post<TaskType>(`/tasks`, task)\r\n            .then(response => response.data),\r\n\r\n    changeTask: (taskId: number, title: string, isDone: boolean) =>\r\n        instance.patch<TaskType>(`/tasks/${taskId}`, {title, isDone})\r\n            .then(response => response.data),\r\n\r\n    deleteTask: (taskId: number) =>\r\n        instance.delete<TaskType>(`/tasks/${taskId}`)\r\n            .then(response => response.data),\r\n}\r\n\r\n","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, projectsAPI, usersAPI} from \"../api/api\"\r\nimport {ProjectToUserIdsMatch, ProjectType} from \"../types/types\"\r\n\r\nlet initialState = {\r\n    projects: [] as Array<ProjectType>,\r\n    isFetching: false,\r\n    selectedProjectId: null as number | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nconst projectsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'projects/SET_PROJECTS':\r\n            return {\r\n                ...state,\r\n                projects: action.projects,\r\n                selectedProjectId: action.selectedProjectId\r\n            }\r\n        case \"projects/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"projects/SET_SELECTED_PROJECT_ID\":\r\n            return {\r\n                ...state,\r\n                selectedProjectId: action.selectedProjectId\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setProjects: (projects: Array<ProjectType>) => ({\r\n        type: 'projects/SET_PROJECTS',\r\n        projects,\r\n        selectedProjectId: projects.length>0 ? projects[0].id : null\r\n    } as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'projects/SET_FETCHING', isFetching} as const),\r\n    setSelectedProjectId: (selectedProjectId: number) => ({type: 'projects/SET_SELECTED_PROJECT_ID', selectedProjectId} as const),\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const getProjects = (userIds: Array<number>): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.setFetching(true))\r\n        let projectIds: Array<ProjectToUserIdsMatch> = await projectsAPI.getProjectIdsByUserIds(userIds)\r\n        let projects: Array<ProjectType> = await projectsAPI.getProjectsByIds(projectIds.map((p) => p.projectId))\r\n        dispatch(actions.setProjects(projects))\r\n        dispatch(actions.setFetching(false))\r\n    }\r\n    catch (e) {\r\n        alert(e.message)\r\n    }\r\n}\r\n\r\nexport const setProjects = (projects: Array<ProjectType>): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setProjects(projects))\r\n}\r\n\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\nexport const setSelectedProjectId = (selectedProjectId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSelectedProjectId(selectedProjectId))\r\n}\r\n\r\nexport default projectsReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, projectsAPI, usersAPI} from \"../api/api\"\r\nimport {ProjectToUserIdsMatch, ProjectType, UserType} from \"../types/types\"\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    isFetching: false,\r\n    selectedUserId: null as number | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"users/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"users/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"users/SET_SELECTED_USER_ID\":\r\n            return {\r\n                ...state,\r\n                selectedUserId: action.selectedUserId\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setUsers: (users: Array<UserType>) => ({type: 'users/SET_USERS', users} as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'users/SET_FETCHING', isFetching} as const),\r\n    setSelectedUserId: (selectedUserId: number | null) => ({type: 'users/SET_SELECTED_USER_ID', selectedUserId} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const getUsers = (projectIds: Array<number>): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(actions.setFetching(true))\r\n        let userIds: Array<ProjectToUserIdsMatch> = await usersAPI.getUserIdsByProjectIds(projectIds)\r\n        let users: Array<UserType> = await usersAPI.getUsersByIds(userIds.map((u) => u.userId))\r\n        dispatch(actions.setUsers(users))\r\n        dispatch(actions.setFetching(false))\r\n    } catch (e) {\r\n        alert(e.message)\r\n    }\r\n\r\n}\r\n\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\nexport const setSelectedUserId = (selectedUserId: number | null): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSelectedUserId(selectedUserId))\r\n}\r\n\r\nexport default usersReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {AuthDataType, ProjectToUserIdsMatch, ProjectType, TaskType, UserType} from \"../types/types\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\n\r\nlet initialState = {\r\n    clientSideData: {\r\n        users: {\r\n            items: [] as Array<UserType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        authData: {\r\n            items: [] as Array<UserType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        projectsToUsers: {\r\n            items: [] as Array<ProjectToUserIdsMatch>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        projects: {\r\n            items: [] as Array<ProjectType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        },\r\n        tasks: {\r\n            items: [] as Array<TaskType>, //new or changed items\r\n            deleted: [] as Array<number> //ids of deleted items\r\n        }\r\n    }\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\ntype DataType = typeof initialState.clientSideData\r\ntype TableNamesTypes = keyof DataType\r\ntype ItemType = {id: number, [key: string]: any}\r\n\r\nconst clientSideApiReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_ID_TO_DELETED\":\r\n            return {\r\n                ...state,\r\n                clientSideData: {\r\n                    ...state.clientSideData,\r\n                    [action.tableName]: {\r\n                        ...state.clientSideData[action.tableName],\r\n                        deleted: [\r\n                            ...state.clientSideData[action.tableName].deleted,\r\n                            action.itemId\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n            case \"ADD_NEW_ITEM\":\r\n                return {\r\n                    ...state,\r\n                    clientSideData: {\r\n                        ...state.clientSideData,\r\n                        [action.tableName]: {\r\n                            ...state.clientSideData[action.tableName],\r\n                            items: [\r\n                                ...state.clientSideData[action.tableName].items,\r\n                                action.item\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n                case \"DELETE_ITEM\":\r\n                    return {\r\n                        ...state,\r\n                        clientSideData: {\r\n                            ...state.clientSideData,\r\n                            [action.tableName]: {\r\n                                ...state.clientSideData[action.tableName],\r\n                                items: [...state.clientSideData[action.tableName].items].filter(\r\n                                    (item: ItemType) => item.id !== action.itemId\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n        default: return state\r\n    }\r\n};\r\n\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    addIdToDeleted: (tableName: TableNamesTypes, itemId: number) => ({type: 'ADD_ID_TO_DELETED', tableName, itemId} as const),\r\n    addNewItem: (tableName: TableNamesTypes, item: ItemType) => ({type: 'ADD_NEW_ITEM', tableName, item} as const),\r\n    deleteItem: (tableName: TableNamesTypes, itemId: number) => ({type: 'DELETE_ITEM', tableName, itemId} as const)\r\n}\r\n\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n\r\nexport const addIdToDeleted = (tableName: TableNamesTypes, itemId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.addIdToDeleted(tableName, itemId));\r\n};\r\n\r\nexport const addNewItem = (tableName: TableNamesTypes, item: ItemType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.addNewItem(tableName, item));\r\n};\r\n\r\nexport const deleteItem = (tableName: TableNamesTypes, itemId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.deleteItem(tableName, itemId));\r\n};\r\n\r\n\r\n\r\nexport default clientSideApiReducer","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, projectsAPI, tasksAPI, usersAPI} from \"../api/api\"\r\nimport {ProjectToUserIdsMatch, ProjectType, TaskFilterType, TaskSortType, TaskType, UserType} from \"../types/types\"\r\nimport {addIdToDeleted, addNewItem, deleteItem} from \"./clientSideApiReducer\"\r\n\r\nlet initialState = {\r\n    tasks: [] as Array<TaskType>,\r\n    isFetching: false,\r\n    filter: {\r\n        userIds: null as Array<number> | null,\r\n        status: null as boolean | null,\r\n        content: null as string | null,\r\n    } as TaskFilterType,\r\n    sort: {\r\n        firstCompleted: null as boolean | null,\r\n        firstNew: null as boolean | null\r\n    } as TaskSortType,\r\n    countOfShownTasks: 0,\r\n    idCounter: 1000\r\n};\r\ntype InitialStateType = typeof initialState\r\n\r\nconst tasksReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"tasks/SET_TASKS\":\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            }\r\n        case \"tasks/SET_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case \"tasks/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: {\r\n                    ...state.filter,\r\n                    userIds: action.filter.userIds === undefined\r\n                        ? state.filter.userIds\r\n                        : action.filter.userIds === null\r\n                            ? null\r\n                            : state.filter.userIds\r\n                                ? [...state.filter.userIds, ...action.filter.userIds]\r\n                                : [...action.filter.userIds],\r\n                    status: action.filter.status === undefined\r\n                        ? state.filter.status\r\n                        : action.filter.status,\r\n                    content: action.filter.content === undefined\r\n                        ? state.filter.content\r\n                        : action.filter.content\r\n                }\r\n            }\r\n        case \"tasks/SET_SORT\":\r\n            return {\r\n                ...state,\r\n                sort: {\r\n                    ...state.sort,\r\n                    firstCompleted: action.sort.firstCompleted === undefined\r\n                        ? state.sort.firstCompleted\r\n                        : action.sort.firstCompleted,\r\n                    firstNew: action.sort.firstNew === undefined\r\n                        ? state.sort.firstNew\r\n                        : action.sort.firstNew\r\n                }\r\n            }\r\n        case \"tasks/SET_COUNT_OF_SHOWN_TASKS\":\r\n            return {\r\n                ...state,\r\n                countOfShownTasks: action.countOfShownTasks\r\n            }\r\n        case \"tasks/DELETE_TASK\":\r\n            return {\r\n                ...state,\r\n                tasks: [...state.tasks.filter(t => t.id !== action.taskId)]\r\n            }\r\n        case \"tasks/CHANGE_TASK\": {\r\n            let changeTaskId = state.tasks.findIndex(t => t.id === action.taskId)\r\n            return changeTaskId === -1\r\n                ? state\r\n                : {\r\n                ...state,\r\n                tasks: [\r\n                    ...state.tasks.filter(t => t.id !== action.taskId),\r\n\r\n                    {\r\n                        ...state.tasks[changeTaskId],\r\n                        isDone: action.status,\r\n                        title: action.title\r\n                    }\r\n                ],\r\n            }\r\n\r\n        }\r\n        case \"tasks/NEW_TASK\":\r\n            return {\r\n                ...state,\r\n                /*tasks: [\r\n                    ...state.tasks,\r\n                    {\r\n                        id: action.task.id,\r\n                        project: action.task.project,\r\n                        author: action.task.author,\r\n                        date: action.task.date,\r\n                        title: action.task.title,\r\n                        isDone: action.task.isDone\r\n                    }\r\n                ],*/\r\n                idCounter: state.idCounter + 1\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setTasks: (tasks: Array<TaskType>) => ({type: 'tasks/SET_TASKS', tasks} as const),\r\n    setFetching: (isFetching: boolean) => ({type: 'tasks/SET_FETCHING', isFetching} as const),\r\n    setFilter: (filter: TaskFilterType) => ({type: 'tasks/SET_FILTER', filter} as const),\r\n    setSort: (sort: TaskSortType) => ({type: 'tasks/SET_SORT', sort} as const),\r\n    setCountOfShownTasks: (countOfShownTasks: number) => ({\r\n        type: 'tasks/SET_COUNT_OF_SHOWN_TASKS',\r\n        countOfShownTasks\r\n    } as const),\r\n    changeTask: (taskId: number, status: boolean, title: string) => ({\r\n        type: 'tasks/CHANGE_TASK',\r\n        taskId,\r\n        status,\r\n        title\r\n    } as const),\r\n    deleteTask: (taskId: number) => ({type: 'tasks/DELETE_TASK', taskId} as const),\r\n    newTask: (task: TaskType) => ({\r\n        type: 'tasks/NEW_TASK', task\r\n    } as const),\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const getTasks = (\r\n    projectIds: Array<number> | null,\r\n    userIds: Array<number> | null\r\n): ThunkType => async (dispatch) => {\r\n    try {\r\n        let tasks = await tasksAPI.getTasksByProjectOrUserIds(projectIds, userIds)\r\n        dispatch(actions.setTasks(tasks))\r\n        dispatch(actions.setFilter({userIds: [], status: null, content: \"\"}))\r\n        dispatch(actions.setFetching(false))\r\n    } catch (e) {\r\n        alert(e.message)\r\n    }\r\n}\r\n\r\nexport const setFetching = (isFetching: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching(isFetching))\r\n}\r\n\r\nexport const setFilter = (filter: TaskFilterType, rewrite = false): ThunkType => async (dispatch) => {\r\n    if (rewrite) dispatch(actions.setFilter({\r\n        userIds: filter.userIds !== undefined ? null : undefined,\r\n        status: filter.status !== undefined ? null : undefined,\r\n        content: filter.content !== undefined ? null : undefined,\r\n    }))\r\n    dispatch(actions.setFilter(filter))\r\n}\r\n\r\nexport const setSort = (sort: TaskSortType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setSort(sort))\r\n}\r\n\r\nexport const setCountOfShownTasks = (countOfShownTasks: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setCountOfShownTasks(countOfShownTasks))\r\n}\r\n\r\nexport const deleteTask = (taskId: number): ThunkType => async (dispatch) => {\r\n    try {\r\n        /*let response = await tasksAPI.deleteTask(taskId)*/\r\n        dispatch(actions.deleteTask(taskId))\r\n        await dispatch(addIdToDeleted('tasks', taskId))\r\n        await dispatch(deleteItem('tasks', taskId))\r\n    } catch (e) {\r\n        alert(e.message)\r\n    }\r\n}\r\n\r\nexport const changeTask = (task: TaskType): ThunkType => async (dispatch) => {\r\n    try {\r\n        /*let response = await tasksAPI.changeTask(task.id, task.title, task.isDone)*/\r\n        dispatch(actions.changeTask(task.id, task.isDone, task.title))\r\n        await dispatch(addIdToDeleted('tasks', task.id))\r\n        await dispatch(deleteItem('tasks', task.id))\r\n        await dispatch(addNewItem('tasks', task))\r\n    } catch (e) {\r\n        alert(e.message)\r\n    }\r\n}\r\n\r\nexport const newTask = (task: TaskType): ThunkType => async (dispatch) => {\r\n    try {\r\n        /*let response = await tasksAPI.addNewTask(task)*/\r\n        dispatch(actions.newTask(task))\r\n        await dispatch(addNewItem('tasks', task))\r\n    } catch (e) {\r\n        alert(e.message)\r\n    }\r\n}\r\n\r\nexport default tasksReducer","import React, {useEffect} from 'react';\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles';\r\nimport ListMui from '@material-ui/core/List';\r\nimport ListItemMui from '@material-ui/core/ListItem';\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon';\r\nimport ListItemTextMui from '@material-ui/core/ListItemText';\r\nimport CollapseMui from '@material-ui/core/Collapse';\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore';\r\nimport AccountTreeIconMui from '@material-ui/icons/AccountTree';\r\nimport FolderIconMui from '@material-ui/icons/Folder';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {getProjects, setFetching, setProjects, setSelectedProjectId} from \"../../../redux/projectsReducer\"\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport {ProjectType, TaskFilterType, TaskSortType} from \"../../../types/types\"\r\nimport {setSelectedUserId} from \"../../../redux/usersReducer\"\r\nimport {actions, setFilter, setSort} from \"../../../redux/tasksReducer\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n    }),\r\n)\r\n\r\nconst Projects: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    /**Активируем каскад вертушек\r\n     * при начале инициализации*/\r\n    /*useEffect(() => {\r\n        props.initializationInProgress && props.setFetching(true)\r\n    }, [props.initializationInProgress, props.isAuth])*/\r\n\r\n    /**Получаем пользователей\r\n     * при изменении авторизованного ID*/\r\n    useEffect(() => {\r\n        props.myId!==null\r\n            ? props.getProjects([props.myId])\r\n            : props.setProjects([])\r\n    },[props.myId])\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const handleItemClick = (selectedProjectId: number) => {\r\n        props.setSelectedProjectId(selectedProjectId)\r\n        props.setFilter({userIds: null, status: null, content: null})\r\n        props.setSort({firstCompleted: null, firstNew: null})\r\n        props.setSelectedUserId(null)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ListItemMui button onClick={handleClick}>\r\n                <ListItemIconMui>\r\n                    <AccountTreeIconMui/>\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary=\"Проекты\"\r\n                    primaryTypographyProps={{variant: \"body1\"}}/>\r\n                {open ? <ExpandLessMui/> : <ExpandMoreMui/>}\r\n            </ListItemMui>\r\n            {props.isFetching && props.isAuth\r\n                ? <CircularProgress className={classes.progress}/>\r\n                : <CollapseMui in={open} timeout=\"auto\" unmountOnExit>\r\n                    {props.isAuth  && props.projects.map((item) => {\r\n                        return (\r\n                            <ListMui component=\"div\" disablePadding key={item.id}>\r\n                                <ListItemMui button className={classes.nested} onClick={() => handleItemClick(item.id)}>\r\n                                    <ListItemIconMui>\r\n                                        {\r\n                                            item.id === props.selectedProjectId\r\n                                                ? <FolderOpenIcon/>\r\n                                                : <FolderIconMui/>\r\n                                        }\r\n                                    </ListItemIconMui>\r\n                                    <ListItemTextMui primary={item.projectName}/>\r\n                                </ListItemMui>\r\n                            </ListMui>\r\n                        )\r\n                    })}\r\n                </CollapseMui>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.projects.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        projects: state.projects.projects,\r\n        myId: state.auth.id,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        /*initializationInProgress: state.app.initializationInProgress,*/\r\n        isInitialized: state.app.isInitialized\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    getProjects: (userIds: Array<number>) => void\r\n    /*setFetching: (isFetching: boolean) => void*/\r\n    setProjects: (projects: Array<ProjectType>) => void\r\n    setSelectedProjectId: (selectedProjectId: number) => void\r\n    setSelectedUserId: (selectedUserId: number | null) => void\r\n    setFilter: (filter: TaskFilterType) => void\r\n    setSort: (sort: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    getProjects,\r\n    /*setFetching,*/\r\n    setProjects,\r\n    setSelectedProjectId,\r\n    setSelectedUserId,\r\n    setFilter,\r\n    setSort\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Projects)","import React, {useEffect} from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport ListMui from '@material-ui/core/List';\r\nimport ListItemMui from '@material-ui/core/ListItem';\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon';\r\nimport ListItemTextMui from '@material-ui/core/ListItemText';\r\nimport CollapseMui from '@material-ui/core/Collapse';\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore';\r\nimport PeopleIconMui from '@material-ui/icons/People';\r\nimport AccountCircleIconMui from '@material-ui/icons/AccountCircle';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\"\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {getUsers, setFetching, setSelectedUserId} from \"../../../redux/usersReducer\"\r\nimport FolderOpenIcon from \"@material-ui/core/SvgIcon/SvgIcon\"\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\r\nimport {TaskFilterType} from \"../../../types/types\"\r\nimport {setFilter} from \"../../../redux/tasksReducer\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n    }),\r\n)\r\n\r\nconst Users: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n    /**Активируем каскад вертушек\r\n     * при начале инициализации*/\r\n    useEffect(() => {\r\n        props.projectsIsFetching && props.setFetching(true)\r\n    }, [props.projectsIsFetching])\r\n\r\n    useEffect(() => {\r\n        props.selectedProjectId!==null && props.getUsers([props.selectedProjectId])\r\n    },[props.selectedProjectId])\r\n\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const handleItemClick = (selectedUserId: number) => {\r\n        props.setSelectedUserId(selectedUserId)\r\n        props.setFilter({userIds: [selectedUserId], status: undefined, content: undefined}, true)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ListItemMui button onClick={handleClick}>\r\n                <ListItemIconMui>\r\n                    <PeopleIconMui />\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary=\"Команда\"\r\n                    primaryTypographyProps={{variant: \"body1\"}}/>\r\n                {open ? <ExpandLessMui /> : <ExpandMoreMui />}\r\n            </ListItemMui>\r\n            {props.isFetching && props.isAuth\r\n                ? <CircularProgress className={classes.progress}/>\r\n                : <CollapseMui in={open} timeout=\"auto\" unmountOnExit>\r\n                    {props.isAuth && props.users.map((item) => {\r\n                        return (\r\n                            <ListMui component=\"div\" disablePadding key={item.id}>\r\n                                <ListItemMui button className={classes.nested} onClick={() => handleItemClick(item.id)}>\r\n                                    <ListItemIconMui>\r\n                                        {\r\n                                            item.id === props.selectedUserId\r\n                                                ? <PermIdentityIcon/>\r\n                                                : <PersonIcon/>\r\n                                        }\r\n                                    </ListItemIconMui>\r\n                                    <ListItemTextMui primary={\r\n                                        `${item.nickname} (${props.tasks.filter(t => t.author === item.id).length})`\r\n                                    }/>\r\n                                </ListItemMui>\r\n                            </ListMui>\r\n                        )\r\n                    })}\r\n                </CollapseMui>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.users.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        projectsIsFetching: state.projects.isFetching,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        users: state.users.users,\r\n        selectedUserId: state.users.selectedUserId,\r\n        tasks: state.tasks.tasks\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFetching: (isFetching: boolean) => void,\r\n    getUsers: (projectIds: Array<number>) => void,\r\n    setSelectedUserId: (selectedUserId: number) => void,\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFetching,\r\n    getUsers,\r\n    setSelectedUserId,\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Users)\r\n","import React from 'react'\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\r\nimport ListSubheaderMui from '@material-ui/core/ListSubheader'\r\nimport ListMui from '@material-ui/core/List'\r\nimport DividerMui from \"@material-ui/core/Divider/Divider\"\r\nimport Projects from \"./Projects/Projects\"\r\nimport Team from \"./Users/Users\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxWidth: 360,\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        /** Для отступа между блоками в меню*/\r\n        verticalSpacing: {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            padding: theme.spacing(2, 1),\r\n            justifyContent: 'flex-end',\r\n        },\r\n    }),\r\n)\r\n\r\nconst Menu: React.FC<any> = () => {    \r\n    \r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <ListMui\r\n            component=\"nav\"\r\n            aria-labelledby=\"nested-list-subheader\"\r\n            subheader={\r\n                <ListSubheaderMui component=\"div\" id=\"nested-list-subheader\">\r\n                    Меню\r\n                </ListSubheaderMui>\r\n            }\r\n            className={classes.root}\r\n        >\r\n            <DividerMui />\r\n            <Projects/>\r\n            <div className={classes.verticalSpacing} />\r\n            <Team/>\r\n            <DividerMui />\r\n        </ListMui>\r\n    )\r\n}\r\n\r\nexport default Menu","export class AuthorizationFailedException {\r\n    message: string;\r\n    constructor () {\r\n        this.message = `Авторизация не удалась`\r\n    }\r\n}","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, usersAPI} from \"../api/api\"\r\nimport {AuthorizationFailedException} from \"../exceptions/exceptions\"\r\nimport Cookies from 'js-cookie'\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    nickname: null as string | null,\r\n    isAuth: false,\r\n    loginFormShown: false,\r\n    loginErrorMessage: null as string | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst clientSideApiReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"auth/SET_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                id: action.id,\r\n                email: action.email,\r\n                nickname: action.nickname,\r\n                isAuth: action.isAuth\r\n            }\r\n        case \"auth/SHOW_LOGIN_FORM\":\r\n            return {\r\n                ...state,\r\n                loginFormShown: action.loginFormShown\r\n            }\r\n            case \"auth/SET_LOGIN_ERROR_MESSAGE\":\r\n                return {\r\n                    ...state,\r\n                    loginErrorMessage: action.loginErrorMessage\r\n                }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setUserData: (\r\n        id: number | null,\r\n        email: string | null,\r\n        nickname: string | null,\r\n        isAuth: boolean\r\n    ) => ({type: 'auth/SET_USER_DATA', id, email, nickname, isAuth} as const),\r\n    showLoginForm: (loginFormShown: boolean) => ({type: 'auth/SHOW_LOGIN_FORM', loginFormShown} as const),\r\n    setLoginErrorMessage: (loginErrorMessage: string | null) => ({type: 'auth/SET_LOGIN_ERROR_MESSAGE', loginErrorMessage} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const login = (email: string, password: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let authData = await authAPI.auth(email, password)\r\n        if (authData.length === 0) throw new AuthorizationFailedException()\r\n        let extraData = await usersAPI.getUsersByIds([authData[0].id])\r\n        if (authData.length === 0) throw new AuthorizationFailedException()\r\n        dispatch(actions.setUserData(authData[0].id, authData[0].email, extraData[0].nickname, true))\r\n        dispatch(actions.showLoginForm(false))\r\n        dispatch(actions.setLoginErrorMessage(null))\r\n        Cookies.set('email',  email)\r\n        Cookies.set('password', password)\r\n    }\r\n    catch (e) {\r\n        dispatch(actions.setLoginErrorMessage('Неправильно введены email или password!'))\r\n    }\r\n}\r\n\r\nexport const fakeLogin = (): ThunkType => async (dispatch) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            setTimeout(() => {\r\n                dispatch(actions.setUserData(0, 'testuser@email.com', 'testuser', true))\r\n                resolve()\r\n            } ,2000)\r\n        }\r\n        catch (e) {\r\n            alert(e.message)\r\n            reject()\r\n        }\r\n    })\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    Cookies.remove('email')\r\n    Cookies.remove('password')\r\n    dispatch(actions.setUserData(null, null, null, false))\r\n}\r\n\r\nexport const showLoginForm = (loginFormShown: boolean): ThunkType => async (dispatch) => {\r\n    dispatch(actions.showLoginForm(loginFormShown))\r\n}\r\n\r\nexport const setLoginErrorMessage = (loginErrorMessage: string | null): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setLoginErrorMessage(loginErrorMessage))\r\n}\r\n\r\nexport default clientSideApiReducer","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport TypographyMui from '@material-ui/core/Typography'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport MenuMui from '@material-ui/core/Menu'\r\nimport AccountCircleIconMui from '@material-ui/icons/AccountCircle'\r\nimport MoreIconMui from '@material-ui/icons/MoreVert'\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {appInitializing} from \"../../redux/appReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport {Helmet} from \"react-helmet\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport {logout, showLoginForm} from \"../../redux/authReducer\"\r\nimport {Button} from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        title: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'block',\r\n            },\r\n        },\r\n        sectionDesktop: {\r\n            display: 'none',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'flex',\r\n            },\r\n        },\r\n        sectionMobile: {\r\n            display: 'flex',\r\n            [theme.breakpoints.up('md')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n        typography__authorizedUserNickname: {\r\n            marginRight: theme.spacing(2),\r\n            alignSelf: 'center',\r\n        },\r\n    }),\r\n)\r\n\r\nconst AppBarContent: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n\r\n    const classes = useStyles()\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\r\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState<null | HTMLElement>(null)\r\n\r\n    const isMenuOpen = Boolean(anchorEl)\r\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl)\r\n\r\n    const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget)\r\n    }\r\n\r\n    const handleMobileMenuClose = () => {\r\n        setMobileMoreAnchorEl(null)\r\n    }\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null)\r\n        handleMobileMenuClose()\r\n    }\r\n\r\n    const handleExit = () => {\r\n        handleMenuClose()\r\n        props.logout()\r\n    }\r\n\r\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\r\n        setMobileMoreAnchorEl(event.currentTarget)\r\n    }\r\n\r\n    const handleLogin = () => {\r\n        props.showLoginForm(true)\r\n    }\r\n\r\n    const countOfShownTasks = props.isAuth ? props.countOfShownTasks : 0\r\n\r\n    const menuId = 'primary-search-account-menu'\r\n    const renderMenu = (\r\n        <MenuMui\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={menuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMenuOpen}\r\n            onClose={handleMenuClose}\r\n        >\r\n            <MenuItemMui onClick={handleExit}>Выйти</MenuItemMui>\r\n        </MenuMui>\r\n    )\r\n\r\n    const mobileMenuId = 'primary-search-account-menu-mobile';\r\n    const renderMobileMenu = (\r\n        <MenuMui\r\n            anchorEl={mobileMoreAnchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={mobileMenuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMobileMenuOpen}\r\n            onClose={handleMobileMenuClose}\r\n        >\r\n            {\r\n                !props.isAuth ? <MenuItemMui onClick={handleLogin}>Войти</MenuItemMui>\r\n                    : <MenuItemMui onClick={handleProfileMenuOpen}>\r\n                        <IconButtonMui\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls=\"primary-search-account-menu\"\r\n                            aria-haspopup=\"true\"\r\n                            color=\"inherit\"\r\n                        >\r\n                            <AccountCircleIconMui/>\r\n                        </IconButtonMui>\r\n                        <p>{props.myNickname}</p>\r\n                    </MenuItemMui>\r\n            }\r\n        </MenuMui>\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <TypographyMui className={classes.title} variant=\"h6\" noWrap>\r\n                {`Менеджер задач (${countOfShownTasks})`}\r\n                <Helmet title={`(${countOfShownTasks}) Менеджер задач`}/>\r\n            </TypographyMui>\r\n            <div className={classes.grow}/>\r\n            {\r\n                !props.isAuth ? <div className={classes.sectionDesktop}>\r\n                        <Button color=\"inherit\" onClick={handleLogin}>Войти</Button>\r\n                    </div>\r\n                    : <div className={classes.sectionDesktop}>\r\n\r\n                        <TypographyMui className={classes.typography__authorizedUserNickname}\r\n                                       variant='body1'>{props.myNickname}</TypographyMui>\r\n                        <IconButtonMui\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-controls={menuId}\r\n                            aria-haspopup=\"true\"\r\n                            onClick={handleProfileMenuOpen}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <AccountCircleIconMui/>\r\n                        </IconButtonMui>\r\n                    </div>\r\n            }\r\n            <div className={classes.sectionMobile}>\r\n                <IconButtonMui\r\n                    aria-label=\"show more\"\r\n                    aria-controls={mobileMenuId}\r\n                    aria-haspopup=\"true\"\r\n                    onClick={handleMobileMenuOpen}\r\n                    color=\"inherit\"\r\n                >\r\n                    <MoreIconMui/>\r\n                </IconButtonMui>\r\n            </div>\r\n            {renderMobileMenu}\r\n            {renderMenu}\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        countOfShownTasks: state.tasks.countOfShownTasks,\r\n        myNickname: state.auth.nickname,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    logout: () => void,\r\n    showLoginForm: (loginFormShown: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    logout,\r\n    showLoginForm\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppBarContent)","import React from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport FormControlMui from '@material-ui/core/FormControl'\r\nimport SelectMui from '@material-ui/core/Select'\r\nimport InputAdornmentMui from '@material-ui/core/InputAdornment'\r\nimport FilterListIconMui from '@material-ui/icons/FilterList'\r\nimport {Divider} from \"@material-ui/core\"\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {TaskFilterType, TaskSortType} from \"../../../types/types\"\r\nimport {setFilter, setSort} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n)\r\n\r\nconst CombinedFilter: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        switch (event.target.value) {\r\n            case 'CLOSE_FIRST':\r\n                props.setSort({firstCompleted: true, firstNew: false})\r\n                break\r\n            case 'OPEN_FIRST':\r\n                props.setSort({firstCompleted: false, firstNew: false})\r\n                break\r\n            case 'NEW_FIRST':\r\n                props.setSort({firstCompleted: null, firstNew: true})\r\n                break\r\n            case 'OLD_FIRST':\r\n                props.setSort({firstCompleted: null, firstNew: false})\r\n                break\r\n            default:\r\n                props.setSort({firstCompleted: null, firstNew: null})\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormControlMui className={classes.formControl}>\r\n                <SelectMui\r\n                    value={\r\n                        props.sort.firstCompleted !== null\r\n                            ? props.sort.firstCompleted === true\r\n                                ? 'CLOSE_FIRST'\r\n                                : 'OPEN_FIRST'\r\n                            : props.sort.firstNew !== null\r\n                                ? props.sort.firstNew === true\r\n                                    ? 'NEW_FIRST'\r\n                                    : 'OLD_FIRST'\r\n                                : ''\r\n                    }\r\n                    onChange={handleChange}\r\n                    displayEmpty\r\n                    className={classes.selectEmpty}\r\n                    inputProps={{ 'aria-label': 'Without label' }}\r\n                    startAdornment={\r\n                        <InputAdornmentMui position='start'>\r\n                            <FilterListIconMui />\r\n                        </InputAdornmentMui>\r\n                    }\r\n                >\r\n                    <MenuItemMui value=''>\r\n                        <em>Сортировка</em>\r\n                    </MenuItemMui>\r\n                    <Divider />\r\n                    <MenuItemMui value='NEW_FIRST'>От новых к старым</MenuItemMui>\r\n                    <MenuItemMui value='OLD_FIRST'>От старых к новым</MenuItemMui>\r\n                    <Divider />\r\n                    <MenuItemMui value='OPEN_FIRST'>Сначала незавершенные</MenuItemMui>\r\n                    <MenuItemMui value='CLOSE_FIRST'>Сначала завершенные</MenuItemMui>\r\n                </SelectMui>\r\n            </FormControlMui>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        sort: state.tasks.sort\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setSort: (filter: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setSort\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CombinedFilter)","import React from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport MenuItemMui from '@material-ui/core/MenuItem'\r\nimport FormControlMui from '@material-ui/core/FormControl'\r\nimport SelectMui from '@material-ui/core/Select'\r\nimport InputAdornmentMui from '@material-ui/core/InputAdornment'\r\nimport SortIconMui from '@material-ui/icons/Sort'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {getTasks, setCountOfShownTasks, setFetching, setFilter} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport {TaskFilterType} from \"../../../types/types\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n        selectEmpty: {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByStatusSort: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        let value = event.target.value\r\n        props.setFilter({\r\n            userIds: undefined,\r\n            status: value === 'OPEN' ? false\r\n                : value === 'CLOSE' ? true\r\n                    : null,\r\n            content: undefined})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormControlMui className={classes.formControl}>\r\n                <SelectMui\r\n                    value={\r\n                        props.filter.status === true ? 'CLOSE'\r\n                            :  props.filter.status === false ? 'OPEN'\r\n                                : ''\r\n                    }\r\n                    onChange={handleChange}\r\n                    displayEmpty\r\n                    className={classes.selectEmpty}\r\n                    inputProps={{ 'aria-label': 'Without label' }}\r\n                    startAdornment={\r\n                        <InputAdornmentMui position=\"start\">\r\n                            <SortIconMui />\r\n                        </InputAdornmentMui>\r\n                    }\r\n                >\r\n                    <MenuItemMui value=\"\">\r\n                        <em>По статусу</em>\r\n                    </MenuItemMui>\r\n                    <MenuItemMui value='OPEN'>Незавершенные</MenuItemMui>\r\n                    <MenuItemMui value='CLOSE'>Завершенные</MenuItemMui>\r\n                </SelectMui>\r\n            </FormControlMui>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        filter: state.tasks.filter\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByStatusSort)","import React, {ChangeEvent} from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport AutocompleteMui from '@material-ui/lab/Autocomplete'\r\nimport TextFieldMui from '@material-ui/core/TextField'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {TaskFilterType, UserType} from \"../../../types/types\"\r\nimport {setFilter} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: \"100%\",\r\n            '& > * + *': {\r\n                marginTop: theme.spacing(3),\r\n            },\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByUsersFilter: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    let filteredUsers = (() =>\r\n        {\r\n            if (props.filter.userIds) {\r\n                return props.filter.userIds.map( userId => {\r\n                    return props.users.filter( user => user.id === userId)[0]\r\n                })\r\n            } else return []\r\n        }\r\n    )()\r\n\r\n    const handleUsersChanged = (event: ChangeEvent<{}>, users: UserType[]) => {\r\n        let usersIds = users.map( user => user.id)\r\n        props.setFilter({userIds: usersIds, status: undefined, content: undefined}, true)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AutocompleteMui\r\n                onChange={handleUsersChanged}\r\n                disableClearable\r\n                multiple\r\n                id=\"tags-outlined\"\r\n                options={props.users}\r\n                getOptionLabel={(option) => option.nickname}\r\n                value={filteredUsers}\r\n                filterSelectedOptions\r\n                renderInput={(params) => (\r\n                    <TextFieldMui\r\n                        {...params}\r\n                        variant=\"standard\"\r\n                        label=\"\"\r\n                        placeholder=\"Авторы\"\r\n                    />\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.users.users,\r\n        filter: state.tasks.filter\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByUsersFilter)","import React, {ChangeEvent} from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport TextFieldMui from '@material-ui/core/TextField'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {ProjectType, TaskFilterType} from \"../../../types/types\"\r\nimport {getProjects, setFetching, setProjects, setSelectedProjectId} from \"../../../redux/projectsReducer\"\r\nimport {setSelectedUserId} from \"../../../redux/usersReducer\"\r\nimport {setFilter} from \"../../../redux/tasksReducer\"\r\nimport {connect} from \"react-redux\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                margin: theme.spacing(1, 0),\r\n            },\r\n        },\r\n    }),\r\n)\r\n\r\nconst ByContentFilter: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleContentChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        props.setFilter({userIds: undefined, status: undefined, content: e.currentTarget.value})\r\n    }\r\n\r\n    return (\r\n        <form style={{width: '100%'}} className={classes.root} noValidate autoComplete=\"off\"\r\n        >\r\n            <TextFieldMui\r\n                value={props.filter.content}\r\n                onChange={handleContentChange}\r\n                id=\"standard-basic\"\r\n                label=\"Искать по содержимому: \"\r\n                fullWidth\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        filter: state.tasks.filter\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType, rewrite?: boolean) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ByContentFilter)","import React from \"react\"\r\nimport ListItemMui from \"@material-ui/core/ListItem/ListItem\"\r\nimport ListItemSecondaryActionMui from \"@material-ui/core/ListItemSecondaryAction/ListItemSecondaryAction\"\r\nimport IconButtonMui from \"@material-ui/core/IconButton/IconButton\"\r\nimport BackspaceIconMui from '@material-ui/icons/Backspace'\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {appInitializing} from \"../../../redux/appReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport {TaskFilterType, TaskSortType} from \"../../../types/types\"\r\nimport {setFilter, setSort} from \"../../../redux/tasksReducer\"\r\n\r\ntype OwnProps = {\r\n    children: React.ReactElement | React.ReactElement[]\r\n    rowNumber: number\r\n}\r\n\r\nconst FilterRow: React.FC<OwnProps & MapDispatchProps> = (props) => {\r\n\r\n    const handleClearFiltersInRow = () => {\r\n        switch (props.rowNumber) {\r\n            case 1:\r\n                props.setSort({firstCompleted: null, firstNew: null})\r\n                props.setFilter({userIds: undefined, status: null, content: undefined})\r\n                break\r\n            case 2:\r\n                props.setFilter({userIds: null, status: undefined, content: undefined})\r\n                break\r\n            case 3:\r\n                props.setFilter({userIds: undefined, status: undefined, content: null})\r\n                break\r\n            default: break\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ListItemMui >\r\n            {props.children}\r\n            <ListItemSecondaryActionMui>\r\n                <IconButtonMui onClick={handleClearFiltersInRow} edge=\"end\" aria-label=\"delete\">\r\n                    <BackspaceIconMui/>\r\n                </IconButtonMui>\r\n            </ListItemSecondaryActionMui>\r\n        </ListItemMui>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFilter: (filter: TaskFilterType) => void\r\n    setSort: (sort: TaskSortType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFilter,\r\n    setSort\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterRow)","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemSecondaryActionMui from '@material-ui/core/ListItemSecondaryAction'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport BackspaceIconMui from '@material-ui/icons/Backspace'\r\nimport CombinedFilter from \"./CombinedFilter/CombinedFilter\"\r\nimport ByStatusSort from \"./ByStatusSort/ByStatusSort\"\r\nimport ByUsersFilter from \"./ByUsersFilter/ByUsersFilter\"\r\nimport ByContentFilter from \"./ByContentFilter/ByContentFilter\"\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {appInitializing} from \"../../redux/appReducer\"\r\nimport {connect} from \"react-redux\"\r\nimport FilterRow from \"./FilterRow/FilterRow\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nconst Filter: React.FC<any> = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <ListMui disablePadding>\r\n                <FilterRow rowNumber={1}>\r\n                        <CombinedFilter/>\r\n                        <ByStatusSort/>\r\n                </FilterRow>\r\n                <FilterRow rowNumber={2}><ByUsersFilter/></FilterRow>\r\n                <FilterRow rowNumber={3}><ByContentFilter/></FilterRow>\r\n            </ListMui>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Filter\r\n","import React from 'react'\r\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport CollapseMui from '@material-ui/core/Collapse'\r\nimport ExpandLessMui from '@material-ui/icons/ExpandLess'\r\nimport ExpandMoreMui from '@material-ui/icons/ExpandMore'\r\nimport SearchIconMui from '@material-ui/icons/Search'\r\nimport Filter from \"./Filter\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        /*nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },*/\r\n    }),\r\n)\r\n\r\nconst FilterWrapper: React.FC<any> = () => {\r\n\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleClick = () => {\r\n        setOpen(!open)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ListItemMui button onClick={handleClick}>\r\n                <ListItemIconMui>\r\n                    <SearchIconMui/>\r\n                </ListItemIconMui>\r\n                <ListItemTextMui\r\n                    primary=\"Поиск задач\"\r\n                    primaryTypographyProps={{variant: \"body1\"}}/>\r\n                {open ? <ExpandLessMui/> : <ExpandMoreMui/>}\r\n            </ListItemMui>\r\n            <CollapseMui in={open} timeout=\"auto\" unmountOnExit>\r\n                <ListMui component=\"div\" disablePadding>\r\n                    <Filter/>\r\n                </ListMui>\r\n            </CollapseMui>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FilterWrapper","import React from 'react'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemIconMui from '@material-ui/core/ListItemIcon'\r\nimport ListItemSecondaryActionMui from '@material-ui/core/ListItemSecondaryAction'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport CheckboxMui from '@material-ui/core/Checkbox'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport DeleteOutlineIconMui from '@material-ui/icons/DeleteOutline'\r\nimport {connect} from \"react-redux\"\r\nimport {TaskType, UserType} from \"../../../types/types\"\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport {changeTask, deleteTask} from \"../../../redux/tasksReducer\"\r\nimport {Form, Formik} from \"formik\"\r\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\"\r\nimport InputBase from \"@material-ui/core/InputBase\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        checkbox_cursor_default: {\r\n            cursor: 'default',\r\n        },\r\n    }),\r\n)\r\n\r\ntype OwnType = {\r\n    task: TaskType\r\n}\r\n\r\nconst Task: React.FC<MapStatePropsType & MapDispatchProps & OwnType> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    console.log('task render')\r\n\r\n    const userById = (users: Array<UserType>, authorId: number): UserType => {\r\n        let filteredUsers = users.filter(u => u.id === authorId)\r\n        return filteredUsers[0]\r\n    }\r\n\r\n    /*const taskById = (tasks: Array<TaskType>, taskId: number): TaskType => {\r\n        let filteredTasks = tasks.filter(t => t.id === taskId)\r\n        return filteredTasks[0]\r\n    }*/\r\n\r\n    const task: TaskType = props.task\r\n\r\n    const labelId = `checkbox-list-label-${task.id}`;\r\n    const date = new Date(task.date)\r\n    const dateStr = `${\r\n        date.getDate() < 10 ? `0${date.getDate()}` : date.getDate()\r\n    }.${\r\n        date.getMonth() < 9 ? `0${date.getMonth() + 1}` : date.getMonth() + 1\r\n    }.${\r\n        date.getFullYear()\r\n    } ${\r\n        date.getHours() < 10 ? `0${date.getHours()}` : date.getHours()\r\n    }:${\r\n        date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes()\r\n    }`\r\n\r\n    const handleChangeStatus = () => {\r\n        task.author === props.myId && props.changeTask({...task, isDone: !task.isDone, title: task.title})\r\n    }\r\n\r\n    const handleChangeTitle = (title: string) => {\r\n        task.author === props.myId && props.changeTask({...task, isDone: task.isDone, title})\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        props.deleteTask(task.id)\r\n    }\r\n\r\n    return (\r\n        <ListItemMui role={undefined}>\r\n            <ListItemIconMui\r\n                onChange={handleChangeStatus}\r\n            >\r\n                <CheckboxMui\r\n                    className={task.author !== props.myId ? classes.checkbox_cursor_default : ''}\r\n                    edge=\"start\"\r\n                    checked={task.isDone}\r\n                    tabIndex={-1}\r\n                    disableRipple\r\n                    inputProps={{'aria-labelledby': labelId}}\r\n                    color={task.author === props.myId ? 'secondary' : 'primary'}\r\n                />\r\n            </ListItemIconMui>\r\n            <ListItemTextMui id={labelId}\r\n                             primary={\r\n                                 task.author === props.myId\r\n                                     ? (\r\n                                         <Formik\r\n                                             initialValues={{\r\n                                                 title: task.title,\r\n                                             }}\r\n                                             onSubmit={(values, {setSubmitting}) => {\r\n                                                 setTimeout(() => {\r\n                                                     handleChangeTitle(values.title)\r\n                                                     setSubmitting(false)\r\n                                                 }, 0)\r\n                                             }}\r\n                                         >\r\n                                             {({\r\n                                                   values,\r\n                                                   handleChange,\r\n                                                   handleSubmit,\r\n                                               }) => {\r\n                                                 return (\r\n                                                     <Form onSubmit={handleSubmit}>\r\n                                                         <InputBase\r\n                                                             name=\"title\"\r\n                                                             type=\"title\"\r\n                                                             id=\"title\"\r\n                                                             fullWidth\r\n                                                             multiline\r\n                                                             value={values.title}\r\n                                                             onChange={handleChange}\r\n                                                             onBlur={()=>{handleSubmit()}}\r\n                                                             onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\r\n                                                                 if (e.key === 'Enter' && !e.ctrlKey) {\r\n                                                                     handleSubmit()\r\n                                                                     e.preventDefault()\r\n                                                                 } else if (e.key === 'Enter' && e.ctrlKey) {\r\n                                                                     e.currentTarget.value += '\\n'\r\n                                                                     handleChange(e)\r\n                                                                 }\r\n                                                             }}\r\n                                                         />\r\n                                                     </Form>\r\n                                                 )\r\n                                             }}\r\n                                         </Formik>\r\n                                     )\r\n                                     : task.title\r\n                             }\r\n                             secondary={`${dateStr} - ${userById(props.users, task.author) && userById(props.users, task.author).nickname}`}\r\n            />\r\n            {task.author === props.myId && (\r\n                <ListItemSecondaryActionMui>\r\n                    <IconButtonMui\r\n                        onClick={handleDelete}\r\n                        edge=\"end\" aria-label=\"comments\">\r\n                        <DeleteOutlineIconMui/>\r\n                    </IconButtonMui>\r\n                </ListItemSecondaryActionMui>\r\n            )}\r\n        </ListItemMui>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.users.users,\r\n        myId: state.auth.id,\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    deleteTask: (taskId: number) => void\r\n    changeTask: (task: TaskType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    deleteTask,\r\n    changeTask\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)","import React from 'react'\r\nimport ListItemMui from '@material-ui/core/ListItem'\r\nimport ListItemSecondaryActionMui from '@material-ui/core/ListItemSecondaryAction'\r\nimport ListItemTextMui from '@material-ui/core/ListItemText'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport {connect} from \"react-redux\"\r\nimport {AppStateType} from \"../../../redux/store\"\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport {createStyles, TextField, Theme} from \"@material-ui/core\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport {Form, Formik} from \"formik\"\r\nimport InputBase from \"@material-ui/core/InputBase/InputBase\"\r\nimport FormControl from \"@material-ui/core/FormControl\"\r\nimport InputLabel from \"@material-ui/core/InputLabel\"\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\"\r\nimport {newTask} from \"../../../redux/tasksReducer\"\r\nimport {TaskType} from \"../../../types/types\"\r\nimport {getBreakedString} from \"../../../utils/breakLineForTextarea\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        textFieldWrapper_marginRight_20px: {\r\n            marginRight: '20px',\r\n        },\r\n    }),\r\n)\r\n\r\ntype OwnType = {}\r\n\r\nconst NewTask: React.FC<MapStatePropsType & MapDispatchProps & OwnType> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleNewTask = (\r\n        id: number,\r\n        project: number,\r\n        author: number,\r\n        date: number,\r\n        title: string,\r\n        isDone: boolean\r\n    ) => {\r\n        props.newTask({id, project, author, date, title, isDone})\r\n    }\r\n\r\n    return (\r\n\r\n        <Formik\r\n            initialValues={{\r\n                title: ''\r\n            }}\r\n            onSubmit={(values, {setSubmitting}) => {\r\n                setTimeout(() => {\r\n                    props.selectedProjectId !== null && props.myId !== null && handleNewTask(\r\n                        props.idCounter,\r\n                        props.selectedProjectId,\r\n                        props.myId,\r\n                        Date.now(),\r\n                        values.title,\r\n                        false\r\n                    )\r\n                    values.title=''\r\n                    setSubmitting(false)\r\n                }, 0)\r\n            }}\r\n        >\r\n            {({values, handleChange, handleSubmit}) => {\r\n                return (\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <ListItemMui role={undefined}>\r\n                            <ListItemTextMui primary={\r\n                                <div className={classes.textFieldWrapper_marginRight_20px}>\r\n                                    <FormControl variant=\"outlined\" fullWidth>\r\n                                        <OutlinedInput\r\n                                            name=\"title\"\r\n                                            type=\"title\"\r\n                                            id=\"title\"\r\n                                            multiline\r\n                                            placeholder='Новая задача...'\r\n                                            value={values.title}\r\n                                            onChange={handleChange}\r\n                                            onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => {\r\n                                                if (e.key === 'Enter' && !e.ctrlKey) {\r\n                                                    if (/Windows NT/.test(navigator.userAgent)) {\r\n                                                        handleSubmit()\r\n                                                        e.preventDefault()\r\n                                                    }\r\n                                                } else if (e.key === 'Enter' && e.ctrlKey) {\r\n                                                    handleChange(getBreakedString(e))\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                </div>\r\n                            }\r\n                            />\r\n                            <ListItemSecondaryActionMui>\r\n                                <IconButtonMui\r\n                                    onClick={() => {\r\n                                        handleSubmit()\r\n                                    }}\r\n                                    edge=\"end\"\r\n                                    aria-label=\"comments\"\r\n                                >\r\n                                    <AddCircleIcon fontSize='large'/>\r\n                                </IconButtonMui>\r\n                            </ListItemSecondaryActionMui>\r\n                        </ListItemMui>\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        idCounter: state.tasks.idCounter,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        myId: state.auth.id\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    newTask: (task: TaskType) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    newTask\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NewTask)","import React from \"react\"\r\n\r\nexport const getBreakedString = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    let value = e.currentTarget.value\r\n    let start = e.currentTarget.selectionStart\r\n    let end = e.currentTarget.selectionEnd\r\n\r\n    e.currentTarget.value =\r\n        value.slice(0, start !== null ? start : undefined) + '\\n' +\r\n        value.slice(end !== null ? end : undefined, value.length-1)\r\n\r\n    e.currentTarget.selectionStart = start ? start + 1 : value.length - 1\r\n    e.currentTarget.selectionEnd = start ? start + 1 : value.length - 1\r\n\r\n    return e\r\n}","import React, {useEffect, useMemo} from 'react'\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\r\nimport ListMui from '@material-ui/core/List'\r\nimport ContainerMui from \"@material-ui/core/Container\"\r\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\"\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {getTasks, setCountOfShownTasks, setFetching} from \"../../redux/tasksReducer\"\r\nimport {TaskType} from \"../../types/types\"\r\nimport {filterByDate, filterByStatus} from \"../../utils/tasksFilters\"\r\nimport Task from \"./Task/Task\"\r\nimport {setSelectedProjectId} from \"../../redux/projectsReducer\"\r\nimport NewTask from \"./NewTask/NewTask\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            maxWidth: 600,\r\n            backgroundColor: theme.palette.background.paper,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n        },\r\n        progress: {\r\n            alignSelf: 'center',\r\n            margin: theme.spacing(2),\r\n        },\r\n        itemSecondaryText: {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n        },\r\n    }),\r\n)\r\n\r\nconst TasksList: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.usersIsFetching\r\n            ? props.setFetching(true)\r\n            : props.selectedProjectId !== null && props.getTasks([props.selectedProjectId], null)\r\n    }, [props.usersIsFetching])\r\n\r\n    const classes = useStyles();\r\n\r\n    let tasksWithClientSideData = props.tasks.filter(\r\n        t => !props.tasksOnClient.deleted.filter(\r\n            item => item === t.id\r\n        ).length\r\n    ).concat(props.tasksOnClient.items.filter(item => item.project === props.selectedProjectId))\r\n\r\n    let filteredTasks = tasksWithClientSideData.filter((t) => {\r\n        let statusFilter = props.filter.status !== null ? t.isDone === props.filter.status : true\r\n        let usersFilter = props.filter.userIds && props.filter.userIds.length > 0 ? props.filter.userIds.filter(id => id === t.author).length > 0 : true\r\n        let contentFilter = props.filter.content ? t.title.match(new RegExp(props.filter.content, 'gi')) : true\r\n        return statusFilter && usersFilter && contentFilter\r\n    })\r\n\r\n    filteredTasks = filteredTasks.sort((a: TaskType, b: TaskType): number => {\r\n        let sortResultByStatus = filterByStatus(a, b, props.sort.firstCompleted)\r\n        let sortResultByDate = filterByDate(a, b, props.sort.firstNew)\r\n\r\n        if (sortResultByStatus !== 0) return sortResultByStatus\r\n        else return sortResultByDate\r\n    })\r\n\r\n    useEffect(()=>{\r\n        props.setCountOfShownTasks(filteredTasks.length)\r\n    },[filteredTasks])\r\n\r\n    return (\r\n        <ContainerMui maxWidth={\"sm\"}>\r\n            <ListMui className={classes.root}>\r\n                {\r\n                    props.isFetching && props.isAuth\r\n                        ? <CircularProgress className={classes.progress} size={50}/>\r\n                        : props.isAuth && (\r\n                            <div>\r\n                                {filteredTasks.map(item => <Task key={item.id} task={item}/>)}\r\n                                <NewTask/>\r\n                            </div>\r\n                    )\r\n                }\r\n            </ListMui>\r\n        </ContainerMui>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isFetching: state.tasks.isFetching,\r\n        isAuth: state.auth.isAuth,\r\n        usersIsFetching: state.users.isFetching,\r\n        selectedProjectId: state.projects.selectedProjectId,\r\n        tasks: state.tasks.tasks,\r\n        filter: state.tasks.filter,\r\n        sort: state.tasks.sort,\r\n        tasksOnClient: state.clientSideDb.clientSideData.tasks\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    setFetching: (isFetching: boolean) => void,\r\n    getTasks: (projectIds: Array<number> | null, userIds: Array<number> | null) => void\r\n    setCountOfShownTasks: (countOfShownTasks: number) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    setFetching,\r\n    getTasks,\r\n    setCountOfShownTasks\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksList)","import {TaskType} from \"../types/types\"\r\n\r\nexport const filterByStatus = (a: TaskType, b: TaskType, firstCompleted: boolean | null | undefined) => {\r\n    if (firstCompleted !== null) {\r\n        if (firstCompleted === true) {\r\n            if (a.isDone === b.isDone) return 0\r\n            else if (a.isDone > b.isDone) return -1\r\n            else return 1\r\n        }\r\n        else {\r\n            if (a.isDone === b.isDone) return 0\r\n            else if (a.isDone < b.isDone) return -1\r\n            else return 1\r\n        }\r\n    } else return 0\r\n}\r\n\r\nexport const filterByDate = (a: TaskType, b: TaskType, firstNew: boolean | null | undefined) => {\r\n    const dateDiff = a.date - b.date\r\n    if (firstNew === true || null) return dateDiff * -1\r\n    else return dateDiff\r\n}","import {ThunkAction} from \"redux-thunk\"\r\nimport {ActionsTypes, AppStateType} from \"./store\"\r\nimport {authAPI, usersAPI} from \"../api/api\"\r\nimport {AuthorizationFailedException} from \"../exceptions/exceptions\"\r\nimport {fakeLogin, login, showLoginForm} from \"./authReducer\"\r\nimport Cookies from 'js-cookie'\r\n\r\nlet initialState = {\r\n    isInitialized: false\r\n};\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"app/SET_INITIALIZED\":\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionsType = ActionsTypes<typeof actions>\r\nexport const actions = {\r\n    setInitialized: (isInitialized: boolean) => ({type: 'app/SET_INITIALIZED', isInitialized} as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\nexport const appInitializing = (): ThunkType => async (dispatch) => {\r\n    try {\r\n        let email = Cookies.get('email')\r\n        let password = Cookies.get('password')\r\n        if (email && password)\r\n            await dispatch(login(email, password))\r\n        else {\r\n            dispatch(showLoginForm(true))\r\n        }\r\n\r\n        dispatch(actions.setInitialized(true))\r\n    } catch (e) {\r\n        alert(e.message)\r\n    }\r\n}\r\n\r\nexport default appReducer","import React from 'react';\r\nimport {AppStateType} from \"../../redux/store\"\r\nimport {connect} from \"react-redux\"\r\nimport {login, setLoginErrorMessage, showLoginForm} from \"../../redux/authReducer\"\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport {Formik, Form, Field} from 'formik';\r\nimport {Button, LinearProgress} from '@material-ui/core';\r\nimport {TextField} from 'formik-material-ui';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport {Typography} from \"@material-ui/core\"\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport {isEmail} from \"../../validators/validators\"\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\"\r\n\r\ntype Values = {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\nconst LoginForm: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    const handleClose = () => {\r\n        props.showLoginForm(false)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={true} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <Formik\r\n                    initialValues={{\r\n                        email: '',\r\n                        password: '',\r\n                    }}\r\n                    validate={values => {\r\n                        const errors: Partial<Values> = {}\r\n\r\n                        if (!values.email) errors.email = 'Обязательно для заполнения'\r\n                        else if (!isEmail(values.email)) errors.email = 'Неправильный формат адреса'\r\n\r\n                        if (!values.password) errors.password = 'Обязательно для заполнения'\r\n\r\n                        return errors;\r\n                    }}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        setTimeout(async () => {\r\n                            props.setLoginErrorMessage(null)\r\n                            await props.login(values.email, values.password)\r\n                            setSubmitting(false);\r\n                        }, 0);\r\n                    }}\r\n                >\r\n                    {({submitForm, isSubmitting}) => (\r\n                        <Form>\r\n                            <DialogTitle id=\"form-dialog-title\">Авторизация</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    <Typography variant='caption'>\r\n                                        test user data. email: 'testuser@email.com' password: 'testuser_pass'\r\n                                    </Typography>\r\n                                </DialogContentText>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    name=\"email\"\r\n                                    autoFocus\r\n                                    margin=\"dense\"\r\n                                    id=\"email\"\r\n                                    label=\"Email Address\"\r\n                                    type=\"email\"\r\n                                    fullWidth\r\n                                />\r\n                                <br/>\r\n                                <Field\r\n                                    component={TextField}\r\n                                    name=\"password\"\r\n                                    margin=\"dense\"\r\n                                    id=\"password\"\r\n                                    label=\"Password\"\r\n                                    type=\"password\"\r\n                                    fullWidth\r\n                                />\r\n                                <br/>\r\n                            </DialogContent>\r\n                            {\r\n                                props.loginErrorMessage && <DialogContent>\r\n                                    <FormHelperText id=\"my-helper-text\" error={true}>\r\n                                        {props.loginErrorMessage}\r\n                                    </FormHelperText>\r\n                                </DialogContent>\r\n                            }\r\n                            <DialogActions>\r\n                                <Button\r\n                                    onClick={submitForm}\r\n                                    color=\"primary\"\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                    Войти\r\n                                </Button>\r\n                                <Button\r\n                                    onClick={handleClose}\r\n                                    color=\"primary\"\r\n                                    disabled={isSubmitting}\r\n                                >\r\n                                    Отмена\r\n                                </Button>\r\n                            </ DialogActions>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        loginErrorMessage: state.auth.loginErrorMessage\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    showLoginForm: (loginFormShown: boolean) => void\r\n    login: (email: string, password: string) => void\r\n    setLoginErrorMessage: (loginErrorMessage: string | null) => void\r\n}\r\nconst mapDispatchToProps = {\r\n    showLoginForm,\r\n    login,\r\n    setLoginErrorMessage\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm)","export const isEmail = (value: string): string =>\r\n    /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Неправильный формат адреса' : ''","import './App.css'\r\nimport React, {useEffect} from 'react'\r\nimport {AppStateType} from \"./redux/store\"\r\nimport {makeStyles, useTheme, Theme, createStyles} from '@material-ui/core/styles'\r\nimport AppBarMui from '@material-ui/core/AppBar'\r\nimport CssBaselineMui from '@material-ui/core/CssBaseline'\r\nimport DividerMui from '@material-ui/core/Divider'\r\nimport DrawerMui from '@material-ui/core/Drawer'\r\nimport HiddenMui from '@material-ui/core/Hidden'\r\nimport IconButtonMui from '@material-ui/core/IconButton'\r\nimport ToolbarMui from '@material-ui/core/Toolbar'\r\nimport MenuIconMui from '@material-ui/icons/Menu'\r\nimport Menu from \"./components/Menu/Menu\"\r\nimport AppBarContent from \"./components/AppBarContent/AppBarContent\"\r\nimport FilterWrapper from \"./components/FilterData/FilterWrapper\"\r\nimport TasksList from \"./components/TasksList/TasksList\"\r\nimport {connect} from \"react-redux\"\r\nimport {CircularProgress} from \"@material-ui/core\"\r\nimport Backdrop from \"@material-ui/core/Backdrop\"\r\nimport {appInitializing} from \"./redux/appReducer\"\r\nimport LoginForm from \"./components/LoginForm/LoginForm\"\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n        },\r\n        drawer: {\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: drawerWidth,\r\n                flexShrink: 0,\r\n            },\r\n        },\r\n        appBar: {\r\n            [theme.breakpoints.up('sm')]: {\r\n                width: `calc(100% - ${drawerWidth}px)`,\r\n                marginLeft: drawerWidth,\r\n            },\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n            [theme.breakpoints.up('sm')]: {\r\n                display: 'none',\r\n            },\r\n        },\r\n        toolbar: theme.mixins.toolbar,\r\n        drawerPaper: {\r\n            width: drawerWidth,\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            padding: theme.spacing(3),\r\n        },\r\n        backdrop: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            color: '#fff',\r\n        },\r\n    }),\r\n);\r\n\r\nconst App: React.FC<MapStatePropsType & MapDispatchProps> = (props) => {\r\n\r\n    useEffect( () => {\r\n        props.appInitializing()\r\n    },[])\r\n\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false)\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n    const drawer = (\r\n        <div>\r\n            <div className={classes.toolbar}/>\r\n            <DividerMui/>\r\n            <Menu/>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Backdrop className={classes.backdrop} open={!props.isInitialized}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n            {\r\n                props.loginFormShown && <LoginForm/>\r\n            }\r\n            <CssBaselineMui/>\r\n            <AppBarMui position=\"fixed\" className={classes.appBar}>\r\n                <ToolbarMui>\r\n                    <IconButtonMui\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIconMui/>\r\n                    </IconButtonMui>\r\n                    <AppBarContent/>\r\n                </ToolbarMui>\r\n            </AppBarMui>\r\n            <nav className={classes.drawer} aria-label=\"menu folders\">\r\n                <HiddenMui smUp implementation=\"css\">\r\n                    <DrawerMui\r\n                        variant=\"temporary\"\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true,\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </DrawerMui>\r\n                </HiddenMui>\r\n                <HiddenMui xsDown implementation=\"css\">\r\n                    <DrawerMui\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </DrawerMui>\r\n                </HiddenMui>\r\n            </nav>\r\n            {\r\n                props.isAuth && <main className={classes.content}>\r\n                    <div className={classes.toolbar}/>\r\n                    <FilterWrapper/>\r\n                    <TasksList/>\r\n                </main>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isInitialized: state.app.isInitialized,\r\n        isAuth: state.auth.isAuth,\r\n        loginFormShown: state.auth.loginFormShown\r\n    }\r\n}\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchProps = {\r\n    appInitializing: () => void\r\n}\r\nconst mapDispatchToProps = {\r\n    appInitializing\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport clientSideApiReducer from \"./clientSideApiReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport projectsReducer from \"./projectsReducer\"\r\nimport usersReducer from \"./usersReducer\"\r\nimport tasksReducer from \"./tasksReducer\"\r\nimport appReducer from \"./appReducer\"\r\n\r\nlet rootReducer = combineReducers({\r\n    api: clientSideApiReducer,\r\n    auth: authReducer,\r\n    projects: projectsReducer,\r\n    users: usersReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    clientSideDb: clientSideApiReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype UnionTypeFromObj<T> = T extends {[key: string]: infer R} ? R : never\r\nexport type ActionsTypes<T extends {[key: string]: (...args: any[]) => any}> = ReturnType<UnionTypeFromObj<T>>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n/*let store = createStore(rootReducer, applyMiddleware(thunkMiddleware));*/\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\"\r\nimport store from \"./redux/store\"\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}